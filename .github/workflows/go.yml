name: Simple CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.24.6'

jobs:
  # 基础检查：测试和构建
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...

      - name: Build
        run: go build -v main.go

      - name: Clean up
        run: rm -f main

  # 自动发布（每次push到main都会触发）
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Generate version tag
        id: version
        run: |
          # 获取最新tag，如果没有则从v1.0.0开始
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # 提取版本号并递增
          if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          else
            NEW_TAG="v1.0.0"
          fi
          
          echo "New tag: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Build release binaries
        run: |
          mkdir -p dist
          
          # 构建不同平台的二进制文件
          echo "🔨 Building for Linux AMD64..."
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/ai-cloudops-linux-amd64 main.go
          
          echo "🔨 Building for Linux ARM64..."
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/ai-cloudops-linux-arm64 main.go
          
          echo "🔨 Building for MacOS AMD64..."
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/ai-cloudops-darwin-amd64 main.go
          
          echo "🔨 Building for MacOS ARM64..."
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/ai-cloudops-darwin-arm64 main.go
          
          echo "🔨 Building for Windows AMD64..."
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/ai-cloudops-windows-amd64.exe main.go

      - name: Create source packages
        run: |
          echo "📦 Creating source packages..."
          
          # 创建完整源码包
          zip -r "dist/ai-cloudops-${{ steps.version.outputs.version }}-source.zip" . \
            -x ".git/*" "dist/*" "*.log" "node_modules/*" ".DS_Store" \
               "logs/*" "data/*" "tmp/*" ".env"
          
          # 创建生产环境包
          mkdir -p ai-cloudops-production
          rsync -av --exclude='.git' --exclude='dist' --exclude='logs' \
                    --exclude='data' --exclude='tmp' --exclude='*.log' \
                    --exclude='.DS_Store' --exclude='node_modules' \
                    --exclude='.env' . ai-cloudops-production/
          
          # 使用生产配置
          if [ -f "config/config.production.yaml" ]; then
            cp config/config.production.yaml ai-cloudops-production/config/config.yaml
          fi
          
          zip -r "dist/ai-cloudops-${{ steps.version.outputs.version }}-production.zip" ai-cloudops-production
          rm -rf ai-cloudops-production
          
          echo "✅ Packages created"

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG="Initial release"
          else
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "AI-CloudOps ${{ steps.version.outputs.tag }}"
          body: |
            ## 🚀 AI-CloudOps ${{ steps.version.outputs.tag }} - 自动发布
            
            ### 📋 更新内容
            ${{ steps.changelog.outputs.changelog }}
            
            ### 📦 下载说明
            
            **二进制文件：**
            - `ai-cloudops-linux-amd64` - Linux x86_64
            - `ai-cloudops-linux-arm64` - Linux ARM64  
            - `ai-cloudops-darwin-amd64` - macOS Intel
            - `ai-cloudops-darwin-arm64` - macOS Apple Silicon
            - `ai-cloudops-windows-amd64.exe` - Windows x64
            
            **源码包：**
            - `ai-cloudops-${{ steps.version.outputs.version }}-source.zip` - 完整源码
            - `ai-cloudops-${{ steps.version.outputs.version }}-production.zip` - 生产环境优化版
            
            ### 🔧 快速使用
            
            1. 下载对应平台的二进制文件
            2. 给文件执行权限：`chmod +x ai-cloudops-*`  
            3. 直接运行：`./ai-cloudops-linux-amd64`
            
            或下载源码包进行自定义配置和构建。
            
            ---
            
            **构建时间**: ${{ github.event.head_commit.timestamp }}
            **提交**: ${{ github.sha }}
          draft: false
          prerelease: false
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
