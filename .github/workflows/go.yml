name: Simple CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.24.6'

permissions:
  contents: write
  pull-requests: read

jobs:
  # 基础检查：测试和构建
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...

      - name: Build
        run: go build -v main.go

      - name: Clean up
        run: rm -f main

  # 自动发布（每次push到main都会触发）
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Generate version tag
        id: version
        run: |
          # 基于时间戳和commit创建唯一版本号
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          NEW_TAG="v1.0.${TIMESTAMP}"
          
          echo "Generated tag: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT

      - name: Prepare release directory
        run: |
          mkdir -p dist
          echo "📦 Preparing source code packages..."

      - name: Create source packages
        run: |
          echo "📦 Creating source packages..."
          
          # 1. 完整源码包（ZIP格式）- 包含所有开发文件
          echo "Creating full source package (ZIP)..."
          zip -r "dist/ai-cloudops-${{ steps.version.outputs.version }}-source.zip" . \
            -x ".git/*" "dist/*" "*.log" "node_modules/*" ".DS_Store" \
               "logs/*" "data/*" "tmp/*" ".env" "bin/*"
          
          # 2. 完整源码包（TAR.GZ格式）- 兼容性更好
          echo "Creating full source package (TAR.GZ)..."
          tar --exclude='.git' --exclude='dist' --exclude='*.log' \
              --exclude='node_modules' --exclude='.DS_Store' \
              --exclude='logs' --exclude='data' --exclude='tmp' \
              --exclude='.env' --exclude='bin' \
              -czf "dist/ai-cloudops-${{ steps.version.outputs.version }}-source.tar.gz" .
          
          # 3. 生产环境源码包（去除开发文件）
          echo "Creating production source package..."
          zip -r "dist/ai-cloudops-${{ steps.version.outputs.version }}-production.zip" . \
            -x ".git/*" "dist/*" "*.log" "node_modules/*" ".DS_Store" \
               "logs/*" "data/*" "tmp/*" ".env" "bin/*" \
               "*.md" "examples/*" "docs/*" "image/*" \
               ".github/*" "scripts/*" "mock/*" "tools/*" \
               "LICENSE" ".gitignore"
          
          # 4. 轻量级部署包（仅核心运行文件）
          echo "Creating lightweight deployment package..."
          tar --exclude='.git' --exclude='dist' --exclude='*.log' \
              --exclude='node_modules' --exclude='.DS_Store' \
              --exclude='logs' --exclude='data' --exclude='tmp' \
              --exclude='.env' --exclude='bin' \
              --exclude='*.md' --exclude='examples' --exclude='docs' \
              --exclude='image' --exclude='.github' --exclude='scripts' \
              --exclude='mock' --exclude='tools' --exclude='LICENSE' \
              --exclude='.gitignore' \
              -czf "dist/ai-cloudops-${{ steps.version.outputs.version }}-deploy.tar.gz" .
          
          # 显示创建的包信息
          echo "✅ Created packages:"
          ls -lh dist/
          
          echo "📊 Package sizes:"
          du -h dist/*

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog from recent commits..."
          # 获取最近5个commit作为changelog
          CHANGELOG=$(git log --oneline -5 --pretty=format:"- %s (%h)")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "AI-CloudOps ${{ steps.version.outputs.tag }}"
          body: |
            ## 📦 AI-CloudOps ${{ steps.version.outputs.tag }} - 源码发布
            
            ### 📋 最近更新
            ${{ steps.changelog.outputs.changelog }}
            
            ### 📥 可用下载
            
            **源码包（推荐下载）：**
            - `ai-cloudops-${{ steps.version.outputs.version }}-source.zip` - 完整源码包（ZIP格式，包含所有开发文件）
            - `ai-cloudops-${{ steps.version.outputs.version }}-source.tar.gz` - 完整源码包（TAR.GZ格式，Linux/macOS推荐）
            - `ai-cloudops-${{ steps.version.outputs.version }}-production.zip` - 生产环境源码包（去除开发文件，体积更小）
            - `ai-cloudops-${{ steps.version.outputs.version }}-deploy.tar.gz` - 轻量级部署包（仅核心运行文件）
            
            ### 🚀 快速开始
            
            **方式一：从源码构建**
            ```bash
            # 下载完整源码包
            wget https://github.com/GoSimplicity/AI-CloudOps/releases/download/${{ steps.version.outputs.tag }}/ai-cloudops-${{ steps.version.outputs.version }}-source.tar.gz
            
            # 解压并进入目录
            tar -xzf ai-cloudops-${{ steps.version.outputs.version }}-source.tar.gz
            cd AI-CloudOps-backend
            
            # 安装依赖并构建
            go mod download
            go build -ldflags="-s -w" -o ai-cloudops main.go
            
            # 启动服务
            ./ai-cloudops
            ```
            
            **方式二：Docker快速部署**
            ```bash
            # 解压源码后
            docker build -t ai-cloudops:${{ steps.version.outputs.version }} .
            docker-compose up -d
            ```
            
            **方式三：Kubernetes部署**
            ```bash
            # 使用提供的K8s配置
            kubectl apply -f deploy/kubernetes/
            ```
            
            ### 📋 系统要求
            - **Go**: 1.24.6 或更高版本
            - **Docker**: 20.10+ （可选）
            - **Kubernetes**: 1.20+ （生产环境）
            
            ### 🔧 配置文件
            - 开发环境：`config/config.development.yaml`
            - 生产环境：`config/config.production.yaml`
            
            ---
            
            **⏰ 发布时间**: $(date -u)  
            **🔗 提交**: ${{ github.sha }}  
            **📊 Go版本**: ${{ env.GO_VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/*.zip
            dist/*.tar.gz
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 