name: Simple CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.24.6'

permissions:
  contents: write
  pull-requests: read

jobs:
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...

      - name: Build
        run: go build -v main.go

      - name: Clean up
        run: rm -f main

  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Generate version tag
        id: version
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
          
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="v0.0.1"
          else
            VERSION_NUMBER=$(echo $LATEST_TAG | sed 's/^v//')
            MAJOR=$(echo $VERSION_NUMBER | cut -d. -f1)
            MINOR=$(echo $VERSION_NUMBER | cut -d. -f2)
            PATCH=$(echo $VERSION_NUMBER | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi
          
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"

      - name: Prepare release directory
        run: |
          mkdir -p dist

      - name: Create source packages
        run: |
          zip -r "dist/ai-cloudops-${{ steps.version.outputs.version }}-source.zip" . \
            -x ".git/*" "dist/*" "*.log" "node_modules/*" ".DS_Store" \
               "logs/*" "data/*" "tmp/*" ".env" "bin/*"
          
          tar --exclude='.git' --exclude='dist' --exclude='*.log' \
              --exclude='node_modules' --exclude='.DS_Store' \
              --exclude='logs' --exclude='data' --exclude='tmp' \
              --exclude='.env' --exclude='bin' \
              -czf "dist/ai-cloudops-${{ steps.version.outputs.version }}-source.tar.gz" .
          
          zip -r "dist/ai-cloudops-${{ steps.version.outputs.version }}-production.zip" . \
            -x ".git/*" "dist/*" "*.log" "node_modules/*" ".DS_Store" \
               "logs/*" "data/*" "tmp/*" ".env" "bin/*" \
               "*.md" "examples/*" "docs/*" "image/*" \
               ".github/*" "scripts/*" "mock/*" "tools/*" \
               "LICENSE" ".gitignore"

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(git log --oneline -5 --pretty=format:"- %s (%h)")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "AI-CloudOps ${{ steps.version.outputs.tag }}"
          body: |
            ## AI-CloudOps ${{ steps.version.outputs.tag }}
            
            ### Recent Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### Downloads
            - `ai-cloudops-${{ steps.version.outputs.version }}-source.zip` - Full source code (ZIP)
            - `ai-cloudops-${{ steps.version.outputs.version }}-source.tar.gz` - Full source code (TAR.GZ)
            - `ai-cloudops-${{ steps.version.outputs.version }}-production.zip` - Production ready package
            
            ### Quick Start
            ```bash
            wget https://github.com/GoSimplicity/AI-CloudOps/releases/download/${{ steps.version.outputs.tag }}/ai-cloudops-${{ steps.version.outputs.version }}-source.tar.gz
            tar -xzf ai-cloudops-${{ steps.version.outputs.version }}-source.tar.gz
            cd AI-CloudOps-backend
            go mod download
            go build -o ai-cloudops main.go
            ./ai-cloudops
            ```
            
            ### Requirements
            - Go 1.24.6+
            - Docker 20.10+ (optional)
            
            ---
            Build: ${{ github.sha }} | Go: ${{ env.GO_VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/*.zip
            dist/*.tar.gz
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 