services:
  cloudops-aiops:
    container_name: cloudops-aiops
    build:
      context: ./python
      dockerfile: Dockerfile
    ports:
      - "8080:8080"   # HTTP端口
      - "9000:9000"   # gRPC端口
    volumes:
      - ./python/logs:/app/logs
      - ./python/data:/app/data
      - ./deploy/kubernetes/config:/app/deploy/kubernetes/config
    env_file:
      - python/.env
    environment:
      - GRPC_PORT=9000
      - HTTP_PORT=8080
      - ENVIRONMENT=docker
    networks:
      - cloudops_net
    restart: always
    depends_on:
      redis:
        condition: service_started
    command: ["python", "/app/start_grpc_server.py"]

  cloudops-mcp:
    container_name: cloudops-mcp
    image: crpi-2pkkgf63kx4jzw5d.cn-hangzhou.personal.cr.aliyuncs.com/ai_cloudops/cloudops-mcp:v0.0.2
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    env_file:
      - .env
    networks:
      - cloudops_net
    restart: always
    command:
      - python
      - -m
      - app.mcp.main
      - --host
      - 0.0.0.0
      - --port
      - "9000"
    depends_on:
      cloudops-backend:
        condition: service_started
      cloudops-aiops:
        condition: service_started

  cloudops-backend:
    container_name: cloudops-backend
    image: crpi-2pkkgf63kx4jzw5d.cn-hangzhou.personal.cr.aliyuncs.com/ai_cloudops/cloudops-backend:v0.0.2
    ports:
      - "8889:8889"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    env_file:
      - .env
    environment:
      - GOPROXY=https://goproxy.cn,direct
      - TZ=Asia/Shanghai
    networks:
      - cloudops_net
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  cloudops-web:
    container_name: cloudops-web
    image: crpi-2pkkgf63kx4jzw5d.cn-hangzhou.personal.cr.aliyuncs.com/ai_cloudops/cloudops-web:v0.0.2
    expose:
      - "80"
    environment:
      - TZ=Asia/Shanghai
    networks:
      - cloudops_net
    restart: always
    depends_on:
      cloudops-backend:
        condition: service_started

  mysql:
    container_name: mysql
    image: mysql:8.0
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql/data:/var/lib/mysql:rw
      - ./deploy/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=cloudops
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_general_ci
      - TZ=Asia/Shanghai
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_general_ci
      - --explicit_defaults_for_timestamp=true
      - --lower_case_table_names=1
      - --max_connections=1000
    networks:
      - cloudops_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -proot || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # APISIX API Gateway
  apisix:
    container_name: apisix
    image: apache/apisix:3.8.0-debian
    restart: always
    volumes:
      - ./deploy/apisix/apisix.yaml:/usr/local/apisix/conf/apisix.yaml:ro
      - ./deploy/apisix/routes.yaml:/usr/local/apisix/conf/routes.yaml:ro
      - ./logs/apisix:/var/log/apisix
    ports:
      - "80:9080"     # HTTP 端口
      - "9091:9091"   # Prometheus 指标端口
      - "9443:9443"   # HTTPS 端口
    environment:
      - APISIX_STAND_ALONE=true
    networks:
      - cloudops_net
    depends_on:
      cloudops-web:
        condition: service_started
      cloudops-backend:
        condition: service_started
      cloudops-aiops:
        condition: service_started

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.28.1
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    environment:
      - TZ=Asia/Shanghai
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --storage.tsdb.retention.time=15d
    networks:
      - cloudops_net
    restart: always
    user: root

  redis:
    container_name: redis
    image: redis:6.2.5
    ports:
      - "36379:6379"
    volumes:
      - ./data/redis/data:/data:rw
    environment:
      - TZ=Asia/Shanghai
    command:
      - redis-server
      - --requirepass
      - v6SxhWHyZC7S
    networks:
      - cloudops_net
    restart: always

networks:
  cloudops_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
