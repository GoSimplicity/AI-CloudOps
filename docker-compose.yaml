services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: CloudOps
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_general_ci
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql/data:/var/lib/mysql:rw
      - ./deploy/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_general_ci
      - --explicit_defaults_for_timestamp=true
      - --lower_case_table_names=1
      - --max_connections=1000
    restart: always
    networks:
      - cloudops_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  redis:
    image: redis:6.2.5
    container_name: redis
    ports:
      - "36379:6379"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./data/redis/data:/data:rw
    command:
      - redis-server
      - --requirepass
      - v6SxhWHyZC7S
    restart: always
    networks:
      - cloudops_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  cloudops-backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: cloudops-backend:v0.0.1
    container_name: cloudops-backend
    environment:
      TZ: Asia/Shanghai
      GOPROXY: https://goproxy.cn,direct
    env_file:
      - .env
    ports:
      - "8889:8889"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    restart: always
    networks:
      - cloudops_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:8889/ && ping -c 5 mysql"
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  cloudops-aiops:
    image: cloudops-aiops:v0.0.1
    container_name: cloudops-aiops
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
    restart: always
    networks:
      - cloudops_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=15d'
    restart: always
    user: root
    ports:
      - "9090:9090"
    networks:
      - cloudops_net
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  cloudops-web:
    image: cloudops-web:v0.0.1
    container_name: cloudops-web
    environment:
      TZ: Asia/Shanghai
    expose:
      - "80" # 只在内部网络暴露
    restart: always
    networks:
      - cloudops_net
    depends_on:
      cloudops-backend:
        condition: service_healthy

  nginx:
    image: nginx:1.25
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - cloudops-web
      - cloudops-backend
      - cloudops-aiops
    networks:
      - cloudops_net
    restart: always

networks:
  cloudops_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/16