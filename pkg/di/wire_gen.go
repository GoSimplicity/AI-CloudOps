// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/GoSimplicity/AI-CloudOps/internal/cron"
	api6 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/client"
	dao2 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao"
	service3 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/service"
	api8 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/api"
	service4 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/service"
	api7 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache/alert_cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache/prom_cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache/record_cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache/rule_cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert/event"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert/onduty"
	pool2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert/pool"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert/record"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert/rule"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert/send"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/scrape/job"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/scrape/pool"
	event2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert/event"
	onduty2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert/onduty"
	pool3 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert/pool"
	record2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert/record"
	rule2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert/rule"
	send2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert/send"
	job2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/scrape/job"
	pool4 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/scrape/pool"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/yaml"
	api4 "github.com/GoSimplicity/AI-CloudOps/internal/system/api"
	api2 "github.com/GoSimplicity/AI-CloudOps/internal/system/dao/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/dao/casbin"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/dao/menu"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/dao/role"
	api3 "github.com/GoSimplicity/AI-CloudOps/internal/system/service/api"
	menu2 "github.com/GoSimplicity/AI-CloudOps/internal/system/service/menu"
	role2 "github.com/GoSimplicity/AI-CloudOps/internal/system/service/role"
	api5 "github.com/GoSimplicity/AI-CloudOps/internal/tree/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/dao/ali_resource"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/dao/ecs"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/dao/elb"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/dao/rds"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/dao/tree_node"
	service2 "github.com/GoSimplicity/AI-CloudOps/internal/tree/service"
	"github.com/GoSimplicity/AI-CloudOps/internal/user/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/user/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/user/service"
	"github.com/GoSimplicity/AI-CloudOps/pkg/utils/jwt"
)

import (
	_ "github.com/google/wire"
)

// Injectors from wire.go:

func InitWebServer() *Cmd {
	cmdable := InitRedis()
	handler := jwt.NewJWTHandler(cmdable)
	logger := InitLogger()
	v := InitMiddlewares(handler, logger)
	db := InitDB()
	userDAO := dao.NewUserDAO(db, logger)
	userService := service.NewUserService(userDAO)
	userHandler := api.NewUserHandler(userService, logger, handler)
	apiDAO := api2.NewApiDAO(db, logger)
	roleDAO := role.NewRoleDAO(db, logger)
	apiService := api3.NewApiService(apiDAO, roleDAO, logger, userDAO)
	menuDAO := menu.NewMenuDAO(db, logger)
	roleService := role2.NewRoleService(menuDAO, roleDAO, logger)
	menuService := menu2.NewMenuService(menuDAO, logger, userDAO)
	enforcer := InitCasbin(db, logger)
	casbinDAO := casbin.NewCasbinDAO(enforcer, logger)
	authHandler := api4.NewAuthHandler(apiService, roleService, menuService, handler, logger, casbinDAO, userDAO)
	treeEcsDAO := ecs.NewTreeEcsDAO(db, logger)
	treeElbDAO := elb.NewTreeElbDAO(db, logger)
	treeRdsDAO := rds.NewTreeRdsDAO(db, logger)
	treeNodeDAO := tree_node.NewTreeNodeDAO(db, logger)
	treeService := service2.NewTreeService(treeEcsDAO, treeElbDAO, treeRdsDAO, treeNodeDAO, logger, userDAO)
	aliResourceDAO := ali_resource.NewAliResourceDAO(db, logger)
	aliResourceService := service2.NewAliResourceService(logger, aliResourceDAO)
	treeHandler := api5.NewTreeHandler(treeService, logger, aliResourceService)
	k8sDAO := dao2.NewK8sDAO(db, logger)
	k8sClient := client.NewK8sClient(logger, k8sDAO)
	k8sService := service3.NewK8sService(k8sDAO, k8sClient, logger)
	k8sHandler := api6.NewK8sHandler(k8sService, logger)
	alertManagerEventDAO := event.NewAlertManagerEventDAO(db, logger, userDAO)
	scrapePoolDAO := pool.NewScrapePoolDAO(db, logger, userDAO)
	scrapeJobDAO := job.NewScrapeJobDAO(db, logger, userDAO)
	promConfigCache := prom_cache.NewPromConfigCache(logger, scrapePoolDAO, scrapeJobDAO)
	alertManagerPoolDAO := pool2.NewAlertManagerPoolDAO(db, logger, userDAO)
	alertManagerSendDAO := send.NewAlertManagerSendDAO(db, logger, userDAO)
	alertConfigCache := alert_cache.NewAlertConfigCache(logger, alertManagerPoolDAO, alertManagerSendDAO)
	alertManagerRuleDAO := rule.NewAlertManagerRuleDAO(db, logger, userDAO)
	ruleConfigCache := rule_cache.NewRuleConfigCache(logger, scrapePoolDAO, alertManagerRuleDAO)
	alertManagerRecordDAO := record.NewAlertManagerRecordDAO(db, logger, userDAO)
	recordConfigCache := record_cache.NewRecordConfig(logger, scrapePoolDAO, alertManagerRecordDAO)
	monitorCache := cache.NewMonitorCache(promConfigCache, alertConfigCache, ruleConfigCache, recordConfigCache, logger)
	alertManagerEventService := event2.NewAlertManagerEventService(alertManagerEventDAO, monitorCache, logger, userDAO)
	alertManagerOnDutyDAO := onduty.NewAlertManagerOnDutyDAO(db, logger, userDAO)
	alertManagerOnDutyService := onduty2.NewAlertManagerOnDutyService(alertManagerOnDutyDAO, alertManagerSendDAO, monitorCache, logger, userDAO)
	alertManagerPoolService := pool3.NewAlertManagerPoolService(alertManagerPoolDAO, alertManagerSendDAO, monitorCache, logger, userDAO)
	alertManagerRecordService := record2.NewAlertManagerRecordService(alertManagerRecordDAO, monitorCache, logger, userDAO)
	alertManagerRuleService := rule2.NewAlertManagerRuleService(alertManagerRuleDAO, monitorCache, logger, userDAO)
	alertManagerSendService := send2.NewAlertManagerSendService(alertManagerSendDAO, alertManagerRuleDAO, monitorCache, logger, userDAO)
	scrapeJobService := job2.NewPrometheusScrapeService(scrapeJobDAO, monitorCache, logger, userDAO)
	scrapePoolService := pool4.NewPrometheusPoolService(scrapePoolDAO, monitorCache, logger, userDAO)
	configYamlService := yaml.NewPrometheusConfigService(promConfigCache, alertConfigCache, ruleConfigCache, recordConfigCache)
	prometheusHandler := api7.NewPrometheusHandler(logger, alertManagerEventService, alertManagerOnDutyService, alertManagerPoolService, alertManagerRecordService, alertManagerRuleService, alertManagerSendService, scrapeJobService, scrapePoolService, configYamlService)
	notAuthService := service4.NewNotAuthService(logger, treeNodeDAO)
	notAuthHandler := api8.NewNotAuthHandler(notAuthService)
	engine := InitGinServer(v, userHandler, authHandler, treeHandler, k8sHandler, prometheusHandler, notAuthHandler)
	cronManager := cron.NewCronManager(logger, alertManagerOnDutyDAO)
	cronCron := InitAndRefreshK8sClient(k8sClient, logger, monitorCache, cronManager)
	cmd := &Cmd{
		Server: engine,
		Cron:   cronCron,
	}
	return cmd
}
