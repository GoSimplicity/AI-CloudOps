// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	api7 "github.com/GoSimplicity/AI-CloudOps/internal/ai/api"
	service5 "github.com/GoSimplicity/AI-CloudOps/internal/ai/service"
	"github.com/GoSimplicity/AI-CloudOps/internal/cron"
	"github.com/GoSimplicity/AI-CloudOps/internal/job"
	api4 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/client"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao/admin"
	user2 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao/user"
	admin2 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/service/admin"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/service/user"
	api3 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/api"
	service3 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/service"
	api5 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/scrape"
	alert2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert"
	scrape2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/scrape"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/yaml"
	api2 "github.com/GoSimplicity/AI-CloudOps/internal/system/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/service"
	api8 "github.com/GoSimplicity/AI-CloudOps/internal/tree/api"
	dao4 "github.com/GoSimplicity/AI-CloudOps/internal/tree/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/provider"
	service6 "github.com/GoSimplicity/AI-CloudOps/internal/tree/service"
	"github.com/GoSimplicity/AI-CloudOps/internal/user/api"
	dao2 "github.com/GoSimplicity/AI-CloudOps/internal/user/dao"
	service2 "github.com/GoSimplicity/AI-CloudOps/internal/user/service"
	api6 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/api"
	dao3 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/dao"
	service4 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/service"
	"github.com/GoSimplicity/AI-CloudOps/pkg/utils"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/hibiken/asynq"
)

import (
	_ "github.com/google/wire"
)

// Injectors from wire.go:

func ProvideCmd() *Cmd {
	cmdable := InitRedis()
	handler := utils.NewJWTHandler(cmdable)
	logger := InitLogger()
	db := InitDB()
	roleDAO := dao.NewRoleDAO(db)
	roleService := service.NewRoleService(roleDAO, logger)
	auditDAO := dao.NewAuditDAO(db)
	auditService := service.NewAuditService(auditDAO, logger)
	v := InitMiddlewares(handler, logger, roleService, auditService)
	userDAO := dao2.NewUserDAO(db, logger)
	userService := service2.NewUserService(userDAO, roleService, logger)
	userHandler := api.NewUserHandler(userService, logger, handler)
	enforcer := InitCasbin(db)
	apiDAO := dao.NewApiDAO(db, enforcer, logger)
	apiService := service.NewApiService(logger, apiDAO)
	apiHandler := api2.NewApiHandler(apiService)
	roleHandler := api2.NewRoleHandler(roleService)
	notAuthService := service3.NewNotAuthService(logger)
	notAuthHandler := api3.NewNotAuthHandler(notAuthService)
	clusterDAO := admin.NewClusterDAO(db, logger)
	k8sClient := client.NewK8sClient(logger, clusterDAO)
	asynqClient := InitAsynqClient()
	clusterService := admin2.NewClusterService(clusterDAO, k8sClient, logger, asynqClient)
	k8sClusterHandler := api4.NewK8sClusterHandler(logger, clusterService)
	configMapService := admin2.NewConfigMapService(clusterDAO, k8sClient, logger)
	k8sConfigMapHandler := api4.NewK8sConfigMapHandler(logger, configMapService)
	deploymentService := admin2.NewDeploymentService(clusterDAO, k8sClient, logger)
	k8sDeploymentHandler := api4.NewK8sDeploymentHandler(logger, deploymentService)
	namespaceService := admin2.NewNamespaceService(clusterDAO, k8sClient, logger)
	k8sNamespaceHandler := api4.NewK8sNamespaceHandler(logger, namespaceService)
	nodeService := admin2.NewNodeService(clusterDAO, k8sClient, logger)
	k8sNodeHandler := api4.NewK8sNodeHandler(logger, nodeService)
	podService := admin2.NewPodService(clusterDAO, k8sClient, logger)
	k8sPodHandler := api4.NewK8sPodHandler(logger, podService)
	svcService := admin2.NewSvcService(clusterDAO, k8sClient, logger)
	k8sSvcHandler := api4.NewK8sSvcHandler(logger, svcService)
	taintService := admin2.NewTaintService(clusterDAO, k8sClient, logger)
	k8sTaintHandler := api4.NewK8sTaintHandler(logger, taintService)
	yamlTaskDAO := admin.NewYamlTaskDAO(db, logger)
	yamlTemplateDAO := admin.NewYamlTemplateDAO(db, logger)
	yamlTaskService := admin2.NewYamlTaskService(yamlTaskDAO, clusterDAO, yamlTemplateDAO, k8sClient, logger)
	k8sYamlTaskHandler := api4.NewK8sYamlTaskHandler(logger, yamlTaskService)
	yamlTemplateService := admin2.NewYamlTemplateService(yamlTemplateDAO, yamlTaskDAO, k8sClient, logger)
	k8sYamlTemplateHandler := api4.NewK8sYamlTemplateHandler(logger, yamlTemplateService)
	instanceService := user.NewInstanceService(clusterDAO, k8sClient, logger)
	appDAO := user2.NewAppDAO(db, logger)
	appService := user.NewAppService(clusterDAO, appDAO, k8sClient, logger)
	projectDAO := user2.NewProjectDAO(db, logger)
	projectService := user.NewProjectService(clusterDAO, projectDAO, appDAO, k8sClient, logger)
	cornJobDAO := user2.NewCornJobDAO(db, logger)
	cronjobService := user.NewCronjobService(clusterDAO, cornJobDAO, k8sClient, logger)
	k8sAppHandler := api4.NewK8sAppHandler(logger, instanceService, appService, projectService, cronjobService)
	alertManagerEventDAO := alert.NewAlertManagerEventDAO(db, logger, userDAO)
	scrapePoolDAO := scrape.NewScrapePoolDAO(db, logger, userDAO)
	scrapeJobDAO := scrape.NewScrapeJobDAO(db, logger, userDAO)
	promConfigCache := cache.NewPromConfigCache(logger, scrapePoolDAO, scrapeJobDAO)
	alertManagerPoolDAO := alert.NewAlertManagerPoolDAO(db, logger, userDAO)
	alertManagerSendDAO := alert.NewAlertManagerSendDAO(db, logger, userDAO)
	alertConfigCache := cache.NewAlertConfigCache(logger, alertManagerPoolDAO, alertManagerSendDAO)
	alertManagerRuleDAO := alert.NewAlertManagerRuleDAO(db, logger, userDAO)
	ruleConfigCache := cache.NewRuleConfigCache(logger, scrapePoolDAO, alertManagerRuleDAO)
	alertManagerRecordDAO := alert.NewAlertManagerRecordDAO(db, logger, userDAO)
	recordConfigCache := cache.NewRecordConfig(logger, scrapePoolDAO, alertManagerRecordDAO)
	monitorCache := cache.NewMonitorCache(promConfigCache, alertConfigCache, ruleConfigCache, recordConfigCache, logger)
	alertManagerEventService := alert2.NewAlertManagerEventService(alertManagerEventDAO, monitorCache, logger, userDAO, alertManagerSendDAO)
	alertEventHandler := api5.NewAlertEventHandler(logger, alertManagerEventService)
	alertManagerPoolService := alert2.NewAlertManagerPoolService(alertManagerPoolDAO, alertManagerSendDAO, monitorCache, logger, userDAO)
	alertPoolHandler := api5.NewAlertPoolHandler(logger, alertManagerPoolService)
	alertManagerRuleService := alert2.NewAlertManagerRuleService(alertManagerRuleDAO, monitorCache, logger, userDAO)
	alertRuleHandler := api5.NewAlertRuleHandler(logger, alertManagerRuleService)
	configYamlService := yaml.NewPrometheusConfigService(promConfigCache, alertConfigCache, ruleConfigCache, recordConfigCache)
	configYamlHandler := api5.NewConfigYamlHandler(logger, configYamlService)
	alertManagerOnDutyDAO := alert.NewAlertManagerOnDutyDAO(db, logger, userDAO)
	alertManagerOnDutyService := alert2.NewAlertManagerOnDutyService(alertManagerOnDutyDAO, alertManagerSendDAO, monitorCache, logger, userDAO)
	onDutyGroupHandler := api5.NewOnDutyGroupHandler(logger, alertManagerOnDutyService)
	alertManagerRecordService := alert2.NewAlertManagerRecordService(alertManagerRecordDAO, scrapePoolDAO, monitorCache, logger, userDAO)
	recordRuleHandler := api5.NewRecordRuleHandler(logger, alertManagerRecordService)
	scrapePoolService := scrape2.NewPrometheusPoolService(scrapePoolDAO, monitorCache, logger, userDAO, scrapeJobDAO)
	scrapePoolHandler := api5.NewScrapePoolHandler(logger, scrapePoolService)
	scrapeJobService := scrape2.NewPrometheusScrapeService(scrapeJobDAO, monitorCache, logger, userDAO)
	scrapeJobHandler := api5.NewScrapeJobHandler(logger, scrapeJobService)
	alertManagerSendService := alert2.NewAlertManagerSendService(alertManagerSendDAO, alertManagerRuleDAO, monitorCache, logger, userDAO)
	sendGroupHandler := api5.NewSendGroupHandler(logger, alertManagerSendService)
	auditHandler := api2.NewAuditHandler(auditService, logger)
	formDesignDAO := dao3.NewFormDesignDAO(db, logger)
	formDesignService := service4.NewFormDesignService(formDesignDAO, userDAO, logger)
	formDesignHandler := api6.NewFormDesignHandler(formDesignService)
	processDAO := dao3.NewProcessDAO(db, logger)
	processService := service4.NewProcessService(processDAO, formDesignDAO, userDAO, logger)
	processHandler := api6.NewProcessHandler(processService)
	templateDAO := dao3.NewTemplateDAO(db, logger)
	categoryDAO := dao3.NewCategoryDAO(db, logger)
	instanceDAO := dao3.NewInstanceDAO(db, logger)
	templateService := service4.NewTemplateService(templateDAO, userDAO, processDAO, categoryDAO, instanceDAO, logger)
	templateHandler := api6.NewTemplateHandler(templateService)
	instanceFlowDAO := dao3.NewInstanceFlowDAO(db, logger)
	serviceInstanceService := service4.NewInstanceService(instanceDAO, processDAO, instanceFlowDAO, userDAO, logger)
	instanceFlowService := service4.NewInstanceFlowService(instanceFlowDAO, processDAO, instanceDAO, userDAO, logger)
	instanceCommentDAO := dao3.NewInstanceCommentDAO(db, logger)
	instanceCommentService := service4.NewInstanceCommentService(instanceCommentDAO, instanceDAO, logger)
	instanceAttachmentDAO := dao3.NewInstanceAttachmentDAO(db, logger)
	instanceAttachmentService := service4.NewInstanceAttachmentService(instanceAttachmentDAO, instanceDAO, logger)
	instanceHandler := api6.NewInstanceHandler(serviceInstanceService, instanceFlowService, instanceCommentService, instanceAttachmentService)
	statisticsDAO := dao3.NewStatisticsDAO(db, logger)
	statisticsService := service4.NewStatisticsService(statisticsDAO, userDAO, logger)
	statisticsHandler := api6.NewStatisticsHandler(statisticsService)
	categoryGroupService := service4.NewCategoryGroupService(categoryDAO, userDAO, logger)
	categoryGroupHandler := api6.NewCategoryGroupHandler(categoryGroupService)
	agent := InitAgent()
	aiService := service5.NewAIService(logger, agent)
	aiHandler := api7.NewAIHandler(aiService)
	resourceDAO := dao4.NewResourceDAO(db)
	aliyunProviderImpl := provider.NewAliyunProvider(logger, resourceDAO)
	tencentProviderImpl := provider.NewTencentProvider()
	huaweiProviderImpl := provider.NewHuaweiProvider()
	awsProviderImpl := provider.NewAWSProvider()
	azureProviderImpl := provider.NewAzureProvider()
	gcpProviderImpl := provider.NewGCPProvider()
	providerFactory := provider.NewProviderFactory(aliyunProviderImpl, tencentProviderImpl, huaweiProviderImpl, awsProviderImpl, azureProviderImpl, gcpProviderImpl)
	resourceService := service6.NewResourceService(logger, resourceDAO, providerFactory)
	ecsDAO := dao4.NewEcsDAO(db)
	ecsService := service6.NewEcsService(logger, ecsDAO, providerFactory)
	vpcDAO := dao4.NewVpcDAO(logger, db)
	vpcService := service6.NewVpcService(logger, vpcDAO, providerFactory)
	elbDAO := dao4.NewElbDAO(db)
	elbService := service6.NewElbService(logger, elbDAO)
	rdsDAO := dao4.NewRdsDAO(db)
	rdsService := service6.NewRdsService(logger, rdsDAO)
	cloudDAO := dao4.NewCloudDAO(db)
	cloudService := service6.NewCloudService(logger, cloudDAO)
	securityGroupService := service6.NewSecurityGroupService(providerFactory, logger)
	resourceHandler := api8.NewResourceHandler(resourceService, ecsService, vpcService, elbService, rdsService, cloudService, securityGroupService)
	treeDAO := dao4.NewTreeDAO(logger, db)
	treeService := service6.NewTreeService(logger, treeDAO, userDAO)
	treeHandler := api8.NewTreeHandler(treeService)
	engine := InitGinServer(v, userHandler, apiHandler, roleHandler, notAuthHandler, k8sClusterHandler, k8sConfigMapHandler, k8sDeploymentHandler, k8sNamespaceHandler, k8sNodeHandler, k8sPodHandler, k8sSvcHandler, k8sTaintHandler, k8sYamlTaskHandler, k8sYamlTemplateHandler, k8sAppHandler, alertEventHandler, alertPoolHandler, alertRuleHandler, configYamlHandler, onDutyGroupHandler, recordRuleHandler, scrapePoolHandler, scrapeJobHandler, sendGroupHandler, auditHandler, formDesignHandler, processHandler, templateHandler, instanceHandler, statisticsHandler, categoryGroupHandler, aiHandler, resourceHandler, treeHandler)
	createK8sClusterTask := job.NewCreateK8sClusterTask(logger, k8sClient, clusterDAO)
	updateK8sClusterTask := job.NewUpdateK8sClusterTask(logger, k8sClient, clusterDAO)
	cronManager := cron.NewCronManager(logger, alertManagerOnDutyDAO, clusterDAO, k8sClient)
	timedTask := job.NewTimedTask(logger, k8sClient, monitorCache, cronManager)
	routes := job.NewRoutes(createK8sClusterTask, updateK8sClusterTask, timedTask)
	server := InitAsynqServer()
	scheduler := InitScheduler()
	timedScheduler := job.NewTimedScheduler(scheduler)
	cmd := &Cmd{
		Server:    engine,
		Routes:    routes,
		Asynq:     server,
		Scheduler: timedScheduler,
	}
	return cmd
}

// wire.go:

type Cmd struct {
	Server    *gin.Engine
	Routes    *job.Routes
	Asynq     *asynq.Server
	Scheduler *job.TimedScheduler
}

var HandlerSet = wire.NewSet(api2.NewRoleHandler, api2.NewApiHandler, api2.NewAuditHandler, api.NewUserHandler, api3.NewNotAuthHandler, api4.NewK8sPodHandler, api4.NewK8sAppHandler, api4.NewK8sNodeHandler, api4.NewK8sConfigMapHandler, api4.NewK8sClusterHandler, api4.NewK8sDeploymentHandler, api4.NewK8sNamespaceHandler, api4.NewK8sSvcHandler, api4.NewK8sTaintHandler, api4.NewK8sYamlTaskHandler, api4.NewK8sYamlTemplateHandler, api7.NewAIHandler, api5.NewAlertPoolHandler, api5.NewConfigYamlHandler, api5.NewOnDutyGroupHandler, api5.NewRecordRuleHandler, api5.NewAlertRuleHandler, api5.NewSendGroupHandler, api5.NewScrapeJobHandler, api5.NewScrapePoolHandler, api5.NewAlertEventHandler, api6.NewFormDesignHandler, api6.NewInstanceHandler, api6.NewTemplateHandler, api6.NewProcessHandler, api6.NewStatisticsHandler, api6.NewCategoryGroupHandler, api8.NewResourceHandler, api8.NewTreeHandler)

var ServiceSet = wire.NewSet(admin2.NewClusterService, admin2.NewConfigMapService, admin2.NewDeploymentService, admin2.NewNamespaceService, admin2.NewPodService, admin2.NewSvcService, admin2.NewNodeService, admin2.NewTaintService, admin2.NewYamlTaskService, admin2.NewYamlTemplateService, user.NewAppService, user.NewInstanceService, user.NewCronjobService, user.NewProjectService, service2.NewUserService, service.NewApiService, service.NewRoleService, service.NewAuditService, service5.NewAIService, alert2.NewAlertManagerEventService, alert2.NewAlertManagerOnDutyService, alert2.NewAlertManagerPoolService, alert2.NewAlertManagerRecordService, alert2.NewAlertManagerRuleService, alert2.NewAlertManagerSendService, scrape2.NewPrometheusScrapeService, scrape2.NewPrometheusPoolService, yaml.NewPrometheusConfigService, service3.NewNotAuthService, service4.NewFormDesignService, service4.NewInstanceService, service4.NewTemplateService, service4.NewProcessService, service4.NewStatisticsService, service4.NewCategoryGroupService, service4.NewInstanceFlowService, service4.NewInstanceCommentService, service4.NewInstanceAttachmentService, service6.NewTreeService, service6.NewCloudService, service6.NewEcsService, service6.NewVpcService, service6.NewElbService, service6.NewRdsService, service6.NewResourceService, service6.NewSecurityGroupService)

var DaoSet = wire.NewSet(alert.NewAlertManagerEventDAO, alert.NewAlertManagerOnDutyDAO, alert.NewAlertManagerPoolDAO, alert.NewAlertManagerRecordDAO, alert.NewAlertManagerRuleDAO, alert.NewAlertManagerSendDAO, scrape.NewScrapeJobDAO, scrape.NewScrapePoolDAO, dao2.NewUserDAO, dao.NewRoleDAO, dao.NewApiDAO, dao.NewAuditDAO, admin.NewClusterDAO, admin.NewYamlTemplateDAO, admin.NewYamlTaskDAO, user2.NewAppDAO, user2.NewProjectDAO, user2.NewCornJobDAO, dao3.NewFormDesignDAO, dao3.NewTemplateDAO, dao3.NewInstanceDAO, dao3.NewProcessDAO, dao3.NewStatisticsDAO, dao3.NewCategoryDAO, dao3.NewInstanceCommentDAO, dao3.NewInstanceAttachmentDAO, dao3.NewInstanceFlowDAO, dao4.NewTreeDAO, dao4.NewCloudDAO, dao4.NewEcsDAO, dao4.NewVpcDAO, dao4.NewElbDAO, dao4.NewRdsDAO, dao4.NewResourceDAO)

var UtilSet = wire.NewSet(utils.NewJWTHandler)

var JobSet = wire.NewSet(job.NewTimedScheduler, job.NewTimedTask, job.NewCreateK8sClusterTask, job.NewUpdateK8sClusterTask, job.NewRoutes)

var ProviderSet = wire.NewSet(provider.NewAliyunProvider, provider.NewTencentProvider, provider.NewHuaweiProvider, provider.NewAWSProvider, provider.NewAzureProvider, provider.NewGCPProvider, provider.NewProviderFactory)

var CronSet = wire.NewSet(cron.NewCronManager)

var Injector = wire.NewSet(
	InitMiddlewares,
	InitGinServer,
	InitLogger,
	InitRedis,
	InitDB,
	InitCasbin,
	InitAsynqClient,
	InitAsynqServer,
	InitScheduler,
	InitAgent, wire.Struct(new(Cmd), "*"),
)

var CacheSet = wire.NewSet(cache.NewMonitorCache, cache.NewAlertConfigCache, cache.NewRuleConfigCache, cache.NewRecordConfig, cache.NewPromConfigCache)

var ClientSet = wire.NewSet(client.NewK8sClient)
