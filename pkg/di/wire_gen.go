// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/GoSimplicity/AI-CloudOps/internal/cron"
	api4 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/client"
	dao3 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao"
	user2 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao/user"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/manager"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/service/admin"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/service/user"
	api3 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/api"
	service3 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/service"
	api5 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/config"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/scrape"
	alert2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert"
	config2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/config"
	scrape2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/scrape"
	"github.com/GoSimplicity/AI-CloudOps/internal/startup"
	api2 "github.com/GoSimplicity/AI-CloudOps/internal/system/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/service"
	api7 "github.com/GoSimplicity/AI-CloudOps/internal/tree/api"
	dao5 "github.com/GoSimplicity/AI-CloudOps/internal/tree/dao"
	service5 "github.com/GoSimplicity/AI-CloudOps/internal/tree/service"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/ssh"
	"github.com/GoSimplicity/AI-CloudOps/internal/user/api"
	dao2 "github.com/GoSimplicity/AI-CloudOps/internal/user/dao"
	service2 "github.com/GoSimplicity/AI-CloudOps/internal/user/service"
	api6 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/api"
	dao4 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/dao"
	service4 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/service"
	"github.com/GoSimplicity/AI-CloudOps/pkg/utils"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

import (
	_ "github.com/google/wire"
)

// Injectors from wire.go:

func ProvideCmd() *Cmd {
	cmdable := InitRedis()
	handler := utils.NewJWTHandler(cmdable)
	logger := InitLogger()
	db := InitDB()
	roleDAO := dao.NewRoleDAO(db)
	roleService := service.NewRoleService(roleDAO, logger)
	auditDAO := dao.NewAuditDAO(db)
	auditService := service.NewAuditService(auditDAO, logger)
	v := InitMiddlewares(handler, logger, roleService, auditService)
	userDAO := dao2.NewUserDAO(db, logger)
	userService := service2.NewUserService(userDAO, roleService, logger)
	userHandler := api.NewUserHandler(userService, handler)
	apiDAO := dao.NewApiDAO(db, logger)
	apiService := service.NewApiService(logger, apiDAO)
	apiHandler := api2.NewApiHandler(apiService)
	roleHandler := api2.NewRoleHandler(roleService)
	notAuthService := service3.NewNotAuthService(logger)
	notAuthHandler := api3.NewNotAuthHandler(notAuthService)
	clusterDAO := dao3.NewClusterDAO(db, logger)
	k8sClient := client.NewK8sClient(logger, clusterDAO)
	clusterManager := manager.NewClusterManager(logger, k8sClient, clusterDAO)
	clusterService := admin.NewClusterService(clusterDAO, k8sClient, clusterManager, logger)
	k8sClusterHandler := api4.NewK8sClusterHandler(logger, clusterService)
	configMapService := admin.NewConfigMapService(clusterDAO, k8sClient, logger)
	k8sConfigMapHandler := api4.NewK8sConfigMapHandler(logger, configMapService)
	deploymentService := admin.NewDeploymentService(clusterDAO, k8sClient, logger)
	k8sDeploymentHandler := api4.NewK8sDeploymentHandler(logger, deploymentService)
	namespaceService := admin.NewNamespaceService(clusterDAO, k8sClient, logger)
	k8sNamespaceHandler := api4.NewK8sNamespaceHandler(logger, namespaceService)
	nodeService := admin.NewNodeService(clusterDAO, k8sClient, logger)
	k8sNodeHandler := api4.NewK8sNodeHandler(logger, nodeService)
	podService := admin.NewPodService(clusterDAO, k8sClient, logger)
	k8sPodHandler := api4.NewK8sPodHandler(logger, podService)
	svcService := admin.NewSvcService(clusterDAO, k8sClient, logger)
	k8sSvcHandler := api4.NewK8sSvcHandler(logger, svcService)
	taintService := admin.NewTaintService(clusterDAO, k8sClient, logger)
	k8sTaintHandler := api4.NewK8sTaintHandler(logger, taintService)
	yamlTaskDAO := dao3.NewYamlTaskDAO(db, logger)
	yamlTemplateDAO := dao3.NewYamlTemplateDAO(db, logger)
	yamlTaskService := admin.NewYamlTaskService(yamlTaskDAO, clusterDAO, yamlTemplateDAO, k8sClient, logger)
	k8sYamlTaskHandler := api4.NewK8sYamlTaskHandler(logger, yamlTaskService)
	yamlTemplateService := admin.NewYamlTemplateService(yamlTemplateDAO, yamlTaskDAO, k8sClient, logger)
	k8sYamlTemplateHandler := api4.NewK8sYamlTemplateHandler(logger, yamlTemplateService)
	alertManagerEventDAO := alert.NewAlertManagerEventDAO(db, logger, userDAO)
	scrapePoolDAO := scrape.NewScrapePoolDAO(db, logger, userDAO)
	scrapeJobDAO := scrape.NewScrapeJobDAO(db, logger)
	monitorConfigDAO := config.NewMonitorConfigDAO(logger, db)
	batchConfigManager := cache.NewBatchConfigManager(monitorConfigDAO, logger)
	prometheusConfigCache := cache.NewPrometheusConfigCache(logger, scrapePoolDAO, scrapeJobDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerPoolDAO := alert.NewAlertManagerPoolDAO(db, logger)
	alertManagerSendDAO := alert.NewAlertManagerSendDAO(db, logger)
	alertManagerConfigCache := cache.NewAlertManagerConfigCache(logger, alertManagerPoolDAO, alertManagerSendDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerRuleDAO := alert.NewAlertManagerRuleDAO(db, logger, userDAO)
	alertRuleConfigCache := cache.NewAlertRuleConfigCache(logger, scrapePoolDAO, alertManagerRuleDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerRecordDAO := alert.NewAlertManagerRecordDAO(db, logger, userDAO)
	recordRuleConfigCache := cache.NewRecordRuleConfigCache(logger, scrapePoolDAO, alertManagerRecordDAO, monitorConfigDAO, batchConfigManager, cmdable)
	monitorCache := cache.NewMonitorCache(prometheusConfigCache, alertManagerConfigCache, alertRuleConfigCache, recordRuleConfigCache, logger)
	alertManagerEventService := alert2.NewAlertManagerEventService(alertManagerEventDAO, monitorCache, logger, userDAO, alertManagerSendDAO)
	alertEventHandler := api5.NewAlertEventHandler(alertManagerEventService)
	alertManagerPoolService := alert2.NewAlertManagerPoolService(alertManagerPoolDAO, alertManagerSendDAO, logger, monitorCache)
	alertPoolHandler := api5.NewAlertPoolHandler(alertManagerPoolService)
	alertManagerRuleService := alert2.NewAlertManagerRuleService(logger, alertManagerRuleDAO, alertManagerPoolDAO, alertManagerSendDAO, monitorCache)
	alertRuleHandler := api5.NewAlertRuleHandler(alertManagerRuleService)
	monitorConfigService := config2.NewMonitorConfigService(logger, monitorConfigDAO)
	monitorConfigHandler := api5.NewMonitorConfigHandler(monitorConfigService)
	alertManagerOnDutyDAO := alert.NewAlertManagerOnDutyDAO(db, logger, userDAO)
	alertManagerOnDutyService := alert2.NewAlertManagerOnDutyService(alertManagerOnDutyDAO, alertManagerSendDAO, monitorCache, logger, userDAO)
	onDutyGroupHandler := api5.NewOnDutyGroupHandler(alertManagerOnDutyService)
	alertManagerRecordService := alert2.NewAlertManagerRecordService(alertManagerRecordDAO, scrapePoolDAO, logger, monitorCache)
	recordRuleHandler := api5.NewRecordRuleHandler(alertManagerRecordService)
	scrapePoolService := scrape2.NewPrometheusPoolService(scrapePoolDAO, monitorCache, logger, userDAO, scrapeJobDAO)
	scrapePoolHandler := api5.NewScrapePoolHandler(logger, scrapePoolService)
	scrapeJobService := scrape2.NewPrometheusScrapeService(scrapeJobDAO, monitorCache, logger, userDAO)
	scrapeJobHandler := api5.NewScrapeJobHandler(scrapeJobService)
	alertManagerSendService := alert2.NewAlertManagerSendService(alertManagerSendDAO, alertManagerRuleDAO, logger, userDAO, monitorCache)
	sendGroupHandler := api5.NewSendGroupHandler(alertManagerSendService)
	auditHandler := api2.NewAuditHandler(auditService, logger)
	workorderFormDesignDAO := dao4.NewWorkorderFormDesignDAO(db, logger)
	workorderCategoryDAO := dao4.NewWorkorderCategoryDAO(db, logger)
	formDesignService := service4.NewFormDesignService(workorderFormDesignDAO, workorderCategoryDAO, logger)
	formDesignHandler := api6.NewFormDesignHandler(formDesignService)
	workorderProcessDAO := dao4.NewProcessDAO(db, logger)
	workorderInstanceDAO := dao4.NewWorkorderInstanceDAO(db, logger)
	workorderProcessService := service4.NewWorkorderProcessService(workorderProcessDAO, workorderFormDesignDAO, workorderCategoryDAO, workorderInstanceDAO, logger)
	workorderProcessHandler := api6.NewWorkorderProcessHandler(workorderProcessService)
	workorderTemplateDAO := dao4.NewTemplateDAO(db, logger)
	workorderTemplateService := service4.NewWorkorderTemplateService(workorderTemplateDAO, workorderProcessDAO, workorderCategoryDAO, workorderInstanceDAO, logger)
	templateHandler := api6.NewTemplateHandler(workorderTemplateService)
	workorderInstanceFlowDAO := dao4.NewInstanceFlowDAO(db, logger)
	workorderInstanceTimelineDAO := dao4.NewInstanceTimeLineDAO(db, logger)
	workorderInstanceCommentDAO := dao4.NewWorkorderInstanceCommentDAO(db, logger)
	instanceService := service4.NewInstanceService(workorderInstanceDAO, workorderInstanceFlowDAO, workorderInstanceTimelineDAO, workorderInstanceCommentDAO, workorderProcessDAO, logger)
	instanceHandler := api6.NewInstanceHandler(instanceService)
	instanceFlowService := service4.NewInstanceFlowService(workorderInstanceFlowDAO, logger)
	instanceFlowHandler := api6.NewInstanceFlowHandler(instanceFlowService)
	instanceCommentService := service4.NewInstanceCommentService(workorderInstanceCommentDAO, workorderInstanceDAO, logger)
	instanceCommentHandler := api6.NewInstanceCommentHandler(instanceCommentService)
	categoryGroupService := service4.NewCategoryGroupService(workorderCategoryDAO, userDAO, logger)
	categoryGroupHandler := api6.NewCategoryGroupHandler(categoryGroupService)
	workorderInstanceTimeLineService := service4.NewWorkorderInstanceTimeLineService(logger, workorderInstanceTimelineDAO)
	instanceTimeLineHandler := api6.NewInstanceTimeLineHandler(workorderInstanceTimeLineService)
	treeNodeDAO := dao5.NewTreeNodeDAO(logger, db)
	treeNodeService := service5.NewTreeNodeService(logger, treeNodeDAO, userDAO)
	treeNodeHandler := api7.NewTreeNodeHandler(treeNodeService)
	treeLocalDAO := dao5.NewTreeLocalDAO(db, logger)
	treeLocalService := service5.NewTreeLocalService(logger, treeLocalDAO)
	ecsSSH := ssh.NewSSH(logger)
	treeLocalHandler := api7.NewTreeLocalHandler(treeLocalService, ecsSSH)
	workorderNotificationDAO := dao4.NewNotificationDAO(db, logger)
	workorderNotificationService := service4.NewWorkorderNotificationService(workorderNotificationDAO, logger)
	notificationHandler := api6.NewNotificationHandler(workorderNotificationService)
	engine := InitGinServer(v, userHandler, apiHandler, roleHandler, notAuthHandler, k8sClusterHandler, k8sConfigMapHandler, k8sDeploymentHandler, k8sNamespaceHandler, k8sNodeHandler, k8sPodHandler, k8sSvcHandler, k8sTaintHandler, k8sYamlTaskHandler, k8sYamlTemplateHandler, alertEventHandler, alertPoolHandler, alertRuleHandler, monitorConfigHandler, onDutyGroupHandler, recordRuleHandler, scrapePoolHandler, scrapeJobHandler, sendGroupHandler, auditHandler, formDesignHandler, workorderProcessHandler, templateHandler, instanceHandler, instanceFlowHandler, instanceCommentHandler, categoryGroupHandler, instanceTimeLineHandler, treeNodeHandler, treeLocalHandler, notificationHandler)
	applicationBootstrap := startup.NewApplicationBootstrap(clusterManager, logger)
	cronManager := cron.NewCronManager(logger, alertManagerOnDutyDAO, clusterDAO, k8sClient, clusterManager, monitorCache)
	cmd := &Cmd{
		Server:    engine,
		Bootstrap: applicationBootstrap,
		Cron:      cronManager,
	}
	return cmd
}

// wire.go:

type Cmd struct {
	Server    *gin.Engine
	Bootstrap startup.ApplicationBootstrap
	Cron      cron.CronManager
}

var HandlerSet = wire.NewSet(api2.NewRoleHandler, api2.NewApiHandler, api2.NewAuditHandler, api.NewUserHandler, api3.NewNotAuthHandler, api4.NewK8sPodHandler, api4.NewK8sNodeHandler, api4.NewK8sConfigMapHandler, api4.NewK8sClusterHandler, api4.NewK8sDeploymentHandler, api4.NewK8sNamespaceHandler, api4.NewK8sSvcHandler, api4.NewK8sTaintHandler, api4.NewK8sYamlTaskHandler, api4.NewK8sYamlTemplateHandler, api5.NewAlertPoolHandler, api5.NewMonitorConfigHandler, api5.NewOnDutyGroupHandler, api5.NewRecordRuleHandler, api5.NewAlertRuleHandler, api5.NewSendGroupHandler, api5.NewScrapeJobHandler, api5.NewScrapePoolHandler, api5.NewAlertEventHandler, api6.NewFormDesignHandler, api6.NewInstanceHandler, api6.NewInstanceFlowHandler, api6.NewInstanceCommentHandler, api6.NewInstanceTimeLineHandler, api6.NewTemplateHandler, api6.NewWorkorderProcessHandler, api6.NewCategoryGroupHandler, api6.NewNotificationHandler, api7.NewTreeNodeHandler, api7.NewTreeLocalHandler)

var ServiceSet = wire.NewSet(admin.NewClusterService, admin.NewConfigMapService, admin.NewDeploymentService, admin.NewNamespaceService, admin.NewPodService, admin.NewSvcService, admin.NewNodeService, admin.NewTaintService, admin.NewYamlTaskService, admin.NewYamlTemplateService, user.NewInstanceService, user.NewCronjobService, user.NewProjectService, service2.NewUserService, service.NewApiService, service.NewRoleService, service.NewAuditService, alert2.NewAlertManagerEventService, alert2.NewAlertManagerOnDutyService, alert2.NewAlertManagerPoolService, alert2.NewAlertManagerRecordService, alert2.NewAlertManagerRuleService, alert2.NewAlertManagerSendService, scrape2.NewPrometheusScrapeService, scrape2.NewPrometheusPoolService, config2.NewMonitorConfigService, service3.NewNotAuthService, service4.NewFormDesignService, service4.NewInstanceService, service4.NewInstanceFlowService, service4.NewInstanceCommentService, service4.NewWorkorderInstanceTimeLineService, service4.NewWorkorderTemplateService, service4.NewWorkorderProcessService, service4.NewCategoryGroupService, service4.NewWorkorderNotificationService, service5.NewTreeNodeService, service5.NewTreeLocalService)

var DaoSet = wire.NewSet(alert.NewAlertManagerEventDAO, alert.NewAlertManagerOnDutyDAO, alert.NewAlertManagerPoolDAO, alert.NewAlertManagerRecordDAO, alert.NewAlertManagerRuleDAO, alert.NewAlertManagerSendDAO, scrape.NewScrapeJobDAO, scrape.NewScrapePoolDAO, config.NewMonitorConfigDAO, dao2.NewUserDAO, dao.NewRoleDAO, dao.NewApiDAO, dao.NewAuditDAO, dao3.NewClusterDAO, dao3.NewYamlTemplateDAO, dao3.NewYamlTaskDAO, user2.NewProjectDAO, user2.NewCornJobDAO, dao4.NewWorkorderFormDesignDAO, dao4.NewTemplateDAO, dao4.NewWorkorderInstanceDAO, dao4.NewProcessDAO, dao4.NewWorkorderCategoryDAO, dao4.NewWorkorderInstanceCommentDAO, dao4.NewInstanceFlowDAO, dao4.NewInstanceTimeLineDAO, dao4.NewNotificationDAO, dao5.NewTreeNodeDAO, dao5.NewTreeLocalDAO)

var SSHSet = wire.NewSet(ssh.NewSSH)

var UtilSet = wire.NewSet(utils.NewJWTHandler)

var JobSet = wire.NewSet(manager.NewClusterManager, startup.NewApplicationBootstrap)

var CronSet = wire.NewSet(cron.NewCronManager)

var Injector = wire.NewSet(
	InitMiddlewares,
	InitGinServer,
	InitLogger,
	InitRedis,
	InitDB,
	CronSet, wire.Struct(new(Cmd), "*"),
)

var CacheSet = wire.NewSet(cache.NewMonitorCache, cache.NewAlertManagerConfigCache, cache.NewAlertRuleConfigCache, cache.NewRecordRuleConfigCache, cache.NewPrometheusConfigCache, cache.NewBatchConfigManager)

var ClientSet = wire.NewSet(client.NewK8sClient)
