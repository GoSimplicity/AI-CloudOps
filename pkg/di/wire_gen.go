// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/GoSimplicity/AI-CloudOps/internal/aiops/api"
	service2 "github.com/GoSimplicity/AI-CloudOps/internal/aiops/service"
	"github.com/GoSimplicity/AI-CloudOps/internal/cron"
	api9 "github.com/GoSimplicity/AI-CloudOps/internal/cron/api"
	dao6 "github.com/GoSimplicity/AI-CloudOps/internal/cron/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/cron/handler"
	"github.com/GoSimplicity/AI-CloudOps/internal/cron/scheduler"
	service8 "github.com/GoSimplicity/AI-CloudOps/internal/cron/service"
	api5 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/client"
	dao3 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/manager"
	service5 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/service"
	api4 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/api"
	service4 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/service"
	api6 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/config"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/scrape"
	alert2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert"
	config2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/config"
	scrape2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/scrape"
	"github.com/GoSimplicity/AI-CloudOps/internal/startup"
	api3 "github.com/GoSimplicity/AI-CloudOps/internal/system/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/service"
	api8 "github.com/GoSimplicity/AI-CloudOps/internal/tree/api"
	dao5 "github.com/GoSimplicity/AI-CloudOps/internal/tree/dao"
	service7 "github.com/GoSimplicity/AI-CloudOps/internal/tree/service"
	api2 "github.com/GoSimplicity/AI-CloudOps/internal/user/api"
	dao2 "github.com/GoSimplicity/AI-CloudOps/internal/user/dao"
	service3 "github.com/GoSimplicity/AI-CloudOps/internal/user/service"
	api7 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/api"
	dao4 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/dao"
	service6 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/service"
	"github.com/GoSimplicity/AI-CloudOps/pkg/grpc_client"
	"github.com/GoSimplicity/AI-CloudOps/pkg/sse"
	"github.com/GoSimplicity/AI-CloudOps/pkg/ssh"
	"github.com/GoSimplicity/AI-CloudOps/pkg/utils"
	"github.com/GoSimplicity/AI-CloudOps/pkg/utils/terminal"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/hibiken/asynq"
)

import (
	_ "github.com/google/wire"
)

// Injectors from wire.go:

func ProvideCmd() *Cmd {
	cmdable := InitRedis()
	utilsHandler := utils.NewJWTHandler(cmdable)
	logger := InitLogger()
	db := InitDB()
	roleDAO := dao.NewRoleDAO(db)
	roleService := service.NewRoleService(roleDAO, logger)
	auditDAO := dao.NewAuditDAO(db)
	auditService := service.NewAuditService(auditDAO, logger)
	v := InitMiddlewares(utilsHandler, logger, roleService, auditService)
	clientManager := InitGrpcManager(logger)
	aiOpsService := service2.NewAIOpsService(clientManager, logger)
	aiOpsHandler := api.NewAIOpsHandler(aiOpsService, logger)
	userDAO := dao2.NewUserDAO(db, logger)
	userService := service3.NewUserService(userDAO, roleService, logger)
	userHandler := api2.NewUserHandler(userService, utilsHandler)
	apiDAO := dao.NewApiDAO(db, logger)
	apiService := service.NewApiService(logger, apiDAO)
	apiHandler := api3.NewApiHandler(apiService)
	roleHandler := api3.NewRoleHandler(roleService)
	systemService := service.NewSystemService(logger, cmdable)
	systemHandler := api3.NewSystemHandler(systemService)
	notAuthService := service4.NewNotAuthService(logger)
	notAuthHandler := api4.NewNotAuthHandler(notAuthService)
	clusterDAO := dao3.NewClusterDAO(db, logger)
	k8sClient := client.NewK8sClient(logger, clusterDAO)
	clusterManager := manager.NewClusterManager(logger, k8sClient, clusterDAO)
	clusterService := service5.NewClusterService(clusterDAO, k8sClient, clusterManager, logger)
	k8sClusterHandler := api5.NewK8sClusterHandler(clusterService)
	deploymentManager := manager.NewDeploymentManager(k8sClient, logger)
	deploymentService := service5.NewDeploymentService(deploymentManager, logger)
	k8sDeploymentHandler := api5.NewK8sDeploymentHandler(deploymentService)
	namespaceManager := manager.NewNamespaceManager(k8sClient, logger)
	namespaceService := service5.NewNamespaceService(k8sClient, namespaceManager, logger)
	k8sNamespaceHandler := api5.NewK8sNamespaceHandler(namespaceService)
	nodeManager := manager.NewNodeManager(k8sClient, logger)
	nodeService := service5.NewNodeService(clusterDAO, k8sClient, nodeManager, logger)
	taintManager := manager.NewTaintManager(k8sClient, clusterDAO, logger)
	taintService := service5.NewTaintService(taintManager, logger)
	k8sNodeHandler := api5.NewK8sNodeHandler(nodeService, taintService)
	serviceManager := manager.NewServiceManager(k8sClient, logger)
	svcService := service5.NewSvcService(serviceManager, k8sClient, logger)
	k8sSvcHandler := api5.NewK8sSvcHandler(svcService)
	yamlTemplateDAO := dao3.NewYamlTemplateDAO(db, logger)
	yamlTaskDAO := dao3.NewYamlTaskDAO(db, logger)
	yamlManager := manager.NewYamlManager(yamlTemplateDAO, yamlTaskDAO, clusterDAO, k8sClient, logger)
	yamlTaskService := service5.NewYamlTaskService(yamlManager, logger)
	k8sYamlTaskHandler := api5.NewK8sYamlTaskHandler(yamlTaskService)
	yamlTemplateService := service5.NewYamlTemplateService(yamlManager, logger)
	k8sYamlTemplateHandler := api5.NewK8sYamlTemplateHandler(yamlTemplateService)
	daemonSetManager := manager.NewDaemonSetManager(k8sClient, logger)
	daemonSetService := service5.NewDaemonSetService(daemonSetManager, logger)
	k8sDaemonSetHandler := api5.NewK8sDaemonSetHandler(daemonSetService)
	eventManager := manager.NewEventManager(k8sClient, logger)
	eventService := service5.NewEventService(eventManager, logger)
	k8sEventHandler := api5.NewK8sEventHandler(eventService)
	statefulSetManager := manager.NewStatefulSetManager(k8sClient, logger)
	statefulSetService := service5.NewStatefulSetService(statefulSetManager, logger)
	k8sStatefulSetHandler := api5.NewK8sStatefulSetHandler(statefulSetService)
	serviceAccountManager := manager.NewServiceAccountManager(logger, k8sClient)
	serviceAccountService := service5.NewServiceAccountService(serviceAccountManager, logger)
	k8sServiceAccountHandler := api5.NewK8sServiceAccountHandler(serviceAccountService)
	roleManager := manager.NewRoleManager(k8sClient, logger)
	serviceRoleService := service5.NewRoleService(roleManager, logger)
	k8sRoleHandler := api5.NewK8sRoleHandler(serviceRoleService)
	clusterRoleManager := manager.NewClusterRoleManager(k8sClient, logger)
	clusterRoleService := service5.NewClusterRoleService(clusterRoleManager, logger)
	k8sClusterRoleHandler := api5.NewK8sClusterRoleHandler(clusterRoleService)
	roleBindingManager := manager.NewRoleBindingManager(k8sClient, logger)
	roleBindingService := service5.NewRoleBindingService(roleBindingManager, logger)
	k8sRoleBindingHandler := api5.NewK8sRoleBindingHandler(roleBindingService)
	clusterRoleBindingManager := manager.NewClusterRoleBindingManager(k8sClient, logger)
	clusterRoleBindingService := service5.NewClusterRoleBindingService(clusterRoleBindingManager, logger)
	k8sClusterRoleBindingHandler := api5.NewK8sClusterRoleBindingHandler(clusterRoleBindingService)
	configMapManager := manager.NewConfigMapManager(k8sClient, logger)
	configMapService := service5.NewConfigMapService(k8sClient, configMapManager, logger)
	k8sConfigMapHandler := api5.NewK8sConfigMapHandler(configMapService)
	secretManager := manager.NewSecretManager(k8sClient, logger)
	secretService := service5.NewSecretService(secretManager, logger)
	k8sSecretHandler := api5.NewK8sSecretHandler(secretService)
	alertManagerEventDAO := alert.NewAlertManagerEventDAO(db, logger, userDAO)
	scrapePoolDAO := scrape.NewScrapePoolDAO(db, logger, userDAO)
	scrapeJobDAO := scrape.NewScrapeJobDAO(db, logger)
	monitorConfigDAO := config.NewMonitorConfigDAO(logger, db)
	batchConfigManager := cache.NewBatchConfigManager(monitorConfigDAO, logger)
	prometheusConfigCache := cache.NewPrometheusConfigCache(logger, scrapePoolDAO, scrapeJobDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerPoolDAO := alert.NewAlertManagerPoolDAO(db, logger)
	alertManagerSendDAO := alert.NewAlertManagerSendDAO(db, logger)
	alertManagerConfigCache := cache.NewAlertManagerConfigCache(logger, alertManagerPoolDAO, alertManagerSendDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerRuleDAO := alert.NewAlertManagerRuleDAO(db, logger, userDAO)
	alertRuleConfigCache := cache.NewAlertRuleConfigCache(logger, scrapePoolDAO, alertManagerRuleDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerRecordDAO := alert.NewAlertManagerRecordDAO(db, logger, userDAO)
	recordRuleConfigCache := cache.NewRecordRuleConfigCache(logger, scrapePoolDAO, alertManagerRecordDAO, monitorConfigDAO, batchConfigManager, cmdable)
	monitorCache := cache.NewMonitorCache(prometheusConfigCache, alertManagerConfigCache, alertRuleConfigCache, recordRuleConfigCache, logger)
	alertManagerEventService := alert2.NewAlertManagerEventService(alertManagerEventDAO, monitorCache, logger, userDAO, alertManagerSendDAO)
	alertEventHandler := api6.NewAlertEventHandler(alertManagerEventService)
	alertManagerPoolService := alert2.NewAlertManagerPoolService(alertManagerPoolDAO, alertManagerSendDAO, logger, monitorCache)
	alertPoolHandler := api6.NewAlertPoolHandler(alertManagerPoolService)
	alertManagerRuleService := alert2.NewAlertManagerRuleService(logger, alertManagerRuleDAO, alertManagerPoolDAO, alertManagerSendDAO, monitorCache)
	alertRuleHandler := api6.NewAlertRuleHandler(alertManagerRuleService)
	monitorConfigService := config2.NewMonitorConfigService(logger, monitorConfigDAO)
	monitorConfigHandler := api6.NewMonitorConfigHandler(monitorConfigService)
	alertManagerOnDutyDAO := alert.NewAlertManagerOnDutyDAO(db, logger, userDAO)
	alertManagerOnDutyService := alert2.NewAlertManagerOnDutyService(alertManagerOnDutyDAO, alertManagerSendDAO, monitorCache, logger, userDAO)
	onDutyGroupHandler := api6.NewOnDutyGroupHandler(alertManagerOnDutyService)
	alertManagerRecordService := alert2.NewAlertManagerRecordService(alertManagerRecordDAO, scrapePoolDAO, logger, monitorCache)
	recordRuleHandler := api6.NewRecordRuleHandler(alertManagerRecordService)
	scrapePoolService := scrape2.NewPrometheusPoolService(scrapePoolDAO, monitorCache, logger, userDAO, scrapeJobDAO)
	scrapePoolHandler := api6.NewScrapePoolHandler(logger, scrapePoolService)
	scrapeJobService := scrape2.NewPrometheusScrapeService(scrapeJobDAO, monitorCache, logger, userDAO)
	scrapeJobHandler := api6.NewScrapeJobHandler(scrapeJobService)
	alertManagerSendService := alert2.NewAlertManagerSendService(alertManagerSendDAO, alertManagerRuleDAO, logger, userDAO, monitorCache)
	sendGroupHandler := api6.NewSendGroupHandler(alertManagerSendService)
	auditHandler := api3.NewAuditHandler(auditService, logger)
	workorderFormDesignDAO := dao4.NewWorkorderFormDesignDAO(db, logger)
	workorderCategoryDAO := dao4.NewWorkorderCategoryDAO(db, logger)
	formDesignService := service6.NewFormDesignService(workorderFormDesignDAO, workorderCategoryDAO, logger)
	formDesignHandler := api7.NewFormDesignHandler(formDesignService)
	workorderProcessDAO := dao4.NewProcessDAO(db, logger)
	workorderInstanceDAO := dao4.NewWorkorderInstanceDAO(db, logger)
	workorderProcessService := service6.NewWorkorderProcessService(workorderProcessDAO, workorderFormDesignDAO, workorderCategoryDAO, workorderInstanceDAO, logger)
	workorderProcessHandler := api7.NewWorkorderProcessHandler(workorderProcessService)
	workorderTemplateDAO := dao4.NewTemplateDAO(db, logger)
	workorderTemplateService := service6.NewWorkorderTemplateService(workorderTemplateDAO, workorderProcessDAO, workorderCategoryDAO, workorderInstanceDAO, logger)
	templateHandler := api7.NewTemplateHandler(workorderTemplateService)
	workorderInstanceFlowDAO := dao4.NewInstanceFlowDAO(db, logger)
	workorderInstanceTimelineDAO := dao4.NewInstanceTimeLineDAO(db, logger)
	workorderInstanceCommentDAO := dao4.NewWorkorderInstanceCommentDAO(db, logger)
	workorderNotificationDAO := dao4.NewNotificationDAO(db, logger)
	notificationConfig := InitNotificationConfig()
	asynqClient := InitAsynqClient()
	notificationManager := InitNotificationManager(notificationConfig, asynqClient, logger)
	workorderNotificationService := service6.NewWorkorderNotificationService(workorderNotificationDAO, notificationManager, logger, workorderInstanceDAO, userDAO)
	instanceService := service6.NewInstanceService(workorderInstanceDAO, workorderInstanceFlowDAO, workorderInstanceTimelineDAO, workorderInstanceCommentDAO, workorderProcessDAO, workorderFormDesignDAO, workorderTemplateDAO, workorderNotificationService, logger)
	instanceHandler := api7.NewInstanceHandler(instanceService)
	instanceFlowService := service6.NewInstanceFlowService(workorderInstanceFlowDAO, logger)
	instanceFlowHandler := api7.NewInstanceFlowHandler(instanceFlowService)
	instanceCommentService := service6.NewInstanceCommentService(workorderInstanceCommentDAO, workorderInstanceDAO, workorderNotificationService, logger)
	instanceCommentHandler := api7.NewInstanceCommentHandler(instanceCommentService)
	categoryGroupService := service6.NewCategoryGroupService(workorderCategoryDAO, userDAO, logger)
	categoryGroupHandler := api7.NewCategoryGroupHandler(categoryGroupService)
	workorderInstanceTimeLineService := service6.NewWorkorderInstanceTimeLineService(logger, workorderInstanceTimelineDAO)
	instanceTimeLineHandler := api7.NewInstanceTimeLineHandler(workorderInstanceTimeLineService)
	treeNodeDAO := dao5.NewTreeNodeDAO(logger, db)
	treeNodeService := service7.NewTreeNodeService(logger, treeNodeDAO, userDAO)
	treeNodeHandler := api8.NewTreeNodeHandler(treeNodeService)
	treeLocalDAO := dao5.NewTreeLocalDAO(db, logger)
	treeLocalService := service7.NewTreeLocalService(logger, treeLocalDAO)
	sshClient := ssh.NewClient(logger)
	treeLocalHandler := api8.NewTreeLocalHandler(treeLocalService, sshClient)
	notificationHandler := api7.NewNotificationHandler(workorderNotificationService)
	ingressManager := manager.NewIngressManager(k8sClient, logger)
	ingressService := service5.NewIngressService(ingressManager, logger)
	k8sIngressHandler := api5.NewK8sIngressHandler(ingressService)
	podManager := manager.NewPodManager(k8sClient, logger)
	sseHandler := sse.NewHandler(logger)
	podService := service5.NewPodService(podManager, sseHandler, logger)
	k8sPodHandler := api5.NewK8sPodHandler(podService)
	pvManager := manager.NewPVManager(logger, k8sClient)
	pvService := service5.NewPVService(clusterDAO, k8sClient, pvManager, logger)
	k8sPVHandler := api5.NewK8sPVHandler(pvService)
	pvcManager := manager.NewPVCManager(logger, k8sClient)
	pvcService := service5.NewPVCService(clusterDAO, k8sClient, pvcManager, logger)
	k8sPVCHandler := api5.NewK8sPVCHandler(pvcService)
	cronJobDAO := dao6.NewCronJobDAO(logger, db)
	asynqScheduler := InitScheduler()
	cronScheduler := scheduler.NewCronScheduler(logger, cronJobDAO, asynqScheduler, asynqClient)
	cronService := service8.NewCronService(logger, cronJobDAO, userDAO, asynqClient, cronScheduler)
	cronJobHandler := api9.NewCronJobHandler(logger, cronService)
	engine := InitGinServer(v, aiOpsHandler, userHandler, apiHandler, roleHandler, systemHandler, notAuthHandler, k8sClusterHandler, k8sDeploymentHandler, k8sNamespaceHandler, k8sNodeHandler, k8sSvcHandler, k8sYamlTaskHandler, k8sYamlTemplateHandler, k8sDaemonSetHandler, k8sEventHandler, k8sStatefulSetHandler, k8sServiceAccountHandler, k8sRoleHandler, k8sClusterRoleHandler, k8sRoleBindingHandler, k8sClusterRoleBindingHandler, k8sConfigMapHandler, k8sSecretHandler, alertEventHandler, alertPoolHandler, alertRuleHandler, monitorConfigHandler, onDutyGroupHandler, recordRuleHandler, scrapePoolHandler, scrapeJobHandler, sendGroupHandler, auditHandler, formDesignHandler, workorderProcessHandler, templateHandler, instanceHandler, instanceFlowHandler, instanceCommentHandler, categoryGroupHandler, instanceTimeLineHandler, treeNodeHandler, treeLocalHandler, notificationHandler, k8sIngressHandler, k8sPodHandler, k8sPVHandler, k8sPVCHandler, cronJobHandler)
	applicationBootstrap := startup.NewApplicationBootstrap(clusterManager, logger)
	builtinTaskManager := cron.NewBuiltinTaskManager(logger, cronJobDAO)
	cronManager := cron.NewUnifiedCronManager(logger, alertManagerOnDutyDAO, clusterDAO, k8sClient, clusterManager, monitorCache, cronScheduler, builtinTaskManager)
	server := InitAsynqServer()
	cronHandlers := handler.NewCronHandlers(logger, cronJobDAO, treeLocalDAO, alertManagerOnDutyDAO, clusterDAO, k8sClient, clusterManager, monitorCache)
	cmd := &Cmd{
		Server:       engine,
		Bootstrap:    applicationBootstrap,
		CronManager:  cronManager,
		AsynqServer:  server,
		AsynqClient:  asynqClient,
		Scheduler:    asynqScheduler,
		CronHandlers: cronHandlers,
		GrpcManager:  clientManager,
	}
	return cmd
}

// wire.go:

type Cmd struct {
	Server       *gin.Engine
	Bootstrap    startup.ApplicationBootstrap
	CronManager  cron.CronManager
	AsynqServer  *asynq.Server
	AsynqClient  *asynq.Client
	Scheduler    *asynq.Scheduler
	CronHandlers *handler.CronHandlers
	GrpcManager  *grpc_client.ClientManager
}

var HandlerSet = wire.NewSet(api.NewAIOpsHandler, api3.NewRoleHandler, api3.NewApiHandler, api3.NewAuditHandler, api3.NewSystemHandler, api3.NewInternalHandler, api2.NewUserHandler, api4.NewNotAuthHandler, api5.NewK8sNodeHandler, api5.NewK8sClusterHandler, api5.NewK8sDeploymentHandler, api5.NewK8sNamespaceHandler, api5.NewK8sSvcHandler, api5.NewK8sYamlTaskHandler, api5.NewK8sYamlTemplateHandler, api5.NewK8sDaemonSetHandler, api5.NewK8sEventHandler, api5.NewK8sStatefulSetHandler, api5.NewK8sServiceAccountHandler, api5.NewK8sRoleHandler, api5.NewK8sClusterRoleHandler, api5.NewK8sRoleBindingHandler, api5.NewK8sClusterRoleBindingHandler, api5.NewK8sRBACHandler, api5.NewK8sIngressHandler, api5.NewK8sPodHandler, api5.NewK8sConfigMapHandler, api5.NewK8sSecretHandler, api5.NewK8sPVHandler, api5.NewK8sPVCHandler, api6.NewAlertPoolHandler, api6.NewMonitorConfigHandler, api6.NewOnDutyGroupHandler, api6.NewRecordRuleHandler, api6.NewAlertRuleHandler, api6.NewSendGroupHandler, api6.NewScrapeJobHandler, api6.NewScrapePoolHandler, api6.NewAlertEventHandler, api7.NewFormDesignHandler, api7.NewInstanceHandler, api7.NewInstanceFlowHandler, api7.NewInstanceCommentHandler, api7.NewInstanceTimeLineHandler, api7.NewTemplateHandler, api7.NewWorkorderProcessHandler, api7.NewCategoryGroupHandler, api7.NewNotificationHandler, api8.NewTreeNodeHandler, api8.NewTreeLocalHandler, terminal.NewTerminalHandler, api9.NewCronJobHandler)

var ServiceSet = wire.NewSet(service2.NewAIOpsService, service5.NewClusterService, service5.NewDeploymentService, service5.NewNamespaceService, service5.NewSvcService, service5.NewNodeService, service5.NewTaintService, service5.NewYamlTaskService, service5.NewYamlTemplateService, service5.NewDaemonSetService, service5.NewEventService, service5.NewStatefulSetService, service5.NewServiceAccountService, service5.NewRoleService, service5.NewClusterRoleService, service5.NewRoleBindingService, service5.NewClusterRoleBindingService, service5.NewRBACService, service5.NewIngressService, service5.NewPodService, service5.NewConfigMapService, service5.NewSecretService, service5.NewPVService, service5.NewPVCService, service3.NewUserService, service.NewApiService, service.NewRoleService, service.NewAuditService, service.NewSystemService, alert2.NewAlertManagerEventService, alert2.NewAlertManagerOnDutyService, alert2.NewAlertManagerPoolService, alert2.NewAlertManagerRecordService, alert2.NewAlertManagerRuleService, alert2.NewAlertManagerSendService, scrape2.NewPrometheusScrapeService, scrape2.NewPrometheusPoolService, config2.NewMonitorConfigService, service4.NewNotAuthService, service6.NewFormDesignService, service6.NewInstanceService, service6.NewInstanceFlowService, service6.NewInstanceCommentService, service6.NewWorkorderInstanceTimeLineService, service6.NewWorkorderTemplateService, service6.NewWorkorderProcessService, service6.NewCategoryGroupService, service6.NewWorkorderNotificationService, service7.NewTreeNodeService, service7.NewTreeLocalService, service8.NewCronService)

var DaoSet = wire.NewSet(alert.NewAlertManagerEventDAO, alert.NewAlertManagerOnDutyDAO, alert.NewAlertManagerPoolDAO, alert.NewAlertManagerRecordDAO, alert.NewAlertManagerRuleDAO, alert.NewAlertManagerSendDAO, scrape.NewScrapeJobDAO, scrape.NewScrapePoolDAO, config.NewMonitorConfigDAO, dao2.NewUserDAO, dao.NewRoleDAO, dao.NewApiDAO, dao.NewAuditDAO, dao3.NewClusterDAO, dao3.NewYamlTaskDAO, dao3.NewYamlTemplateDAO, dao4.NewWorkorderFormDesignDAO, dao4.NewTemplateDAO, dao4.NewWorkorderInstanceDAO, dao4.NewProcessDAO, dao4.NewWorkorderCategoryDAO, dao4.NewWorkorderInstanceCommentDAO, dao4.NewInstanceFlowDAO, dao4.NewInstanceTimeLineDAO, dao4.NewNotificationDAO, dao5.NewTreeNodeDAO, dao5.NewTreeLocalDAO, dao6.NewCronJobDAO)

var SSHSet = wire.NewSet(ssh.NewClient)

var UtilSet = wire.NewSet(utils.NewJWTHandler, sse.NewHandler)

var ManagerSet = wire.NewSet(manager.NewClusterManager, manager.NewDeploymentManager, manager.NewNamespaceManager, manager.NewServiceManager, manager.NewNodeManager, manager.NewEventManager, manager.NewStatefulSetManager, manager.NewDaemonSetManager, manager.NewServiceAccountManager, manager.NewTaintManager, manager.NewYamlManager, manager.NewConfigMapManager, manager.NewSecretManager, manager.NewPVManager, manager.NewPVCManager, manager.NewClusterRoleManager, manager.NewClusterRoleBindingManager, manager.NewRoleManager, manager.NewRoleBindingManager, manager.NewIngressManager, manager.NewPodManager)

var JobSet = wire.NewSet(startup.NewApplicationBootstrap)

var CronSet = wire.NewSet(cron.NewUnifiedCronManager, cron.NewBuiltinTaskManager, handler.NewCronHandlers, scheduler.NewCronScheduler)

var Injector = wire.NewSet(
	InitMiddlewares,
	InitGinServer,
	InitLogger,
	InitRedis,
	InitDB,
	CronSet, wire.Struct(new(Cmd), "*"),
)

var CacheSet = wire.NewSet(cache.NewMonitorCache, cache.NewAlertManagerConfigCache, cache.NewAlertRuleConfigCache, cache.NewRecordRuleConfigCache, cache.NewPrometheusConfigCache, cache.NewBatchConfigManager)

var ClientSet = wire.NewSet(client.NewK8sClient)

var AsynqSet = wire.NewSet(
	InitAsynqClient,
	InitAsynqServer,
	InitScheduler,
)

var NotificationSet = wire.NewSet(
	InitNotificationConfig,
	InitNotificationManager,
)

var GrpcSet = wire.NewSet(
	InitGrpcManager,
)
