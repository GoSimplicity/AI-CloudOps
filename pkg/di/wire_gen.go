// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/GoSimplicity/AI-CloudOps/internal/cron"
	api4 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/client"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao/admin"
	user2 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao/user"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/manager"
	admin2 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/service/admin"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/service/user"
	api3 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/api"
	service3 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/service"
	api5 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/config"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/scrape"
	alert2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert"
	config2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/config"
	scrape2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/scrape"
	"github.com/GoSimplicity/AI-CloudOps/internal/startup"
	api2 "github.com/GoSimplicity/AI-CloudOps/internal/system/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/service"
	api7 "github.com/GoSimplicity/AI-CloudOps/internal/tree/api"
	dao4 "github.com/GoSimplicity/AI-CloudOps/internal/tree/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/provider"
	service5 "github.com/GoSimplicity/AI-CloudOps/internal/tree/service"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/ssh"
	"github.com/GoSimplicity/AI-CloudOps/internal/user/api"
	dao2 "github.com/GoSimplicity/AI-CloudOps/internal/user/dao"
	service2 "github.com/GoSimplicity/AI-CloudOps/internal/user/service"
	api6 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/api"
	dao3 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/dao"
	service4 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/service"
	"github.com/GoSimplicity/AI-CloudOps/pkg/utils"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

import (
	_ "github.com/google/wire"
)

// Injectors from wire.go:

func ProvideCmd() *Cmd {
	cmdable := InitRedis()
	handler := utils.NewJWTHandler(cmdable)
	logger := InitLogger()
	db := InitDB()
	roleDAO := dao.NewRoleDAO(db)
	roleService := service.NewRoleService(roleDAO, logger)
	auditDAO := dao.NewAuditDAO(db)
	auditService := service.NewAuditService(auditDAO, logger)
	v := InitMiddlewares(handler, logger, roleService, auditService)
	userDAO := dao2.NewUserDAO(db, logger)
	userService := service2.NewUserService(userDAO, roleService, logger)
	userHandler := api.NewUserHandler(userService, handler)
	apiDAO := dao.NewApiDAO(db, logger)
	apiService := service.NewApiService(logger, apiDAO)
	apiHandler := api2.NewApiHandler(apiService)
	roleHandler := api2.NewRoleHandler(roleService)
	notAuthService := service3.NewNotAuthService(logger)
	notAuthHandler := api3.NewNotAuthHandler(notAuthService)
	clusterDAO := admin.NewClusterDAO(db, logger)
	k8sClient := client.NewK8sClient(logger, clusterDAO)
	clusterManager := manager.NewClusterManager(logger, k8sClient, clusterDAO)
	clusterService := admin2.NewClusterService(clusterDAO, k8sClient, clusterManager, logger)
	k8sClusterHandler := api4.NewK8sClusterHandler(logger, clusterService)
	configMapService := admin2.NewConfigMapService(clusterDAO, k8sClient, logger)
	k8sConfigMapHandler := api4.NewK8sConfigMapHandler(logger, configMapService)
	deploymentService := admin2.NewDeploymentService(clusterDAO, k8sClient, logger)
	k8sDeploymentHandler := api4.NewK8sDeploymentHandler(logger, deploymentService)
	namespaceService := admin2.NewNamespaceService(clusterDAO, k8sClient, logger)
	k8sNamespaceHandler := api4.NewK8sNamespaceHandler(logger, namespaceService)
	nodeService := admin2.NewNodeService(clusterDAO, k8sClient, logger)
	k8sNodeHandler := api4.NewK8sNodeHandler(logger, nodeService)
	podService := admin2.NewPodService(clusterDAO, k8sClient, logger)
	k8sPodHandler := api4.NewK8sPodHandler(logger, podService)
	svcService := admin2.NewSvcService(clusterDAO, k8sClient, logger)
	k8sSvcHandler := api4.NewK8sSvcHandler(logger, svcService)
	taintService := admin2.NewTaintService(clusterDAO, k8sClient, logger)
	k8sTaintHandler := api4.NewK8sTaintHandler(logger, taintService)
	yamlTaskDAO := admin.NewYamlTaskDAO(db, logger)
	yamlTemplateDAO := admin.NewYamlTemplateDAO(db, logger)
	yamlTaskService := admin2.NewYamlTaskService(yamlTaskDAO, clusterDAO, yamlTemplateDAO, k8sClient, logger)
	k8sYamlTaskHandler := api4.NewK8sYamlTaskHandler(logger, yamlTaskService)
	yamlTemplateService := admin2.NewYamlTemplateService(yamlTemplateDAO, yamlTaskDAO, k8sClient, logger)
	k8sYamlTemplateHandler := api4.NewK8sYamlTemplateHandler(logger, yamlTemplateService)
	resourceQuotaService := admin2.NewResourceQuotaService(clusterDAO, k8sClient, logger)
	k8sResourceQuotaHandler := api4.NewK8sResourceQuotaHandler(logger, resourceQuotaService)
	limitRangeService := admin2.NewLimitRangeService(clusterDAO, k8sClient, logger)
	k8sLimitRangeHandler := api4.NewK8sLimitRangeHandler(logger, limitRangeService)
	labelService := admin2.NewLabelService(clusterDAO, k8sClient, logger)
	k8sLabelHandler := api4.NewK8sLabelHandler(labelService)
	nodeAffinityService := admin2.NewNodeAffinityService(clusterDAO, k8sClient, logger)
	k8sNodeAffinityHandler := api4.NewK8sNodeAffinityHandler(nodeAffinityService)
	podAffinityService := admin2.NewPodAffinityService(clusterDAO, k8sClient, logger)
	k8sPodAffinityHandler := api4.NewK8sPodAffinityHandler(podAffinityService)
	affinityVisualizationService := admin2.NewAffinityVisualizationService(clusterDAO, k8sClient, logger)
	k8sAffinityVisualizationHandler := api4.NewK8sAffinityVisualizationHandler(affinityVisualizationService)
	rbacService := admin2.NewRBACService(logger, k8sClient)
	k8sRBACHandler := api4.NewK8sRBACHandler(logger, rbacService)
	serviceAccountService := admin2.NewServiceAccountService(logger, k8sClient, clusterDAO)
	k8sServiceAccountHandler := api4.NewK8sServiceAccountHandler(logger, serviceAccountService)
	tolerationService := admin2.NewTolerationService(clusterDAO, k8sClient, logger)
	k8sTolerationHandler := api4.NewK8sTolerationHandler(logger, tolerationService)
	instanceService := user.NewInstanceService(clusterDAO, k8sClient, logger)
	appDAO := user2.NewAppDAO(db, logger)
	appService := user.NewAppService(clusterDAO, appDAO, k8sClient, logger)
	projectDAO := user2.NewProjectDAO(db, logger)
	projectService := user.NewProjectService(clusterDAO, projectDAO, appDAO, k8sClient, logger)
	cornJobDAO := user2.NewCornJobDAO(db, logger)
	cronjobService := user.NewCronjobService(clusterDAO, cornJobDAO, k8sClient, logger)
	k8sAppHandler := api4.NewK8sAppHandler(logger, instanceService, appService, projectService, cronjobService)
	alertManagerEventDAO := alert.NewAlertManagerEventDAO(db, logger, userDAO)
	scrapePoolDAO := scrape.NewScrapePoolDAO(db, logger, userDAO)
	scrapeJobDAO := scrape.NewScrapeJobDAO(db, logger, userDAO)
	monitorConfigDAO := config.NewMonitorConfigDAO(logger, db)
	promConfigCache := cache.NewPromConfigCache(logger, scrapePoolDAO, scrapeJobDAO, monitorConfigDAO)
	alertManagerPoolDAO := alert.NewAlertManagerPoolDAO(db, logger, userDAO)
	alertManagerSendDAO := alert.NewAlertManagerSendDAO(db, logger, userDAO)
	alertConfigCache := cache.NewAlertConfigCache(logger, alertManagerPoolDAO, alertManagerSendDAO, monitorConfigDAO)
	alertManagerRuleDAO := alert.NewAlertManagerRuleDAO(db, logger, userDAO)
	ruleConfigCache := cache.NewRuleConfigCache(logger, scrapePoolDAO, alertManagerRuleDAO)
	alertManagerRecordDAO := alert.NewAlertManagerRecordDAO(db, logger, userDAO)
	recordConfigCache := cache.NewRecordConfig(logger, scrapePoolDAO, alertManagerRecordDAO)
	monitorCache := cache.NewMonitorCache(promConfigCache, alertConfigCache, ruleConfigCache, recordConfigCache, logger)
	alertManagerEventService := alert2.NewAlertManagerEventService(alertManagerEventDAO, monitorCache, logger, userDAO, alertManagerSendDAO)
	alertEventHandler := api5.NewAlertEventHandler(alertManagerEventService)
	alertManagerPoolService := alert2.NewAlertManagerPoolService(alertManagerPoolDAO, alertManagerSendDAO, monitorCache, logger)
	alertPoolHandler := api5.NewAlertPoolHandler(alertManagerPoolService)
	alertManagerRuleService := alert2.NewAlertManagerRuleService(logger, alertManagerRuleDAO, alertManagerPoolDAO, alertManagerSendDAO)
	alertRuleHandler := api5.NewAlertRuleHandler(alertManagerRuleService)
	monitorConfigService := config2.NewMonitorConfigService(logger, monitorConfigDAO)
	monitorConfigHandler := api5.NewMonitorConfigHandler(monitorConfigService)
	alertManagerOnDutyDAO := alert.NewAlertManagerOnDutyDAO(db, logger, userDAO)
	alertManagerOnDutyService := alert2.NewAlertManagerOnDutyService(alertManagerOnDutyDAO, alertManagerSendDAO, monitorCache, logger, userDAO)
	onDutyGroupHandler := api5.NewOnDutyGroupHandler(logger, alertManagerOnDutyService)
	alertManagerRecordService := alert2.NewAlertManagerRecordService(alertManagerRecordDAO, scrapePoolDAO, monitorCache, logger)
	recordRuleHandler := api5.NewRecordRuleHandler(alertManagerRecordService)
	scrapePoolService := scrape2.NewPrometheusPoolService(scrapePoolDAO, monitorCache, logger, userDAO, scrapeJobDAO)
	scrapePoolHandler := api5.NewScrapePoolHandler(logger, scrapePoolService)
	scrapeJobService := scrape2.NewPrometheusScrapeService(scrapeJobDAO, monitorCache, logger, userDAO)
	scrapeJobHandler := api5.NewScrapeJobHandler(scrapeJobService)
	alertManagerSendService := alert2.NewAlertManagerSendService(alertManagerSendDAO, alertManagerRuleDAO, monitorCache, logger, userDAO)
	sendGroupHandler := api5.NewSendGroupHandler(logger, alertManagerSendService)
	auditHandler := api2.NewAuditHandler(auditService, logger)
	formDesignDAO := dao3.NewFormDesignDAO(db, logger)
	categoryDAO := dao3.NewCategoryDAO(db, logger)
	formDesignService := service4.NewFormDesignService(formDesignDAO, userDAO, categoryDAO, logger)
	formDesignHandler := api6.NewFormDesignHandler(formDesignService)
	processDAO := dao3.NewProcessDAO(db, logger)
	instanceDAO := dao3.NewInstanceDAO(db, logger)
	processService := service4.NewProcessService(processDAO, formDesignDAO, userDAO, categoryDAO, instanceDAO, logger)
	processHandler := api6.NewProcessHandler(processService)
	templateDAO := dao3.NewTemplateDAO(db, logger)
	templateService := service4.NewTemplateService(templateDAO, userDAO, processDAO, categoryDAO, instanceDAO, logger)
	templateHandler := api6.NewTemplateHandler(templateService)
	instanceFlowDAO := dao3.NewInstanceFlowDAO(db, logger)
	serviceInstanceService := service4.NewInstanceService(instanceDAO, processDAO, instanceFlowDAO, userDAO, logger)
	instanceHandler := api6.NewInstanceHandler(serviceInstanceService)
	instanceFlowService := service4.NewInstanceFlowService(instanceFlowDAO, processDAO, instanceDAO, userDAO, logger)
	instanceFlowHandler := api6.NewInstanceFlowHandler(instanceFlowService)
	instanceCommentDAO := dao3.NewInstanceCommentDAO(db, logger)
	instanceCommentService := service4.NewInstanceCommentService(instanceCommentDAO, instanceDAO, logger)
	instanceCommentHandler := api6.NewInstanceCommentHandler(instanceCommentService)
	statisticsDAO := dao3.NewStatisticsDAO(db, logger)
	statisticsService := service4.NewStatisticsService(statisticsDAO, userDAO, logger)
	statisticsHandler := api6.NewStatisticsHandler(statisticsService)
	categoryGroupService := service4.NewCategoryGroupService(categoryDAO, userDAO, logger)
	categoryGroupHandler := api6.NewCategoryGroupHandler(categoryGroupService)
	treeNodeDAO := dao4.NewTreeNodeDAO(logger, db)
	treeEcsDAO := dao4.NewTreeEcsDAO(db)
	treeLocalDAO := dao4.NewTreeLocalDAO(db, logger)
	treeNodeService := service5.NewTreeNodeService(logger, treeNodeDAO, treeEcsDAO, userDAO, treeLocalDAO)
	treeNodeHandler := api7.NewTreeNodeHandler(treeNodeService)
	treeLocalService := service5.NewTreeLocalService(logger, treeLocalDAO)
	ecsSSH := ssh.NewSSH(logger)
	treeLocalHandler := api7.NewTreeLocalHandler(treeLocalService, ecsSSH)
	treeEcsService := service5.NewTreeEcsService(logger, treeEcsDAO)
	treeEcsHandler := api7.NewTreeEcsHandler(treeEcsService)
	treeVpcDAO := dao4.NewTreeVpcDAO(logger, db)
	aliyunProviderImpl := provider.NewAliyunProvider(logger)
	providerFactory := provider.NewProviderFactoryWithAliyun(aliyunProviderImpl)
	treeVpcService := service5.NewTreeVpcService(logger, treeVpcDAO, providerFactory)
	treeVpcHandler := api7.NewTreeVpcHandler(treeVpcService)
	treeSecurityGroupService := service5.NewTreeSecurityGroupService(providerFactory, logger)
	treeSecurityGroupHandler := api7.NewTreeSecurityGroupHandler(treeSecurityGroupService)
	treeCloudDAO := dao4.NewTreeCloudDAO(logger, db)
	treeSecurityGroupDAO := dao4.NewTreeSecurityGroupDAO(db)
	treeCloudService := service5.NewTreeCloudService(logger, treeCloudDAO, providerFactory, treeVpcDAO, treeSecurityGroupDAO, treeEcsDAO)
	treeCloudHandler := api7.NewTreeCloudHandler(treeCloudService)
	treeRdsDAO := dao4.NewTreeRdsDAO(db)
	treeRdsService := service5.NewTreeRdsService(logger, treeRdsDAO)
	treeRdsHandler := api7.NewTreeRdsHandler(treeRdsService)
	treeElbDAO := dao4.NewTreeElbDAO(db)
	treeElbService := service5.NewTreeElbService(logger, treeElbDAO)
	treeElbHandler := api7.NewTreeElbHandler(treeElbService)
	notificationDAO := dao3.NewNotificationDAO(db)
	notificationService := service4.NewNotificationService(notificationDAO, logger)
	notificationHandler := api6.NewNotificationHandler(notificationService)
	engine := InitGinServer(v, userHandler, apiHandler, roleHandler, notAuthHandler, k8sClusterHandler, k8sConfigMapHandler, k8sDeploymentHandler, k8sNamespaceHandler, k8sNodeHandler, k8sPodHandler, k8sSvcHandler, k8sTaintHandler, k8sYamlTaskHandler, k8sYamlTemplateHandler, k8sResourceQuotaHandler, k8sLimitRangeHandler, k8sLabelHandler, k8sNodeAffinityHandler, k8sPodAffinityHandler, k8sAffinityVisualizationHandler, k8sRBACHandler, k8sServiceAccountHandler, k8sTolerationHandler, k8sAppHandler, alertEventHandler, alertPoolHandler, alertRuleHandler, monitorConfigHandler, onDutyGroupHandler, recordRuleHandler, scrapePoolHandler, scrapeJobHandler, sendGroupHandler, auditHandler, formDesignHandler, processHandler, templateHandler, instanceHandler, instanceFlowHandler, instanceCommentHandler, statisticsHandler, categoryGroupHandler, treeNodeHandler, treeLocalHandler, treeEcsHandler, treeVpcHandler, treeSecurityGroupHandler, treeCloudHandler, treeRdsHandler, treeElbHandler, notificationHandler)
	applicationBootstrap := startup.NewApplicationBootstrap(clusterManager, logger)
	cmd := &Cmd{
		Server:    engine,
		Bootstrap: applicationBootstrap,
	}
	return cmd
}

// wire.go:

type Cmd struct {
	Server    *gin.Engine
	Bootstrap startup.ApplicationBootstrap
}

var HandlerSet = wire.NewSet(api2.NewRoleHandler, api2.NewApiHandler, api2.NewAuditHandler, api.NewUserHandler, api3.NewNotAuthHandler, api4.NewK8sPodHandler, api4.NewK8sAppHandler, api4.NewK8sNodeHandler, api4.NewK8sConfigMapHandler, api4.NewK8sClusterHandler, api4.NewK8sDeploymentHandler, api4.NewK8sNamespaceHandler, api4.NewK8sSvcHandler, api4.NewK8sTaintHandler, api4.NewK8sYamlTaskHandler, api4.NewK8sYamlTemplateHandler, api4.NewK8sResourceQuotaHandler, api4.NewK8sLimitRangeHandler, api4.NewK8sLabelHandler, api4.NewK8sNodeAffinityHandler, api4.NewK8sPodAffinityHandler, api4.NewK8sAffinityVisualizationHandler, api4.NewK8sRBACHandler, api4.NewK8sServiceAccountHandler, api4.NewK8sTolerationHandler, api5.NewAlertPoolHandler, api5.NewMonitorConfigHandler, api5.NewOnDutyGroupHandler, api5.NewRecordRuleHandler, api5.NewAlertRuleHandler, api5.NewSendGroupHandler, api5.NewScrapeJobHandler, api5.NewScrapePoolHandler, api5.NewAlertEventHandler, api6.NewFormDesignHandler, api6.NewInstanceHandler, api6.NewInstanceFlowHandler, api6.NewInstanceCommentHandler, api6.NewTemplateHandler, api6.NewProcessHandler, api6.NewStatisticsHandler, api6.NewCategoryGroupHandler, api6.NewNotificationHandler, api7.NewTreeNodeHandler, api7.NewTreeCloudHandler, api7.NewTreeEcsHandler, api7.NewTreeLocalHandler, api7.NewTreeVpcHandler, api7.NewTreeSecurityGroupHandler, api7.NewTreeRdsHandler, api7.NewTreeElbHandler)

var ServiceSet = wire.NewSet(admin2.NewClusterService, admin2.NewConfigMapService, admin2.NewDeploymentService, admin2.NewNamespaceService, admin2.NewPodService, admin2.NewSvcService, admin2.NewNodeService, admin2.NewTaintService, admin2.NewYamlTaskService, admin2.NewYamlTemplateService, admin2.NewResourceQuotaService, admin2.NewLimitRangeService, admin2.NewLabelService, admin2.NewNodeAffinityService, admin2.NewPodAffinityService, admin2.NewAffinityVisualizationService, admin2.NewRBACService, admin2.NewServiceAccountService, admin2.NewTolerationService, user.NewAppService, user.NewInstanceService, user.NewCronjobService, user.NewProjectService, service2.NewUserService, service.NewApiService, service.NewRoleService, service.NewAuditService, alert2.NewAlertManagerEventService, alert2.NewAlertManagerOnDutyService, alert2.NewAlertManagerPoolService, alert2.NewAlertManagerRecordService, alert2.NewAlertManagerRuleService, alert2.NewAlertManagerSendService, scrape2.NewPrometheusScrapeService, scrape2.NewPrometheusPoolService, config2.NewMonitorConfigService, service3.NewNotAuthService, service4.NewFormDesignService, service4.NewInstanceService, service4.NewInstanceFlowService, service4.NewInstanceCommentService, service4.NewTemplateService, service4.NewProcessService, service4.NewStatisticsService, service4.NewCategoryGroupService, service4.NewNotificationService, service5.NewTreeNodeService, service5.NewTreeCloudService, service5.NewTreeEcsService, service5.NewTreeLocalService, service5.NewTreeVpcService, service5.NewTreeElbService, service5.NewTreeRdsService, service5.NewTreeSecurityGroupService)

var DaoSet = wire.NewSet(alert.NewAlertManagerEventDAO, alert.NewAlertManagerOnDutyDAO, alert.NewAlertManagerPoolDAO, alert.NewAlertManagerRecordDAO, alert.NewAlertManagerRuleDAO, alert.NewAlertManagerSendDAO, scrape.NewScrapeJobDAO, scrape.NewScrapePoolDAO, config.NewMonitorConfigDAO, dao2.NewUserDAO, dao.NewRoleDAO, dao.NewApiDAO, dao.NewAuditDAO, admin.NewClusterDAO, admin.NewYamlTemplateDAO, admin.NewYamlTaskDAO, user2.NewAppDAO, user2.NewProjectDAO, user2.NewCornJobDAO, dao3.NewFormDesignDAO, dao3.NewTemplateDAO, dao3.NewInstanceDAO, dao3.NewProcessDAO, dao3.NewStatisticsDAO, dao3.NewCategoryDAO, dao3.NewInstanceCommentDAO, dao3.NewInstanceFlowDAO, dao3.NewNotificationDAO, dao4.NewTreeNodeDAO, dao4.NewTreeCloudDAO, dao4.NewTreeEcsDAO, dao4.NewTreeLocalDAO, dao4.NewTreeVpcDAO, dao4.NewTreeElbDAO, dao4.NewTreeRdsDAO, dao4.NewTreeSecurityGroupDAO)

var SSHSet = wire.NewSet(ssh.NewSSH)

var UtilSet = wire.NewSet(utils.NewJWTHandler)

var JobSet = wire.NewSet(manager.NewClusterManager, startup.NewApplicationBootstrap)

var ProviderSet = wire.NewSet(provider.NewAliyunProvider, provider.NewProviderFactoryWithAliyun)

var CronSet = wire.NewSet(cron.NewCronManager)

var Injector = wire.NewSet(
	InitMiddlewares,
	InitGinServer,
	InitLogger,
	InitRedis,
	InitDB, wire.Struct(new(Cmd), "*"),
)

var CacheSet = wire.NewSet(cache.NewMonitorCache, cache.NewAlertConfigCache, cache.NewRuleConfigCache, cache.NewRecordConfig, cache.NewPromConfigCache)

var ClientSet = wire.NewSet(client.NewK8sClient)
