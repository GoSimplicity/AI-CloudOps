// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/GoSimplicity/AI-CloudOps/internal/cron"
	api4 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/client"
	dao3 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/k8s/manager"
	service4 "github.com/GoSimplicity/AI-CloudOps/internal/k8s/service"
	api3 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/api"
	service3 "github.com/GoSimplicity/AI-CloudOps/internal/not_auth/service"
	api5 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/cache"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/alert"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/config"
	"github.com/GoSimplicity/AI-CloudOps/internal/prometheus/dao/scrape"
	alert2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/alert"
	config2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/config"
	scrape2 "github.com/GoSimplicity/AI-CloudOps/internal/prometheus/service/scrape"
	"github.com/GoSimplicity/AI-CloudOps/internal/startup"
	api2 "github.com/GoSimplicity/AI-CloudOps/internal/system/api"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/system/service"
	api7 "github.com/GoSimplicity/AI-CloudOps/internal/tree/api"
	dao5 "github.com/GoSimplicity/AI-CloudOps/internal/tree/dao"
	service6 "github.com/GoSimplicity/AI-CloudOps/internal/tree/service"
	"github.com/GoSimplicity/AI-CloudOps/internal/tree/ssh"
	"github.com/GoSimplicity/AI-CloudOps/internal/user/api"
	dao2 "github.com/GoSimplicity/AI-CloudOps/internal/user/dao"
	service2 "github.com/GoSimplicity/AI-CloudOps/internal/user/service"
	api6 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/api"
	dao4 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/dao"
	"github.com/GoSimplicity/AI-CloudOps/internal/workorder/notification"
	service5 "github.com/GoSimplicity/AI-CloudOps/internal/workorder/service"
	"github.com/GoSimplicity/AI-CloudOps/pkg/utils"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/hibiken/asynq"
	"go.uber.org/zap"
)

import (
	_ "github.com/google/wire"
)

// Injectors from wire.go:

func ProvideCmd() *Cmd {
	cmdable := InitRedis()
	handler := utils.NewJWTHandler(cmdable)
	logger := InitLogger()
	db := InitDB()
	roleDAO := dao.NewRoleDAO(db)
	roleService := service.NewRoleService(roleDAO, logger)
	auditDAO := dao.NewAuditDAO(db)
	auditService := service.NewAuditService(auditDAO, logger)
	v := InitMiddlewares(handler, logger, roleService, auditService)
	userDAO := dao2.NewUserDAO(db, logger)
	userService := service2.NewUserService(userDAO, roleService, logger)
	userHandler := api.NewUserHandler(userService, handler)
	apiDAO := dao.NewApiDAO(db, logger)
	apiService := service.NewApiService(logger, apiDAO)
	apiHandler := api2.NewApiHandler(apiService)
	roleHandler := api2.NewRoleHandler(roleService)
	systemService := service.NewSystemService(logger, cmdable)
	systemHandler := api2.NewSystemHandler(systemService)
	notAuthService := service3.NewNotAuthService(logger)
	notAuthHandler := api3.NewNotAuthHandler(notAuthService)
	clusterDAO := dao3.NewClusterDAO(db, logger)
	v2 := client.NewK8sClient(logger, clusterDAO)
	clusterManager := manager.NewClusterManager(logger, v2, clusterDAO)
	clusterService := service4.NewClusterService(clusterDAO, v2, clusterManager, logger)
	k8sClusterHandler := api4.NewK8sClusterHandler(logger, clusterService)
	deploymentManager := manager.NewDeploymentManager(v2, logger)
	deploymentService := service4.NewDeploymentService(clusterDAO, v2, deploymentManager, logger)
	k8sDeploymentHandler := api4.NewK8sDeploymentHandler(logger, deploymentService)
	namespaceService := service4.NewNamespaceService(clusterDAO, v2, logger)
	k8sNamespaceHandler := api4.NewK8sNamespaceHandler(logger, namespaceService)
	nodeManager := manager.NewNodeManager(v2, logger)
	nodeService := service4.NewNodeService(clusterDAO, v2, nodeManager, logger)
	taintManager := manager.NewTaintManager(clusterDAO, v2, logger)
	taintService := service4.NewTaintService(taintManager, logger)
	k8sNodeHandler := api4.NewK8sNodeHandler(logger, nodeService, taintService)
	podManager := manager.NewPodManager(v2, logger)
	podService := service4.NewPodService(clusterDAO, v2, podManager, logger)
	k8sPodHandler := api4.NewK8sPodHandler(logger, podService)
	svcService := service4.NewSvcService(clusterDAO, v2, logger)
	k8sSvcHandler := api4.NewK8sSvcHandler(logger, svcService)
	k8sTaintHandler := api4.NewK8sTaintHandler(logger, taintService)
	yamlTemplateDAO := dao3.NewYamlTemplateDAO(db, logger)
	yamlTaskDAO := dao3.NewYamlTaskDAO(db, logger)
	yamlManager := manager.NewYamlManager(yamlTemplateDAO, yamlTaskDAO, clusterDAO, v2, logger)
	yamlTaskService := service4.NewYamlTaskService(yamlManager, logger)
	k8sYamlTaskHandler := api4.NewK8sYamlTaskHandler(logger, yamlTaskService)
	yamlTemplateService := service4.NewYamlTemplateService(yamlManager, logger)
	k8sYamlTemplateHandler := api4.NewK8sYamlTemplateHandler(logger, yamlTemplateService)
	configMapManager := manager.NewConfigMapManager(v2, logger)
	configMapService := service4.NewConfigMapService(v2, configMapManager, logger)
	k8sConfigMapHandler := api4.NewK8sConfigMapHandler(logger, configMapService)
	secretManager := manager.NewSecretManager(v2, logger)
	secretService := service4.NewSecretService(v2, secretManager, logger)
	k8sSecretHandler := api4.NewK8sSecretHandler(logger, secretService)
	daemonSetManager := manager.NewDaemonSetManager(v2)
	daemonSetService := service4.NewDaemonSetService(clusterDAO, v2, daemonSetManager, logger)
	k8sDaemonSetHandler := api4.NewK8sDaemonSetHandler(logger, daemonSetService)
	eventManager := manager.NewEventManager(v2, logger)
	eventService := service4.NewEventService(clusterDAO, v2, eventManager, logger)
	k8sEventHandler := api4.NewK8sEventHandler(logger, eventService)
	pvManager := manager.NewPVManager(logger, v2)
	pvService := service4.NewPVService(clusterDAO, v2, pvManager, logger)
	k8sPVHandler := api4.NewK8sPVHandler(logger, pvService)
	pvcManager := manager.NewPVCManager(logger, v2)
	pvcService := service4.NewPVCService(clusterDAO, v2, pvcManager, logger)
	k8sPVCHandler := api4.NewK8sPVCHandler(logger, pvcService)
	ingressManager := manager.NewIngressManager(logger, v2)
	ingressService := service4.NewIngressService(clusterDAO, v2, ingressManager, logger)
	k8sIngressHandler := api4.NewK8sIngressHandler(logger, ingressService)
	statefulSetManager := manager.NewStatefulSetManager(v2)
	statefulSetService := service4.NewStatefulSetService(v2, statefulSetManager, logger)
	k8sStatefulSetHandler := api4.NewK8sStatefulSetHandler(logger, statefulSetService)
	serviceAccountManager := manager.NewServiceAccountManager(logger, v2)
	serviceAccountService := service4.NewServiceAccountService(clusterDAO, serviceAccountManager, logger)
	k8sServiceAccountHandler := api4.NewK8sServiceAccountHandler(logger, serviceAccountService)
	rbacManager := manager.NewRBACManager(logger, v2)
	serviceRoleService := service4.NewRoleService(clusterDAO, rbacManager, logger)
	roleAPI := api4.NewRoleAPI(serviceRoleService, logger)
	clusterRoleService := service4.NewClusterRoleService(clusterDAO, rbacManager, logger)
	clusterRoleAPI := api4.NewClusterRoleAPI(clusterRoleService, logger)
	roleBindingService := service4.NewRoleBindingService(clusterDAO, rbacManager, logger)
	roleBindingAPI := api4.NewRoleBindingAPI(roleBindingService, logger)
	clusterRoleBindingService := service4.NewClusterRoleBindingService(clusterDAO, rbacManager, logger)
	clusterRoleBindingAPI := api4.NewClusterRoleBindingAPI(clusterRoleBindingService, logger)
	rbacService := service4.NewRBACService(rbacManager)
	rbacapi := api4.NewRBACAPI(rbacService, logger)
	alertManagerEventDAO := alert.NewAlertManagerEventDAO(db, logger, userDAO)
	scrapePoolDAO := scrape.NewScrapePoolDAO(db, logger, userDAO)
	scrapeJobDAO := scrape.NewScrapeJobDAO(db, logger)
	monitorConfigDAO := config.NewMonitorConfigDAO(logger, db)
	batchConfigManager := cache.NewBatchConfigManager(monitorConfigDAO, logger)
	prometheusConfigCache := cache.NewPrometheusConfigCache(logger, scrapePoolDAO, scrapeJobDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerPoolDAO := alert.NewAlertManagerPoolDAO(db, logger)
	alertManagerSendDAO := alert.NewAlertManagerSendDAO(db, logger)
	alertManagerConfigCache := cache.NewAlertManagerConfigCache(logger, alertManagerPoolDAO, alertManagerSendDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerRuleDAO := alert.NewAlertManagerRuleDAO(db, logger, userDAO)
	alertRuleConfigCache := cache.NewAlertRuleConfigCache(logger, scrapePoolDAO, alertManagerRuleDAO, monitorConfigDAO, batchConfigManager, cmdable)
	alertManagerRecordDAO := alert.NewAlertManagerRecordDAO(db, logger, userDAO)
	recordRuleConfigCache := cache.NewRecordRuleConfigCache(logger, scrapePoolDAO, alertManagerRecordDAO, monitorConfigDAO, batchConfigManager, cmdable)
	monitorCache := cache.NewMonitorCache(prometheusConfigCache, alertManagerConfigCache, alertRuleConfigCache, recordRuleConfigCache, logger)
	alertManagerEventService := alert2.NewAlertManagerEventService(alertManagerEventDAO, monitorCache, logger, userDAO, alertManagerSendDAO)
	alertEventHandler := api5.NewAlertEventHandler(alertManagerEventService)
	alertManagerPoolService := alert2.NewAlertManagerPoolService(alertManagerPoolDAO, alertManagerSendDAO, logger, monitorCache)
	alertPoolHandler := api5.NewAlertPoolHandler(alertManagerPoolService)
	alertManagerRuleService := alert2.NewAlertManagerRuleService(logger, alertManagerRuleDAO, alertManagerPoolDAO, alertManagerSendDAO, monitorCache)
	alertRuleHandler := api5.NewAlertRuleHandler(alertManagerRuleService)
	monitorConfigService := config2.NewMonitorConfigService(logger, monitorConfigDAO)
	monitorConfigHandler := api5.NewMonitorConfigHandler(monitorConfigService)
	alertManagerOnDutyDAO := alert.NewAlertManagerOnDutyDAO(db, logger, userDAO)
	alertManagerOnDutyService := alert2.NewAlertManagerOnDutyService(alertManagerOnDutyDAO, alertManagerSendDAO, monitorCache, logger, userDAO)
	onDutyGroupHandler := api5.NewOnDutyGroupHandler(alertManagerOnDutyService)
	alertManagerRecordService := alert2.NewAlertManagerRecordService(alertManagerRecordDAO, scrapePoolDAO, logger, monitorCache)
	recordRuleHandler := api5.NewRecordRuleHandler(alertManagerRecordService)
	scrapePoolService := scrape2.NewPrometheusPoolService(scrapePoolDAO, monitorCache, logger, userDAO, scrapeJobDAO)
	scrapePoolHandler := api5.NewScrapePoolHandler(logger, scrapePoolService)
	scrapeJobService := scrape2.NewPrometheusScrapeService(scrapeJobDAO, monitorCache, logger, userDAO)
	scrapeJobHandler := api5.NewScrapeJobHandler(scrapeJobService)
	alertManagerSendService := alert2.NewAlertManagerSendService(alertManagerSendDAO, alertManagerRuleDAO, logger, userDAO, monitorCache)
	sendGroupHandler := api5.NewSendGroupHandler(alertManagerSendService)
	auditHandler := api2.NewAuditHandler(auditService, logger)
	workorderFormDesignDAO := dao4.NewWorkorderFormDesignDAO(db, logger)
	workorderCategoryDAO := dao4.NewWorkorderCategoryDAO(db, logger)
	formDesignService := service5.NewFormDesignService(workorderFormDesignDAO, workorderCategoryDAO, logger)
	formDesignHandler := api6.NewFormDesignHandler(formDesignService)
	workorderProcessDAO := dao4.NewProcessDAO(db, logger)
	workorderInstanceDAO := dao4.NewWorkorderInstanceDAO(db, logger)
	workorderProcessService := service5.NewWorkorderProcessService(workorderProcessDAO, workorderFormDesignDAO, workorderCategoryDAO, workorderInstanceDAO, logger)
	workorderProcessHandler := api6.NewWorkorderProcessHandler(workorderProcessService)
	workorderTemplateDAO := dao4.NewTemplateDAO(db, logger)
	workorderTemplateService := service5.NewWorkorderTemplateService(workorderTemplateDAO, workorderProcessDAO, workorderCategoryDAO, workorderInstanceDAO, logger)
	templateHandler := api6.NewTemplateHandler(workorderTemplateService)
	workorderInstanceFlowDAO := dao4.NewInstanceFlowDAO(db, logger)
	workorderInstanceTimelineDAO := dao4.NewInstanceTimeLineDAO(db, logger)
	workorderInstanceCommentDAO := dao4.NewWorkorderInstanceCommentDAO(db, logger)
	workorderNotificationDAO := dao4.NewNotificationDAO(db, logger)
	notificationConfig := InitNotificationConfig()
	asynqClient := InitAsynqClient()
	notificationManager := InitNotificationManager(notificationConfig, asynqClient, logger)
	workorderNotificationService := service5.NewWorkorderNotificationService(workorderNotificationDAO, notificationManager, logger, workorderInstanceDAO, userDAO)
	instanceService := service5.NewInstanceService(workorderInstanceDAO, workorderInstanceFlowDAO, workorderInstanceTimelineDAO, workorderInstanceCommentDAO, workorderProcessDAO, workorderFormDesignDAO, workorderTemplateDAO, workorderNotificationService, logger)
	instanceHandler := api6.NewInstanceHandler(instanceService)
	instanceFlowService := service5.NewInstanceFlowService(workorderInstanceFlowDAO, logger)
	instanceFlowHandler := api6.NewInstanceFlowHandler(instanceFlowService)
	instanceCommentService := service5.NewInstanceCommentService(workorderInstanceCommentDAO, workorderInstanceDAO, workorderNotificationService, logger)
	instanceCommentHandler := api6.NewInstanceCommentHandler(instanceCommentService)
	categoryGroupService := service5.NewCategoryGroupService(workorderCategoryDAO, userDAO, logger)
	categoryGroupHandler := api6.NewCategoryGroupHandler(categoryGroupService)
	workorderInstanceTimeLineService := service5.NewWorkorderInstanceTimeLineService(logger, workorderInstanceTimelineDAO)
	instanceTimeLineHandler := api6.NewInstanceTimeLineHandler(workorderInstanceTimeLineService)
	treeNodeDAO := dao5.NewTreeNodeDAO(logger, db)
	treeNodeService := service6.NewTreeNodeService(logger, treeNodeDAO, userDAO)
	treeNodeHandler := api7.NewTreeNodeHandler(treeNodeService)
	treeLocalDAO := dao5.NewTreeLocalDAO(db, logger)
	treeLocalService := service6.NewTreeLocalService(logger, treeLocalDAO)
	ecsSSH := ssh.NewSSH(logger)
	treeLocalHandler := api7.NewTreeLocalHandler(treeLocalService, ecsSSH)
	notificationHandler := api6.NewNotificationHandler(workorderNotificationService)
	engine := InitGinServer(v, userHandler, apiHandler, roleHandler, systemHandler, notAuthHandler, k8sClusterHandler, k8sDeploymentHandler, k8sNamespaceHandler, k8sNodeHandler, k8sPodHandler, k8sSvcHandler, k8sTaintHandler, k8sYamlTaskHandler, k8sYamlTemplateHandler, k8sConfigMapHandler, k8sSecretHandler, k8sDaemonSetHandler, k8sEventHandler, k8sPVHandler, k8sPVCHandler, k8sIngressHandler, k8sStatefulSetHandler, k8sServiceAccountHandler, roleAPI, clusterRoleAPI, roleBindingAPI, clusterRoleBindingAPI, rbacapi, alertEventHandler, alertPoolHandler, alertRuleHandler, monitorConfigHandler, onDutyGroupHandler, recordRuleHandler, scrapePoolHandler, scrapeJobHandler, sendGroupHandler, auditHandler, formDesignHandler, workorderProcessHandler, templateHandler, instanceHandler, instanceFlowHandler, instanceCommentHandler, categoryGroupHandler, instanceTimeLineHandler, treeNodeHandler, treeLocalHandler, notificationHandler)
	applicationBootstrap := startup.NewApplicationBootstrap(clusterManager, logger)
	cronManager := cron.NewCronManager(logger, alertManagerOnDutyDAO, clusterDAO, v2, clusterManager, monitorCache)
	cmd := &Cmd{
		Server:    engine,
		Bootstrap: applicationBootstrap,
		Cron:      cronManager,
	}
	return cmd
}

// wire.go:

type Cmd struct {
	Server    *gin.Engine
	Bootstrap startup.ApplicationBootstrap
	Cron      cron.CronManager
}

var HandlerSet = wire.NewSet(api2.NewRoleHandler, api2.NewApiHandler, api2.NewAuditHandler, api2.NewSystemHandler, api.NewUserHandler, api3.NewNotAuthHandler, api4.NewK8sPodHandler, api4.NewK8sNodeHandler, api4.NewK8sClusterHandler, api4.NewK8sDeploymentHandler, api4.NewK8sNamespaceHandler, api4.NewK8sSvcHandler, api4.NewK8sTaintHandler, api4.NewK8sYamlTaskHandler, api4.NewK8sYamlTemplateHandler, api4.NewK8sConfigMapHandler, api4.NewK8sSecretHandler, api4.NewK8sDaemonSetHandler, api4.NewK8sEventHandler, api4.NewK8sPVHandler, api4.NewK8sPVCHandler, api4.NewK8sIngressHandler, api4.NewK8sStatefulSetHandler, api4.NewK8sServiceAccountHandler, api4.NewRoleAPI, api4.NewClusterRoleAPI, api4.NewRoleBindingAPI, api4.NewClusterRoleBindingAPI, api4.NewRBACAPI, api5.NewAlertPoolHandler, api5.NewMonitorConfigHandler, api5.NewOnDutyGroupHandler, api5.NewRecordRuleHandler, api5.NewAlertRuleHandler, api5.NewSendGroupHandler, api5.NewScrapeJobHandler, api5.NewScrapePoolHandler, api5.NewAlertEventHandler, api6.NewFormDesignHandler, api6.NewInstanceHandler, api6.NewInstanceFlowHandler, api6.NewInstanceCommentHandler, api6.NewInstanceTimeLineHandler, api6.NewTemplateHandler, api6.NewWorkorderProcessHandler, api6.NewCategoryGroupHandler, api6.NewNotificationHandler, api7.NewTreeNodeHandler, api7.NewTreeLocalHandler)

var ServiceSet = wire.NewSet(service4.NewClusterService, service4.NewDeploymentService, service4.NewNamespaceService, service4.NewPodService, service4.NewSvcService, service4.NewNodeService, service4.NewTaintService, service4.NewYamlTaskService, service4.NewYamlTemplateService, service4.NewConfigMapService, service4.NewSecretService, service4.NewDaemonSetService, service4.NewEventService, service4.NewPVService, service4.NewPVCService, service4.NewIngressService, service4.NewStatefulSetService, service4.NewServiceAccountService, service4.NewRoleService, service4.NewClusterRoleService, service4.NewRoleBindingService, service4.NewClusterRoleBindingService, service4.NewRBACService, service2.NewUserService, service.NewApiService, service.NewRoleService, service.NewAuditService, service.NewSystemService, alert2.NewAlertManagerEventService, alert2.NewAlertManagerOnDutyService, alert2.NewAlertManagerPoolService, alert2.NewAlertManagerRecordService, alert2.NewAlertManagerRuleService, alert2.NewAlertManagerSendService, scrape2.NewPrometheusScrapeService, scrape2.NewPrometheusPoolService, config2.NewMonitorConfigService, service3.NewNotAuthService, service5.NewFormDesignService, service5.NewInstanceService, service5.NewInstanceFlowService, service5.NewInstanceCommentService, service5.NewWorkorderInstanceTimeLineService, service5.NewWorkorderTemplateService, service5.NewWorkorderProcessService, service5.NewCategoryGroupService, service5.NewWorkorderNotificationService, service6.NewTreeNodeService, service6.NewTreeLocalService)

var DaoSet = wire.NewSet(alert.NewAlertManagerEventDAO, alert.NewAlertManagerOnDutyDAO, alert.NewAlertManagerPoolDAO, alert.NewAlertManagerRecordDAO, alert.NewAlertManagerRuleDAO, alert.NewAlertManagerSendDAO, scrape.NewScrapeJobDAO, scrape.NewScrapePoolDAO, config.NewMonitorConfigDAO, dao2.NewUserDAO, dao.NewRoleDAO, dao.NewApiDAO, dao.NewAuditDAO, dao3.NewClusterDAO, dao3.NewYamlTaskDAO, dao3.NewYamlTemplateDAO, dao4.NewWorkorderFormDesignDAO, dao4.NewTemplateDAO, dao4.NewWorkorderInstanceDAO, dao4.NewProcessDAO, dao4.NewWorkorderCategoryDAO, dao4.NewWorkorderInstanceCommentDAO, dao4.NewInstanceFlowDAO, dao4.NewInstanceTimeLineDAO, dao4.NewNotificationDAO, dao5.NewTreeNodeDAO, dao5.NewTreeLocalDAO)

var SSHSet = wire.NewSet(ssh.NewSSH)

var UtilSet = wire.NewSet(utils.NewJWTHandler)

var ManagerSet = wire.NewSet(manager.NewClusterManager, manager.NewDeploymentManager, manager.NewNamespaceManager, manager.NewPodManager, manager.NewServiceManager, manager.NewNodeManager, manager.NewConfigMapManager, manager.NewSecretManager, manager.NewEventManager, manager.NewStatefulSetManager, manager.NewDaemonSetManager, manager.NewIngressManager, manager.NewPVManager, manager.NewPVCManager, manager.NewRBACManager, manager.NewServiceAccountManager, manager.NewTaintManager, manager.NewYamlManager)

var JobSet = wire.NewSet(startup.NewApplicationBootstrap)

var CronSet = wire.NewSet(cron.NewCronManager)

var Injector = wire.NewSet(
	InitMiddlewares,
	InitGinServer,
	InitLogger,
	InitRedis,
	InitDB,
	CronSet, wire.Struct(new(Cmd), "*"),
)

var CacheSet = wire.NewSet(cache.NewMonitorCache, cache.NewAlertManagerConfigCache, cache.NewAlertRuleConfigCache, cache.NewRecordRuleConfigCache, cache.NewPrometheusConfigCache, cache.NewBatchConfigManager)

var ClientSet = wire.NewSet(client.NewK8sClient)

var NotificationSet = wire.NewSet(
	InitAsynqClient,
	InitNotificationConfig,
	InitNotificationManager,
)

// NotificationConfigAdapter 通知配置适配器
type NotificationConfigAdapter struct {
	config *NotificationConfig
}

// GetEmail 获取邮箱配置
func (a *NotificationConfigAdapter) GetEmail() notification.EmailConfig {
	emailConfig := a.config.GetEmail()
	if emailConfig == nil {
		return nil
	}
	return emailConfig
}

// GetFeishu 获取飞书配置
func (a *NotificationConfigAdapter) GetFeishu() notification.FeishuConfig {
	feishuConfig := a.config.GetFeishu()
	if feishuConfig == nil {
		return nil
	}
	return feishuConfig
}

// InitNotificationConfig 初始化通知配置
func InitNotificationConfig() notification.NotificationConfig {
	return &NotificationConfigAdapter{
		config: &GlobalConfig.Notification,
	}
}

// InitNotificationManager 初始化通知管理器
func InitNotificationManager(config3 notification.NotificationConfig, asynqClient *asynq.Client, logger *zap.Logger) *notification.Manager {
	manager2, err := notification.NewManager(config3, asynqClient, logger)
	if err != nil {
		panic(err)
	}
	return manager2
}
