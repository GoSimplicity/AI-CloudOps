// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	api2 "github.com/GoSimplicity/CloudOps/internal/auth/api"
	"github.com/GoSimplicity/CloudOps/internal/auth/dao/auth"
	"github.com/GoSimplicity/CloudOps/internal/auth/dao/casbin"
	service2 "github.com/GoSimplicity/CloudOps/internal/auth/service"
	"github.com/GoSimplicity/CloudOps/internal/user/api"
	"github.com/GoSimplicity/CloudOps/internal/user/dao"
	"github.com/GoSimplicity/CloudOps/internal/user/service"
	"github.com/GoSimplicity/CloudOps/pkg/utils/jwt"
	"github.com/gin-gonic/gin"
)

import (
	_ "github.com/google/wire"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := InitRedis()
	handler := jwt.NewJWTHandler(cmdable)
	logger := InitLogger()
	db := InitDB()
	userDAO := dao.NewUserDAO(db, logger)
	enforcer := InitCasbin(db, logger)
	casbinDAO := casbin.NewCasbinDAO(enforcer, logger)
	v := InitMiddlewares(handler, logger, userDAO, casbinDAO)
	userService := service.NewUserService(userDAO)
	userHandler := api.NewUserHandler(userService, logger, handler)
	authDAO := auth.NewAuthDAO(db, logger)
	authService := service2.NewAuthService(authDAO, logger, userDAO)
	authHandler := api2.NewAuthHandler(authService, handler, logger, casbinDAO, userDAO)
	engine := InitGinServer(v, userHandler, authHandler)
	return engine
}
