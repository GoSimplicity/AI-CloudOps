// Code generated by MockGen. DO NOT EDIT.
// Source: internal/workorder/dao/category_dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/GoSimplicity/AI-CloudOps/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCategoryDAO is a mock of CategoryDAO interface.
type MockCategoryDAO struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryDAOMockRecorder
}

// MockCategoryDAOMockRecorder is the mock recorder for MockCategoryDAO.
type MockCategoryDAOMockRecorder struct {
	mock *MockCategoryDAO
}

// NewMockCategoryDAO creates a new mock instance.
func NewMockCategoryDAO(ctrl *gomock.Controller) *MockCategoryDAO {
	mock := &MockCategoryDAO{ctrl: ctrl}
	mock.recorder = &MockCategoryDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryDAO) EXPECT() *MockCategoryDAOMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryDAO) CreateCategory(ctx context.Context, category *model.Category) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryDAOMockRecorder) CreateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryDAO)(nil).CreateCategory), ctx, category)
}

// DeleteCategory mocks base method.
func (m *MockCategoryDAO) DeleteCategory(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryDAOMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryDAO)(nil).DeleteCategory), ctx, id)
}

// GetAllCategories mocks base method.
func (m *MockCategoryDAO) GetAllCategories(ctx context.Context) ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockCategoryDAOMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockCategoryDAO)(nil).GetAllCategories), ctx)
}

// GetCategory mocks base method.
func (m *MockCategoryDAO) GetCategory(ctx context.Context, id int) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockCategoryDAOMockRecorder) GetCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockCategoryDAO)(nil).GetCategory), ctx, id)
}

// ListCategory mocks base method.
func (m *MockCategoryDAO) ListCategory(ctx context.Context, req model.ListCategoryReq) ([]model.Category, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategory", ctx, req)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCategory indicates an expected call of ListCategory.
func (mr *MockCategoryDAOMockRecorder) ListCategory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategory", reflect.TypeOf((*MockCategoryDAO)(nil).ListCategory), ctx, req)
}

// UpdateCategory mocks base method.
func (m *MockCategoryDAO) UpdateCategory(ctx context.Context, category *model.Category) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, category)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryDAOMockRecorder) UpdateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryDAO)(nil).UpdateCategory), ctx, category)
}
