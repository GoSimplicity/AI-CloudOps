#!/bin/bash

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 错误处理函数
function error_exit() {
    echo -e "${RED}[PRE-COMMIT ERROR]${NC} $1"
    exit 1
}

# 成功信息函数
function success_msg() {
    echo -e "${GREEN}[PRE-COMMIT]${NC} $1"
}

# 警告信息函数
function warning_msg() {
    echo -e "${YELLOW}[PRE-COMMIT]${NC} $1"
}

# 信息函数
function info_msg() {
    echo -e "${BLUE}[PRE-COMMIT]${NC} $1"
}

# 检查当前分支
BRANCH=$(git symbolic-ref --short HEAD)
info_msg "当前分支: $BRANCH"

# 显示环境变量提示
if [ -n "$SKIP_GENERATE" ] || [ -n "$SKIP_VET" ] || [ -n "$SKIP_BUILD" ]; then
    warning_msg "检测到跳过选项："
    [ "$SKIP_GENERATE" = "1" ] && echo "  - SKIP_GENERATE=1 (跳过 go generate)"
    [ "$SKIP_VET" = "1" ] && echo "  - SKIP_VET=1 (跳过 go vet)"
    [ "$SKIP_BUILD" = "1" ] && echo "  - SKIP_BUILD=1 (跳过编译检查)"
fi

# 检查是否有Go文件变更
if git diff --cached --quiet -- '*.go'; then
    warning_msg "未检测到 Go 文件变更，跳过Go相关检查"
    success_msg "提交准备就绪"
    exit 0
else
    info_msg "检测到 Go 文件变更，开始执行检查..."
fi

# 1. 执行 go generate
if [ "$SKIP_GENERATE" = "1" ]; then
    warning_msg "跳过 go generate (SKIP_GENERATE=1)"
else
    info_msg "步骤 1/4: 执行 go generate ./..."
    if ! go generate ./... 2>&1; then
        echo ""
        error_exit "go generate 执行失败！
        
可能的解决方案：
1. 检查 Wire 依赖注入配置是否正确
2. 确保所有必要的 provider 都已定义
3. 运行 'go mod tidy' 确保依赖完整
4. 如果是已知问题且不影响核心功能，可以临时跳过：
   SKIP_GENERATE=1 git commit -m '你的提交信息'

详细错误信息请查看上面的输出。"
    fi
    success_msg "go generate 执行成功"
fi

# 2. 代码格式化检查和自动修复
info_msg "步骤 2/4: 检查代码格式..."

# 查找所有需要格式化的Go文件
UNFORMATTED_FILES=$(go fmt ./...)
if [ -n "$UNFORMATTED_FILES" ]; then
    warning_msg "以下文件已自动格式化:"
    echo "$UNFORMATTED_FILES"
    
    # 将格式化后的文件添加到暂存区
    for file in $UNFORMATTED_FILES; do
        git add "$file"
    done
    warning_msg "格式化后的文件已自动添加到暂存区"
fi
success_msg "代码格式检查完成"

# 3. 静态分析检查 (go vet)
if [ "$SKIP_VET" = "1" ]; then
    warning_msg "跳过静态分析检查 (SKIP_VET=1)"
else
    info_msg "步骤 3/4: 执行静态分析 (go vet)..."
    if ! go vet ./...; then
        error_exit "go vet 检查发现问题，请修复后重新提交
        
如果这是已知的非关键问题，可以临时跳过：
SKIP_VET=1 git commit -m '你的提交信息'"
    fi
    success_msg "静态分析通过"
fi

# 4. 编译检查
if [ "$SKIP_BUILD" = "1" ]; then
    warning_msg "跳过编译检查 (SKIP_BUILD=1)"
else
    info_msg "步骤 4/4: 执行编译检查..."
    if ! go build -o /tmp/build-check ./...; then
        error_exit "代码编译失败，请修复编译错误后重新提交
        
如果这是已知的依赖问题，可以临时跳过：
SKIP_BUILD=1 git commit -m '你的提交信息'"
    fi

    # 清理临时文件
    rm -f /tmp/build-check
    success_msg "编译检查通过"
fi

# 检查是否有新的文件需要添加到暂存区（由于go generate可能生成新文件）
GENERATED_FILES=$(git ls-files --others --exclude-standard | grep '\.go$')
if [ -n "$GENERATED_FILES" ]; then
    warning_msg "发现新生成的Go文件:"
    echo "$GENERATED_FILES"
    warning_msg "请检查这些文件是否应该被提交，如需要请手动 git add"
fi

success_msg "所有检查通过，准备提交"
exit 0