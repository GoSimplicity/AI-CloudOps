// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Bamboo Team",
            "url": "https://github.com/GoSimplicity/AI-CloudOps",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/apis/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的API接口信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "创建API",
                "parameters": [
                    {
                        "description": "创建API请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateApiRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/apis/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID删除指定的API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "删除API",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "API ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/apis/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定API的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取API详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "API ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/apis/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取系统中的API列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取API列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API名称模糊搜索",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API路径模糊搜索",
                        "name": "path",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Api"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/apis/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取系统API相关的统计数据",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取API统计信息",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/apis/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定API的信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "更新API",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "API ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新API请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateApiRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/archive": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将指定时间范围的审计日志进行归档处理",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "归档审计日志",
                "parameters": [
                    {
                        "description": "归档请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ArchiveAuditLogsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "归档成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/batch-create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "高性能批量创建多条审计日志记录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "批量创建审计日志",
                "parameters": [
                    {
                        "description": "批量创建审计日志请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AuditLogBatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/batch-delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID列表批量删除审计日志",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "批量删除审计日志",
                "parameters": [
                    {
                        "description": "批量删除请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BatchDeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建一条新的审计日志记录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "创建审计日志",
                "parameters": [
                    {
                        "description": "创建审计日志请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateAuditLogRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定审计日志的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "获取审计日志详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "审计日志ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取系统审计日志列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "获取审计日志列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "用户ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "操作类型",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "开始时间",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "结束时间",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.AuditLog"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据条件搜索审计日志记录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "搜索审计日志",
                "parameters": [
                    {
                        "type": "string",
                        "description": "关键字",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "用户名",
                        "name": "user_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IP地址",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "操作类型",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "开始时间",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "结束时间",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "搜索成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.AuditLog"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取审计日志相关的统计数据",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "获取审计统计信息",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/types": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取系统支持的所有审计类型",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "获取审计类型列表",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/audit/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID删除指定的审计日志",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "审计管理"
                ],
                "summary": "删除审计日志",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "审计日志ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/clusters/batch_delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "同时从系统中移除多个Kubernetes集群配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "集群管理"
                ],
                "summary": "批量删除K8s集群",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/clusters/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "添加新的Kubernetes集群到系统，需要提供kubeconfig文件或者连接信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "集群管理"
                ],
                "summary": "创建K8s集群配置",
                "parameters": [
                    {
                        "description": "集群创建信息",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sCluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/clusters/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "从系统中移除指定的Kubernetes集群配置（不会影响实际集群）",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "集群管理"
                ],
                "summary": "删除K8s集群",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/clusters/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "查询所有可用的Kubernetes集群，包括集群状态、版本信息和连接情况",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "集群管理"
                ],
                "summary": "获取所有K8s集群列表",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/clusters/refresh/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "重新检测指定Kubernetes集群的连接状态和基本信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "集群管理"
                ],
                "summary": "刷新K8s集群状态",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "刷新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/clusters/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "修改指定Kubernetes集群的配置信息，包括kubeconfig、描述等",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "集群管理"
                ],
                "summary": "更新K8s集群配置",
                "parameters": [
                    {
                        "description": "集群更新信息",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sCluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/clusters/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID获取指定Kubernetes集群的详细信息，包括节点数量、资源统计等",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "集群管理"
                ],
                "summary": "获取K8s集群详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/configmaps/batch": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量删除指定命名空间中的多个ConfigMap",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "配置管理"
                ],
                "summary": "批量删除ConfigMap",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sBatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "批量删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/configmaps/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "在指定集群和命名空间中创建新的ConfigMap",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "配置管理"
                ],
                "summary": "创建ConfigMap",
                "parameters": [
                    {
                        "description": "ConfigMap创建请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ConfigMapCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "409": {
                        "description": "ConfigMap已存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/configmaps/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群和命名空间获取ConfigMap列表，支持标签和字段选择器过滤",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "配置管理"
                ],
                "summary": "获取ConfigMap列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间，为空时获取所有命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "限制结果数量",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "分页续订令牌",
                        "name": "continue",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sConfigMap"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/configmaps/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的ConfigMap配置数据",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "配置管理"
                ],
                "summary": "更新ConfigMap",
                "parameters": [
                    {
                        "description": "ConfigMap更新请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ConfigMapUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "ConfigMap不存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/configmaps/{cluster_id}/{namespace}/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID、命名空间和名称获取指定ConfigMap的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "配置管理"
                ],
                "summary": "获取ConfigMap详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ConfigMap名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sConfigMap"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "ConfigMap不存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的ConfigMap资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "配置管理"
                ],
                "summary": "删除ConfigMap",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ConfigMap名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "ConfigMap不存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/configmaps/{cluster_id}/{namespace}/{name}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定ConfigMap的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "配置管理"
                ],
                "summary": "获取ConfigMap的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ConfigMap名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "ConfigMap不存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/batch_delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量删除指定命名空间中的多个DaemonSet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "批量删除DaemonSet",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sDaemonSetBatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功批量删除DaemonSet",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/batch_restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量重启指定的多个DaemonSet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "批量重启DaemonSet",
                "parameters": [
                    {
                        "description": "批量重启请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sDaemonSetBatchRestartReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功批量重启DaemonSet",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的DaemonSet资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "创建DaemonSet",
                "parameters": [
                    {
                        "description": "DaemonSet创建请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sDaemonSetCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功创建DaemonSet",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的DaemonSet资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "删除DaemonSet",
                "parameters": [
                    {
                        "description": "DaemonSet删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sDaemonSetDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功删除DaemonSet",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据查询条件获取K8s集群中的DaemonSet列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "获取DaemonSet列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID，必填",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "节点名称过滤",
                        "name": "node_name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页大小",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "状态过滤",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取DaemonSet列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sDaemonSetEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "重启指定的DaemonSet资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "重启DaemonSet",
                "parameters": [
                    {
                        "description": "DaemonSet重启请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sDaemonSetRestartReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功重启DaemonSet",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的DaemonSet资源配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "更新DaemonSet",
                "parameters": [
                    {
                        "description": "DaemonSet更新请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sDaemonSetUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功更新DaemonSet",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/{cluster_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据指定的命名空间获取K8s集群中的DaemonSet列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "根据命名空间获取DaemonSet列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间，为空则获取所有命名空间",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取DaemonSet列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sDaemonSetEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/{cluster_id}/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定DaemonSet的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "获取DaemonSet详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DaemonSet名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取DaemonSet详情",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sDaemonSetEntity"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/{cluster_id}/{name}/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定DaemonSet相关的事件信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "获取DaemonSet事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DaemonSet名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "限制天数内的事件",
                        "name": "limit_days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEvent"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/{cluster_id}/{name}/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定DaemonSet的历史版本信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "获取DaemonSet历史版本",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DaemonSet名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取历史版本",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sResourceHistory"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/{cluster_id}/{name}/node-pods": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定DaemonSet在指定节点上运行的Pod列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "获取DaemonSet在指定节点的Pod",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DaemonSet名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "节点名称",
                        "name": "node_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Pod列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sPod"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/daemonsets/{cluster_id}/{name}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定DaemonSet的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DaemonSet管理"
                ],
                "summary": "获取DaemonSet的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DaemonSet名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取YAML配置",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/deployments/batch_delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量删除指定命名空间中的多个Deployment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "部署管理"
                ],
                "summary": "批量删除部署",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeploymentBatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功批量删除部署",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/deployments/batch_restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量重启指定的多个Deployment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "部署管理"
                ],
                "summary": "批量重启部署",
                "parameters": [
                    {
                        "description": "批量重启请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeploymentBatchRestartReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功批量重启部署",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/deployments/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的Deployment资源配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "部署管理"
                ],
                "summary": "更新部署",
                "parameters": [
                    {
                        "description": "部署更新请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sDeploymentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功更新部署",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/deployments/{cluster_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据指定的命名空间获取K8s集群中的Deployment列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "部署管理"
                ],
                "summary": "根据命名空间获取部署列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间，为空则获取所有命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "限制结果数量",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取部署列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/deployments/{cluster_id}/{resource_name}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定命名空间中的单个Deployment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "部署管理"
                ],
                "summary": "删除部署",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "部署名称",
                        "name": "resource_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功删除部署",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/deployments/{cluster_id}/{resource_name}/restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "重启指定命名空间中的单个Deployment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "部署管理"
                ],
                "summary": "重启部署",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "部署名称",
                        "name": "resource_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功重启部署",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/deployments/{cluster_id}/{resource_name}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Deployment的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "部署管理"
                ],
                "summary": "获取部署的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "部署名称",
                        "name": "resource_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取YAML配置",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/by-deployment": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Deployment的相关事件列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "获取Deployment相关事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deployment名称",
                        "name": "deployment_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEventEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/by-node": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Node的相关事件列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "获取Node相关事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Node名称",
                        "name": "node_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEventEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/by-object": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据指定的Kubernetes对象获取相关的事件列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "根据对象获取相关事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID，必填",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "限制天数内的事件",
                        "name": "limit_days",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "对象类型，必填",
                        "name": "object_kind",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "对象名称，必填",
                        "name": "object_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "对象UID，可选",
                        "name": "object_uid",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEventEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/by-pod": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Pod的相关事件列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "获取Pod相关事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod名称",
                        "name": "pod_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEventEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/by-service": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Service的相关事件列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "获取Service相关事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service名称",
                        "name": "service_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEventEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/cleanup": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "清理指定条件下的旧事件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "清理旧事件",
                "parameters": [
                    {
                        "description": "事件清理请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sEventCleanupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功清理旧事件",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sEventCleanupResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据查询条件获取K8s集群中的Event列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "获取Event列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID，必填",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "结束时间",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "事件类型过滤 (Normal/Warning)",
                        "name": "event_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "相关对象类型",
                        "name": "involved_object_kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "相关对象名称",
                        "name": "involved_object_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "限制天数内的事件",
                        "name": "limit_days",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页大小",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "事件原因过滤",
                        "name": "reason",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "严重程度过滤",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "事件来源过滤",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "开始时间",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "事件类型过滤",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Event列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEventEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定条件下的事件统计信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "获取事件统计",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID，必填",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "统计天数",
                        "name": "limit_days",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件统计",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sEventStatistics"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/timeline": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定条件下的事件时间线",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "获取事件时间线",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID，必填",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "结束时间",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "时间粒度",
                        "name": "granularity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "相关对象类型",
                        "name": "involved_object_kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "相关对象名称",
                        "name": "involved_object_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "开始时间",
                        "name": "start_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件时间线",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEventTimelineItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/{cluster_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据指定的命名空间获取K8s集群中的Event列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "根据命名空间获取Event列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间，为空则获取所有命名空间",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Event列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEventEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/events/{cluster_id}/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Event的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event管理"
                ],
                "summary": "获取Event详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Event详情",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sEventEntity"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/batch_delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量删除指定命名空间中的多个Ingress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "批量删除Ingress",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sIngressBatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功批量删除Ingress",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的Ingress资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "创建Ingress",
                "parameters": [
                    {
                        "description": "Ingress创建请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sIngressCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功创建Ingress",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的Ingress资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "删除Ingress",
                "parameters": [
                    {
                        "description": "Ingress删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sIngressDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功删除Ingress",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据查询条件获取K8s集群中的Ingress列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "获取Ingress列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID，必填",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "主机名过滤",
                        "name": "host",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Ingress类名过滤",
                        "name": "ingress_class_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页大小",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "状态过滤",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Ingress列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sIngressEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的Ingress资源配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "更新Ingress",
                "parameters": [
                    {
                        "description": "Ingress更新请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sIngressUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功更新Ingress",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/{cluster_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据指定的命名空间获取K8s集群中的Ingress列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "根据命名空间获取Ingress列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间，为空则获取所有命名空间",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Ingress列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sIngressEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/{cluster_id}/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Ingress的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "获取Ingress详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ingress名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Ingress详情",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sIngressEntity"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/{cluster_id}/{name}/backend-health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "检查指定Ingress后端服务的健康状态",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "检查Ingress后端健康状态",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ingress名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取后端健康状态",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sBackendHealth"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/{cluster_id}/{name}/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Ingress相关的事件信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "获取Ingress事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ingress名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "限制天数内的事件",
                        "name": "limit_days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEvent"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/{cluster_id}/{name}/tls-test": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "测试指定Ingress的TLS证书有效性",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "测试Ingress TLS证书",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ingress名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TLS测试请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sIngressTLSTestReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取TLS测试结果",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sTLSTestResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/ingresses/{cluster_id}/{name}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Ingress的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ingress管理"
                ],
                "summary": "获取Ingress的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ingress名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取YAML配置",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/namespaces/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "在指定的Kubernetes集群中创建新的命名空间",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "命名空间管理"
                ],
                "summary": "创建新的命名空间",
                "parameters": [
                    {
                        "description": "创建命名空间请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateNamespaceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/namespaces/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "从指定的Kubernetes集群中删除命名空间",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "命名空间管理"
                ],
                "summary": "删除指定的命名空间",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间名称",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/namespaces/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有集群的命名空间列表，用于级联选择器展示",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "命名空间管理"
                ],
                "summary": "获取级联选择的命名空间列表",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.ClusterNamespaces"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/namespaces/select/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID获取该集群下的所有命名空间列表，用于选择器展示",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "命名空间管理"
                ],
                "summary": "获取指定集群的命名空间列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Namespace"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/namespaces/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定集群中某个命名空间的标签和注解",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "命名空间管理"
                ],
                "summary": "更新命名空间",
                "parameters": [
                    {
                        "description": "更新命名空间请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateNamespaceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/namespaces/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定集群中某个命名空间的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "命名空间管理"
                ],
                "summary": "获取命名空间详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间名称",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/namespaces/{id}/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定集群中某个命名空间下的所有事件列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "命名空间管理"
                ],
                "summary": "获取命名空间事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间名称",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Event"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/namespaces/{id}/resources": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定集群中某个命名空间下的所有资源列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "命名空间管理"
                ],
                "summary": "获取命名空间资源",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间名称",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Resource"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/nodes/labels/add": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "为指定的K8s节点添加标签，支持批量操作",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "节点管理"
                ],
                "summary": "为节点添加标签",
                "parameters": [
                    {
                        "description": "添加标签请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LabelK8sNodesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功添加标签",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/nodes/labels/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定K8s节点的标签，支持批量操作",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "节点管理"
                ],
                "summary": "删除节点标签",
                "parameters": [
                    {
                        "description": "删除标签请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LabelK8sNodesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功删除标签",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/nodes/list/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID获取指定K8s集群中的所有节点列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "节点管理"
                ],
                "summary": "获取集群节点列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取节点列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sNode"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/nodes/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据节点名称获取指定节点的详细信息，包括状态、资源使用情况等",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "节点管理"
                ],
                "summary": "获取节点详细信息",
                "parameters": [
                    {
                        "type": "string",
                        "description": "节点名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取节点详情",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pods/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定命名空间中的Pod",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pod管理"
                ],
                "summary": "删除Pod",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod名称",
                        "name": "podName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功删除Pod",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pods/{cluster_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据指定的命名空间获取K8s集群中的Pod列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pod管理"
                ],
                "summary": "根据命名空间获取Pod列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间，为空则获取所有命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "限制结果数量",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Pod列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pods/{id}/node": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定节点上运行的所有Pod列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pod管理"
                ],
                "summary": "根据节点名获取Pod列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "节点名称",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取Pod列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pods/{id}/{podName}/containers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Pod的所有容器信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pod管理"
                ],
                "summary": "获取Pod的容器列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod名称",
                        "name": "podName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取容器列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pods/{id}/{podName}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Pod的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pod管理"
                ],
                "summary": "获取Pod的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod名称",
                        "name": "podName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取YAML配置",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pods/{id}/{podName}/{container}/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Pod中容器的运行日志",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pod管理"
                ],
                "summary": "获取容器日志",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod名称",
                        "name": "podName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "容器名称",
                        "name": "container",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取容器日志",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/batch_delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量删除指定命名空间中的多个PVC",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "批量删除PVC",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVCBatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功批量删除PVC",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的PVC资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "创建PVC",
                "parameters": [
                    {
                        "description": "PVC创建请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVCCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功创建PVC",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的PVC资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "删除PVC",
                "parameters": [
                    {
                        "description": "PVC删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVCDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功删除PVC",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据查询条件获取K8s集群中的PVC列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "获取PVC列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "访问模式过滤",
                        "name": "access_mode",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "集群ID，必填",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页大小",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "状态过滤",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "存储类过滤",
                        "name": "storage_class",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取PVC列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sPVCEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的PVC资源配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "更新PVC",
                "parameters": [
                    {
                        "description": "PVC更新请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVCUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功更新PVC",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/{cluster_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据指定的命名空间获取K8s集群中的PVC列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "根据命名空间获取PVC列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间，为空则获取所有命名空间",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取PVC列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sPVCEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/{cluster_id}/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定PVC的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "获取PVC详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PVC名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取PVC详情",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sPVCEntity"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/{cluster_id}/{name}/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定PVC相关的事件信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "获取PVC事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PVC名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "限制天数内的事件",
                        "name": "limit_days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEvent"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/{cluster_id}/{name}/expand": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "扩容指定的PVC资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "扩容PVC",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PVC名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PVC扩容请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVCExpandReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功扩容PVC",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/{cluster_id}/{name}/usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定PVC的使用情况信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "获取PVC使用情况",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PVC名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取使用情况",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sPVCUsageInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvcs/{cluster_id}/{name}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定PVC的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PVC管理"
                ],
                "summary": "获取PVC的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PVC名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取YAML配置",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/batch_delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量删除多个PV资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "批量删除PV",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVBatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功批量删除PV",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的PV资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "创建PV",
                "parameters": [
                    {
                        "description": "PV创建请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功创建PV",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的PV资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "删除PV",
                "parameters": [
                    {
                        "description": "PV删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功删除PV",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据查询条件获取K8s集群中的PV列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "获取PV列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "访问模式过滤",
                        "name": "access_mode",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "集群ID，必填",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页大小",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "回收策略过滤",
                        "name": "reclaim_policy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "状态过滤",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "存储类过滤",
                        "name": "storage_class",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取PV列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sPVEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的PV资源配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "更新PV",
                "parameters": [
                    {
                        "description": "PV更新请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功更新PV",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/{cluster_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据指定的集群获取K8s集群中的PV列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "根据集群获取PV列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取PV列表",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sPVEntity"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/{cluster_id}/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定PV的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "获取PV详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PV名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取PV详情",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sPVEntity"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/{cluster_id}/{name}/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定PV相关的事件信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "获取PV事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PV名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "限制天数内的事件",
                        "name": "limit_days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取事件",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sEvent"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/{cluster_id}/{name}/reclaim": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "手动回收指定的PV资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "回收PV",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PV名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PV回收请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sPVReclaimReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功回收PV",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/{cluster_id}/{name}/usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定PV的使用情况信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "获取PV使用情况",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PV名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取使用情况",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sPVUsageInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/pvs/{cluster_id}/{name}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定PV的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PV管理"
                ],
                "summary": "获取PV的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PV名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功获取YAML配置",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/secrets/batch": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量删除指定命名空间中的多个Secret",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "密钥管理"
                ],
                "summary": "批量删除Secret",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sBatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "批量删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/secrets/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "在指定集群和命名空间中创建新的Secret",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "密钥管理"
                ],
                "summary": "创建Secret",
                "parameters": [
                    {
                        "description": "Secret创建请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SecretCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "409": {
                        "description": "Secret已存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/secrets/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群和命名空间获取Secret列表，支持标签和字段选择器过滤",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "密钥管理"
                ],
                "summary": "获取Secret列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间，为空时获取所有命名空间",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "标签选择器",
                        "name": "label_selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "字段选择器",
                        "name": "field_selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "限制结果数量",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "分页续订令牌",
                        "name": "continue",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sSecret"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/secrets/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的Secret配置数据",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "密钥管理"
                ],
                "summary": "更新Secret",
                "parameters": [
                    {
                        "description": "Secret更新请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SecretUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Secret不存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/secrets/{cluster_id}/{namespace}/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID、命名空间和名称获取指定Secret的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "密钥管理"
                ],
                "summary": "获取Secret详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Secret名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sSecret"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Secret不存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的Secret资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "密钥管理"
                ],
                "summary": "删除Secret",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Secret名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Secret不存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/secrets/{cluster_id}/{namespace}/{name}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定Secret的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "密钥管理"
                ],
                "summary": "获取Secret的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Secret名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Secret不存在",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/services/batch_delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据提供的Service名称列表批量删除指定命名空间下的多个Service资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "服务管理"
                ],
                "summary": "批量删除Service资源",
                "parameters": [
                    {
                        "description": "批量删除Service请求参数",
                        "name": "serviceRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sServiceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "批量删除Service成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/services/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID、命名空间和Service名称删除指定的Service资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "服务管理"
                ],
                "summary": "删除Service资源",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间名称",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service名称",
                        "name": "svcName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除Service成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/services/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据提供的Service配置信息更新指定的Service资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "服务管理"
                ],
                "summary": "更新Service资源",
                "parameters": [
                    {
                        "description": "Service更新请求参数",
                        "name": "serviceRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sServiceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新Service成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/services/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID和命名空间获取该命名空间下的所有Service资源列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "服务管理"
                ],
                "summary": "获取命名空间下的Service列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间名称",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取Service列表成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/services/{id}/{svcName}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID、命名空间和Service名称获取指定Service的YAML配置信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "服务管理"
                ],
                "summary": "获取Service的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service名称",
                        "name": "svcName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间名称",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取Service YAML配置成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/statefulsets/batch": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量删除指定命名空间中的多个StatefulSet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工作负载管理"
                ],
                "summary": "批量删除StatefulSet",
                "parameters": [
                    {
                        "description": "批量删除请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sBatchDeleteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "批量删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/statefulsets/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "在指定集群和命名空间中创建新的StatefulSet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工作负载管理"
                ],
                "summary": "创建StatefulSet",
                "parameters": [
                    {
                        "description": "StatefulSet创建请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.StatefulSetCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/statefulsets/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群和命名空间获取StatefulSet列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工作负载管理"
                ],
                "summary": "获取StatefulSet列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sStatefulSet"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/k8s/statefulsets/scale": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "调整StatefulSet的副本数量",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工作负载管理"
                ],
                "summary": "扩缩容StatefulSet",
                "parameters": [
                    {
                        "description": "StatefulSet扩缩容请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.StatefulSetScaleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "扩缩容成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/statefulsets/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的StatefulSet配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工作负载管理"
                ],
                "summary": "更新StatefulSet",
                "parameters": [
                    {
                        "description": "StatefulSet更新请求",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.StatefulSetUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/statefulsets/{cluster_id}/{namespace}/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID、命名空间和名称获取指定StatefulSet的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工作负载管理"
                ],
                "summary": "获取StatefulSet详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "StatefulSet名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.K8sStatefulSet"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的StatefulSet资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工作负载管理"
                ],
                "summary": "删除StatefulSet",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "StatefulSet名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/statefulsets/{cluster_id}/{namespace}/{name}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定StatefulSet的完整YAML配置文件",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工作负载管理"
                ],
                "summary": "获取StatefulSet的YAML配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "命名空间",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "StatefulSet名称",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/k8s/taints/add": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "为指定的Kubernetes节点添加或更新污点配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "污点管理"
                ],
                "summary": "为节点添加污点",
                "parameters": [
                    {
                        "description": "添加污点请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TaintK8sNodesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "添加成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/taints/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定Kubernetes节点的污点配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "污点管理"
                ],
                "summary": "删除节点污点",
                "parameters": [
                    {
                        "description": "删除污点请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TaintK8sNodesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/taints/drain": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "驱逐指定Kubernetes节点上的所有Pod，为节点维护做准备",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "污点管理"
                ],
                "summary": "清空节点Pod",
                "parameters": [
                    {
                        "description": "清空Pod请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.K8sClusterNodesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "清空成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/taints/enable_switch": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "批量启用或禁用Kubernetes节点的调度功能",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "污点管理"
                ],
                "summary": "启用或禁用节点调度",
                "parameters": [
                    {
                        "description": "节点调度切换请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ScheduleK8sNodesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "操作成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/taints/taint_check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "验证节点污点的YAML配置是否正确",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "污点管理"
                ],
                "summary": "检查污点YAML配置",
                "parameters": [
                    {
                        "description": "污点YAML检查请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TaintK8sNodesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "检查成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_tasks/apply/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据任务 ID 应用指定的 YAML 任务到 Kubernetes 集群",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML任务管理"
                ],
                "summary": "应用 YAML 任务",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "YAML 任务 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "应用 YAML 任务成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_tasks/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据提供的参数创建一个新的 YAML 任务",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML任务管理"
                ],
                "summary": "创建新的 YAML 任务",
                "parameters": [
                    {
                        "description": "YAML 任务信息",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.YamlTaskCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建 YAML 任务成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_tasks/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据任务 ID 删除指定的 YAML 任务",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML任务管理"
                ],
                "summary": "删除 YAML 任务",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "YAML 任务 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除 YAML 任务成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_tasks/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有的 YAML 任务列表信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML任务管理"
                ],
                "summary": "获取 YAML 任务列表",
                "responses": {
                    "200": {
                        "description": "获取 YAML 任务列表成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sYamlTask"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_tasks/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据提供的参数更新指定的 YAML 任务信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML任务管理"
                ],
                "summary": "更新 YAML 任务",
                "parameters": [
                    {
                        "description": "YAML 任务更新信息",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.YamlTaskUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新 YAML 任务成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_templates/check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "验证YAML模板格式的正确性和可用性",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML模板管理"
                ],
                "summary": "检查 YAML 模板",
                "parameters": [
                    {
                        "description": "YAML模板信息",
                        "name": "template",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.YamlTemplateCheckReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "检查成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_templates/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "在指定集群中创建一个新的YAML模板",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML模板管理"
                ],
                "summary": "创建新的 YAML 模板",
                "parameters": [
                    {
                        "description": "YAML模板信息",
                        "name": "template",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.YamlTemplateCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_templates/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID删除指定的YAML模板",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML模板管理"
                ],
                "summary": "删除 YAML 模板",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "模板ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_templates/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据集群ID获取该集群下的所有YAML模板列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML模板管理"
                ],
                "summary": "获取 YAML 模板列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.K8sYamlTemplate"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_templates/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定ID的YAML模板信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML模板管理"
                ],
                "summary": "更新 YAML 模板",
                "parameters": [
                    {
                        "description": "YAML模板信息",
                        "name": "template",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.YamlTemplateUpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/k8s/yaml_templates/{id}/yaml": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定YAML模板的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "YAML模板管理"
                ],
                "summary": "获取 YAML 模板详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "模板ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "集群ID",
                        "name": "cluster_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_events/claim/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "认领指定的告警事件，表示该告警由当前用户处理",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警事件管理"
                ],
                "summary": "认领告警事件",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "告警事件ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "认领信息",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EventAlertClaimReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_events/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取监控告警事件列表，支持分页和条件查询",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警事件管理"
                ],
                "summary": "获取告警事件列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "告警状态",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "告警级别",
                        "name": "severity",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_events/silence/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将指定的告警事件设置为静默状态，静默期间不会发送通知",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警事件管理"
                ],
                "summary": "告警事件静默",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "告警事件ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "静默配置",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EventAlertSilenceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_events/unsilence/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "取消指定告警事件的静默状态，恢复告警通知",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警事件管理"
                ],
                "summary": "取消告警事件静默",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "告警事件ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "取消静默信息",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EventAlertUnSilenceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_manager_pools/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的AlertManager集群池配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "创建AlertManager集群池",
                "parameters": [
                    {
                        "description": "创建请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorAlertManagerPoolReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_manager_pools/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定ID的AlertManager集群池",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "删除AlertManager集群池",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群池ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_manager_pools/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定AlertManager集群池的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "获取AlertManager集群池详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群池ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_manager_pools/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有AlertManager集群池的分页列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "获取AlertManager集群池列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_manager_pools/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的AlertManager集群池配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "更新AlertManager集群池",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "集群池ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMonitorAlertManagerPoolReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_rules/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的监控告警规则配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "创建告警规则",
                "parameters": [
                    {
                        "description": "创建告警规则请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorAlertRuleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_rules/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定ID的监控告警规则",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "删除告警规则",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "告警规则ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_rules/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定告警规则的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "获取告警规则详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "告警规则ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_rules/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有监控告警规则的分页列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "获取告警规则列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_rules/promql_check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "检查和验证PromQL表达式的语法正确性",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "验证PromQL表达式",
                "parameters": [
                    {
                        "description": "PromQL表达式检查请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PromqlAlertRuleExprCheckReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "检查成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/alert_rules/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的监控告警规则配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "更新告警规则",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "告警规则ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新告警规则请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMonitorAlertRuleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/configs/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的监控配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "监控配置"
                ],
                "summary": "创建监控配置",
                "parameters": [
                    {
                        "description": "创建监控配置请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorConfigReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/configs/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定ID的监控配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "监控配置"
                ],
                "summary": "删除监控配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "监控配置ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/configs/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定监控配置的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "监控配置"
                ],
                "summary": "获取监控配置详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "监控配置ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/configs/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有监控配置的分页列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "监控配置"
                ],
                "summary": "获取监控配置列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/configs/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的监控配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "监控配置"
                ],
                "summary": "更新监控配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "监控配置ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新监控配置请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMonitorConfigReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/changes": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "为指定的值班组创建换班记录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "创建换班记录",
                "parameters": [
                    {
                        "description": "创建换班记录请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorOnDutyGroupChangeReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/changes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定值班组的换班记录列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "获取换班记录列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "值班组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的值班组配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "创建值班组",
                "parameters": [
                    {
                        "description": "创建值班组请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorOnDutyGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定ID的值班组",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "删除值班组",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "值班组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定值班组的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "获取值班组详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "值班组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/future_plan/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定值班组的未来值班计划安排",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "获取值班计划",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "值班组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 30,
                        "description": "获取天数",
                        "name": "days",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/history/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定值班组的历史值班记录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "获取值班历史",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "值班组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有值班组的分页列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "获取值班组列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/onduty_groups/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的值班组配置信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "值班管理"
                ],
                "summary": "更新值班组",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "值班组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新值班组请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMonitorOnDutyGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/record_rules/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的监控预聚合规则配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "规则管理"
                ],
                "summary": "创建预聚合规则",
                "parameters": [
                    {
                        "description": "创建预聚合规则请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorRecordRuleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/record_rules/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定ID的监控预聚合规则",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "规则管理"
                ],
                "summary": "删除预聚合规则",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "预聚合规则ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/record_rules/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定预聚合规则的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "规则管理"
                ],
                "summary": "获取预聚合规则详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "预聚合规则ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/record_rules/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有预聚合规则的分页列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "规则管理"
                ],
                "summary": "获取预聚合规则列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/record_rules/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的监控预聚合规则配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "规则管理"
                ],
                "summary": "更新预聚合规则",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "预聚合规则ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新预聚合规则请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMonitorRecordRuleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_jobs/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的监控采集任务配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "创建采集任务",
                "parameters": [
                    {
                        "description": "创建采集任务请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorScrapeJobReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_jobs/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定ID的监控采集任务",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "删除采集任务",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "采集任务ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_jobs/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定监控采集任务的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "获取采集任务详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "采集任务ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_jobs/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有监控采集任务的分页列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "获取采集任务列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_jobs/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的监控采集任务配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "更新采集任务",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "采集任务ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新采集任务请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMonitorScrapeJobReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_pools/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的监控采集池配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "创建采集池",
                "parameters": [
                    {
                        "description": "创建采集池请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorScrapePoolReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_pools/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定ID的监控采集池",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "删除采集池",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "采集池ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_pools/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定监控采集池的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "获取采集池详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "采集池ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_pools/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有监控采集池的分页列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "获取采集池列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/scrape_pools/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的监控采集池配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "采集管理"
                ],
                "summary": "更新采集池",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "采集池ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新采集池请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMonitorScrapePoolReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/send_groups/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的告警发送组配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "创建发送组",
                "parameters": [
                    {
                        "description": "创建发送组请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMonitorSendGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/send_groups/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定ID的告警发送组",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "删除发送组",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "发送组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/send_groups/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定发送组的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "获取发送组详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "发送组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/send_groups/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取所有发送组的分页列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "获取发送组列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/monitor/send_groups/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的告警发送组配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "告警管理"
                ],
                "summary": "更新发送组",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "发送组ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新发送组请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMonitorSendGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/not_auth/getBindIps": {
            "get": {
                "description": "根据端口与服务树节点ID获取Prometheus HTTP服务发现配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "非认证接口"
                ],
                "summary": "获取绑定IP地址",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "端口",
                        "name": "port",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "逗号分隔的树节点ID",
                        "name": "tree_node_ids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "成功返回服务发现配置",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/apis/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定角色的所有API权限列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取角色API权限",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "角色ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Api"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/assign-apis": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "为指定角色分配多个API权限",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "为角色分配API权限",
                "parameters": [
                    {
                        "description": "分配API权限请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AssignRoleApiRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "分配成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/assign_users": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "为指定用户分配多个角色",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "为用户分配角色",
                "parameters": [
                    {
                        "description": "为用户分配角色请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AssignRolesToUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "分配成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/check_permission": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "检查用户对指定API路径和方法是否有访问权限",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "检查用户权限",
                "parameters": [
                    {
                        "description": "检查权限请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CheckUserPermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "检查成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的系统角色",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "创建角色",
                "parameters": [
                    {
                        "description": "创建角色请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID删除指定的角色",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "删除角色",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "角色ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取指定角色的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取角色详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "角色ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取系统中的角色列",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取角色列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "角色名称模糊搜索",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Role"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/revoke-apis": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "撤销指定角色的多个API权限",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "撤销角色API权限",
                "parameters": [
                    {
                        "description": "撤销API权限请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RevokeRoleApiRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "撤销成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/revoke_users": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "撤销指定用户的多个角色",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "撤销用户角色",
                "parameters": [
                    {
                        "description": "撤销用户角色请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RevokeRolesFromUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "撤销成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定角色的信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "更新角色",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "角色ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新角色请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/user_permissions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定用户的所有API权限列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取用户所有权限",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "用户ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Api"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/user_roles/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定用户的所有角色列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取用户角色列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "用户ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Role"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/role/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定角色下的所有用户列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取角色用户列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "角色ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/system/info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取当前运行平台的系统硬件信息，用于平台欢迎页面展示",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取系统信息",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.SystemInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/system/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取系统的CPU、内存、磁盘、网络等性能指标",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "获取系统性能指标",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.SystemInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/system/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "立即刷新并更新系统硬件信息到数据库",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "系统管理"
                ],
                "summary": "刷新系统信息",
                "responses": {
                    "200": {
                        "description": "刷新成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.SystemInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/local/bind/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将本地资源绑定到指定节点",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "本地资源树管理"
                ],
                "summary": "绑定本地资源",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "资源ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "绑定本地资源请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BindTreeLocalResourceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "绑定成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/local/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的本地资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "本地资源树管理"
                ],
                "summary": "创建本地资源",
                "parameters": [
                    {
                        "description": "创建本地资源请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateTreeLocalResourceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/local/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID删除本地资源",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "本地资源树管理"
                ],
                "summary": "删除本地资源",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "资源ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/local/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取本地资源的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "本地资源树管理"
                ],
                "summary": "获取本地资源详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "资源ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.TreeLocalResource"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/local/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取完整的树结构节点列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "本地资源树管理"
                ],
                "summary": "获取树节点列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "节点类型",
                        "name": "node_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.TreeLocalResource"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/local/terminal/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "通过WebSocket连接到指定本地资源的终端",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "本地资源树管理"
                ],
                "summary": "连接终端",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "资源ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "WebSocket连接成功",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/local/unbind/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将本地资源从节点解绑",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "本地资源树管理"
                ],
                "summary": "解绑本地资源",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "资源ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "解绑本地资源请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UnBindTreeLocalResourceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "解绑成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/local/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID更新本地资源信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "本地资源树管理"
                ],
                "summary": "更新本地资源",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "资源ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新本地资源请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateTreeLocalResourceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/children/{id}": {
            "get": {
                "tags": [
                    "资源树管理"
                ],
                "summary": "获取直接子节点列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "父节点ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.TreeNode"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/tree/node/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的树节点",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "创建节点",
                "parameters": [
                    {
                        "description": "创建节点请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateTreeNodeReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的树节点",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "删除节点",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "节点ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据节点ID获取节点的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "获取节点详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "节点ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取完整的树结构节点列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "获取树节点列表",
                "parameters": [
                    {
                        "type": "string",
                        "description": "搜索关键词（匹配名称/描述）",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.TreeNode"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/member/add": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "向指定节点添加成员",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "添加节点成员",
                "parameters": [
                    {
                        "description": "添加节点成员请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddTreeNodeMemberReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "添加成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/member/remove/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "从指定节点移除成员",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "移除节点成员",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "节点ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "移除节点成员请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RemoveTreeNodeMemberReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "移除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/members/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定节点的成员列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "获取节点成员",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "节点ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "成员类型(1:admin,2:member,省略/其他:all)",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/move/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将节点移动到新的父节点下",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "移动节点",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "节点ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "移动节点请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.MoveTreeNodeReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "移动成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/resource/bind": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将资源绑定到指定节点",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "绑定资源",
                "parameters": [
                    {
                        "description": "绑定资源请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BindTreeNodeResourceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "绑定成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/resource/unbind": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将资源从节点解绑",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "解绑资源",
                "parameters": [
                    {
                        "description": "解绑资源请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UnbindTreeNodeResourceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "解绑成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/tree/node/statistics": {
            "get": {
                "tags": [
                    "资源树管理"
                ],
                "summary": "获取服务树统计信息",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.TreeNodeStatisticsResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/tree/node/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定节点的信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "资源树管理"
                ],
                "summary": "更新节点",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "节点ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新节点请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateTreeNodeReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/change_password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "修改当前登录用户的密码",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "修改用户密码",
                "parameters": [
                    {
                        "description": "修改密码请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChangePasswordReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "修改成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/codes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取当前用户的权限码列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "获取用户权限码",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据用户ID获取用户详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "获取用户详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "用户ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取系统中的用户列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "获取用户列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "用户名模糊搜索",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/login": {
            "post": {
                "description": "用户账号密码登录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "用户登录",
                "parameters": [
                    {
                        "description": "用户登录请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserLoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "登录成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "用户名或密码错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "退出登录并清除令牌",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "用户登出",
                "responses": {
                    "200": {
                        "description": "登出成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取当前登录用户的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "获取用户资料",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/profile/update/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新用户个人信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "更新用户资料",
                "parameters": [
                    {
                        "description": "更新用户信息请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateProfileReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/refresh_token": {
            "post": {
                "description": "使用刷新令牌获取新的访问令牌",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "刷新访问令牌",
                "parameters": [
                    {
                        "description": "刷新令牌请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "刷新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "令牌无效",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/signup": {
            "post": {
                "description": "创建新用户账号",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "用户注册",
                "parameters": [
                    {
                        "description": "用户注册请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserSignUpReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "注册成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取系统用户相关的统计数据",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "获取用户统计信息",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/write_off": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "永久注销用户账号",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "注销用户账号",
                "parameters": [
                    {
                        "description": "注销账号请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.WriteOffReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "注销成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/user/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据用户ID删除用户账号",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户管理"
                ],
                "summary": "删除用户",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "用户ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "请求参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/category/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的工单分类",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "创建工单分类",
                "parameters": [
                    {
                        "description": "创建分类请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderCategoryReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/category/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的工单分类",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "删除工单分类",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "分类ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/category/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取工单分类的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单分类详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "分类ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/category/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单分类列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单分类列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.WorkorderCategory"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/category/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的工单分类信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "更新工单分类",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "分类ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新分类请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateWorkorderCategoryReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/form-design/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的工单表单设计配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "创建工单表单设计",
                "parameters": [
                    {
                        "description": "创建表单设计请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderFormDesignReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/form-design/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的工单表单设计配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "删除工单表单设计",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "表单设计ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/form-design/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定工单表单设计的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单表单设计详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "表单设计ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/form-design/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单表单设计配置列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单表单设计列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "表单设计名称",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/form-design/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的工单表单设计配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "更新工单表单设计",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "表单设计ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新表单设计请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateWorkorderFormDesignReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/actions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取当前工单实例可执行的动作列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取可执行动作",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/approve/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "审批通过指定的工单实例",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "审批通过工单",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "审批意见",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ApproveWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "审批成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/assign/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将工单实例指派给指定处理人",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "指派工单",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "指派请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AssignWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "指派成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/cancel/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "取消指定的工单实例",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "取消工单",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "取消原因",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CancelWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "取消成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/comment/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "为指定工单实例创建新的评论",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "创建工单评论",
                "parameters": [
                    {
                        "description": "创建评论请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderInstanceCommentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/comment/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的工单评论",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "删除工单评论",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "评论 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/comment/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定工单评论的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单评论详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "评论 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/comment/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单评论列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单评论列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "instanceId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/comment/tree/{instanceId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定工单实例的评论树结构，包含父子关系",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单评论树结构",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "instanceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/comment/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的工单评论内容",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "更新工单评论",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "评论 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新评论请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateWorkorderInstanceCommentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/complete/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "完成指定的工单实例",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "完成工单",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "完成说明",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CompleteWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "完成成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的工单实例",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "创建工单实例",
                "parameters": [
                    {
                        "description": "创建工单实例请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/create-from-template/{templateId}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "基于工单模板创建新的工单实例",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "从模板创建工单实例",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "模板ID",
                        "name": "templateId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "创建工单实例请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderInstanceFromTemplateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/current-step/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取工单实例当前流程步骤信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取当前步骤",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.ProcessStep"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的工单实例",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "删除工单实例",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取工单实例的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单实例详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/flow/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定工单流转记录的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单流转记录详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "流转记录ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/flow/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单流转记录列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单流转记录列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "instanceId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单实例列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单实例列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "工单状态",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.WorkorderInstance"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/reject/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "拒绝指定的工单实例",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "拒绝工单",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "拒绝原因",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RejectWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "拒绝成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/return/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "退回指定的工单实例",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "退回工单",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "退回原因",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ReturnWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "退回成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/submit/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "将工单实例提交审批",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "提交工单",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "提交工单请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SubmitWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "提交成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/timeline/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "为指定工单实例创建新的时间线记录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "创建工单时间线记录",
                "parameters": [
                    {
                        "description": "创建时间线记录请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderInstanceTimelineReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/timeline/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定工单时间线记录的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单时间线记录详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "时间线记录ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/timeline/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单时间线记录列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单时间线记录列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "instanceId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/instance/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定工单实例的信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "更新工单实例",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单实例ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新工单实例请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateWorkorderInstanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/channels": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取当前系统中可用的通知渠道列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取可用的通知渠道",
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的工单通知配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "创建工单通知配置",
                "parameters": [
                    {
                        "description": "创建通知配置请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderNotificationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的工单通知配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "删除工单通知配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "通知配置ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取指定工单通知配置的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单通知配置详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "通知配置ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单通知配置列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单通知配置列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "通知配置名称",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "获取工单通知的发送日志记录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单通知发送日志",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "通知配置ID",
                        "name": "notificationId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/send": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "通过指定渠道手动发送通知",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "手动发送通知",
                "parameters": [
                    {
                        "description": "手动发送通知请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ManualSendNotificationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "发送成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/test/send": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "测试工单通知的发送功能",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "测试工单通知发送",
                "parameters": [
                    {
                        "description": "测试发送通知请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TestSendWorkorderNotificationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "发送成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/notification/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的工单通知配置信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "更新工单通知配置",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "通知配置ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新通知配置请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateWorkorderNotificationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/process/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的工单流程配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "创建工单流程",
                "parameters": [
                    {
                        "description": "创建工单流程请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderProcessReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/process/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的工单流程",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "删除工单流程",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单流程ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/process/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取工单流程的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单流程详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单流程ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/process/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单流程列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单流程列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.WorkorderProcess"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/process/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的工单流程配置",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "更新工单流程",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "工单流程ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新工单流程请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateWorkorderProcessReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/template/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "创建新的工单模板",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "创建工单模板",
                "parameters": [
                    {
                        "description": "创建模板请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateWorkorderTemplateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "创建成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/template/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "删除指定的工单模板",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "删除工单模板",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "模板ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "删除成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/template/detail/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "根据ID获取工单模板的详细信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单模板详情",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "模板ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/template/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "分页获取工单模板列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "获取工单模板列表",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "页码",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "每页数量",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "搜索关键词",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "获取成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.WorkorderTemplate"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/workorder/template/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "更新指定的工单模板信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "工单管理"
                ],
                "summary": "更新工单模板",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "模板ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "更新模板请求参数",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateWorkorderTemplateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "更新成功",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "服务器内部错误",
                        "schema": {
                            "$ref": "#/definitions/utils.ApiResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "intstr.IntOrString": {
            "type": "object",
            "properties": {
                "intVal": {
                    "type": "integer"
                },
                "strVal": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/intstr.Type"
                }
            }
        },
        "intstr.Type": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-comments": {
                "Int": "The IntOrString holds an int.",
                "String": "The IntOrString holds a string."
            },
            "x-enum-varnames": [
                "Int",
                "String"
            ]
        },
        "k8s_io_api_core_v1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "k8s_io_apimachinery_pkg_apis_meta_v1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "model.AddTreeNodeMemberReq": {
            "type": "object",
            "required": [
                "member_type",
                "node_id",
                "user_id"
            ],
            "properties": {
                "member_type": {
                    "enum": [
                        1,
                        2
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TreeNodeMemberType"
                        }
                    ]
                },
                "node_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.AlertRuleSeverity": {
            "type": "integer",
            "enum": [
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "AlertRuleSeverityInfo",
                "AlertRuleSeverityWarning",
                "AlertRuleSeverityCritical"
            ]
        },
        "model.Api": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "API分类，使用int8节省空间",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "description": "API描述",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_public": {
                    "description": "是否公开，使用int8节省空间",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                },
                "method": {
                    "description": "请求方法，使用int8节省空间",
                    "type": "integer"
                },
                "name": {
                    "description": "API名称，唯一且非空",
                    "type": "string"
                },
                "path": {
                    "description": "API路径，非空",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "description": "多对多关联用户",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "version": {
                    "description": "API版本，默认v1",
                    "type": "string"
                }
            }
        },
        "model.ApproveWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.ArchiveAuditLogsRequest": {
            "type": "object",
            "required": [
                "end_time",
                "start_time"
            ],
            "properties": {
                "end_time": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "integer"
                }
            }
        },
        "model.AssignRoleApiRequest": {
            "type": "object",
            "required": [
                "api_ids",
                "role_id"
            ],
            "properties": {
                "api_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "role_id": {
                    "type": "integer"
                }
            }
        },
        "model.AssignRolesToUserRequest": {
            "type": "object",
            "required": [
                "role_ids",
                "user_id"
            ],
            "properties": {
                "role_ids": {
                    "description": "角色ID列表",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "user_id": {
                    "description": "用户ID",
                    "type": "integer"
                }
            }
        },
        "model.AssignWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "assignee_id",
                "id"
            ],
            "properties": {
                "assignee_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.AuditLog": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "endpoint": {
                    "type": "string"
                },
                "error_msg": {
                    "type": "string"
                },
                "http_method": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip_address": {
                    "type": "string"
                },
                "operation_type": {
                    "type": "string"
                },
                "request_body": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response_body": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status_code": {
                    "type": "integer"
                },
                "target_id": {
                    "type": "string"
                },
                "target_type": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_agent": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.AuditLogBatch": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AuditLog"
                    }
                }
            }
        },
        "model.AuthMode": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "AuthModePassword",
                "AuthModeKey"
            ]
        },
        "model.BatchDeleteReq": {
            "type": "object",
            "required": [
                "ids"
            ],
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.BatchDeleteRequest": {
            "type": "object",
            "required": [
                "ids"
            ],
            "properties": {
                "ids": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.BindTreeLocalResourceReq": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "tree_node_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.BindTreeNodeResourceReq": {
            "type": "object",
            "required": [
                "node_id",
                "resource_ids"
            ],
            "properties": {
                "node_id": {
                    "type": "integer"
                },
                "resource_ids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.CancelWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "comment",
                "id"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.ChangePasswordReq": {
            "type": "object",
            "required": [
                "confirm_password",
                "new_password",
                "password",
                "user_id",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "description": "确认密码，必须与新密码相同",
                    "type": "string"
                },
                "new_password": {
                    "description": "新密码，至少6位",
                    "type": "string",
                    "minLength": 6
                },
                "password": {
                    "description": "原密码",
                    "type": "string"
                },
                "user_id": {
                    "description": "用户ID",
                    "type": "integer"
                },
                "username": {
                    "description": "用户名",
                    "type": "string"
                }
            }
        },
        "model.CheckUserPermissionRequest": {
            "type": "object",
            "required": [
                "method",
                "path",
                "user_id"
            ],
            "properties": {
                "method": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.ClusterNamespaces": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "description": "集群ID",
                    "type": "integer"
                },
                "cluster_name": {
                    "description": "集群名称",
                    "type": "string"
                },
                "namespaces": {
                    "description": "命名空间列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Namespace"
                    }
                }
            }
        },
        "model.CompleteWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "comment",
                "id"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.ConfigMapCreateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace"
            ],
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "binary_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "cluster_id": {
                    "type": "integer"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "model.ConfigMapKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.ConfigMapUpdateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "namespace",
                "resource_name"
            ],
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "binary_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "cluster_id": {
                    "type": "integer"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "resource_name": {
                    "type": "string"
                }
            }
        },
        "model.ContainerPort": {
            "type": "object",
            "properties": {
                "container_port": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "model.CreateApiRequest": {
            "type": "object",
            "required": [
                "method",
                "name",
                "path"
            ],
            "properties": {
                "category": {
                    "description": "API分类",
                    "type": "integer"
                },
                "description": {
                    "description": "API描述",
                    "type": "string"
                },
                "is_public": {
                    "description": "是否公开",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "method": {
                    "description": "请求方法",
                    "type": "integer"
                },
                "name": {
                    "description": "API名称",
                    "type": "string"
                },
                "path": {
                    "description": "API路径",
                    "type": "string"
                },
                "version": {
                    "description": "API版本",
                    "type": "string"
                }
            }
        },
        "model.CreateAuditLogRequest": {
            "type": "object",
            "required": [
                "duration",
                "endpoint",
                "http_method",
                "ip_address",
                "operation_type",
                "status_code",
                "user_id"
            ],
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "endpoint": {
                    "type": "string"
                },
                "error_msg": {
                    "type": "string"
                },
                "http_method": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "operation_type": {
                    "type": "string"
                },
                "request_body": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response_body": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status_code": {
                    "type": "integer"
                },
                "target_id": {
                    "type": "string"
                },
                "target_type": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                },
                "user_agent": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateMonitorAlertManagerPoolReq": {
            "type": "object",
            "required": [
                "alert_manager_instances",
                "create_user_name",
                "name",
                "receiver",
                "user_id"
            ],
            "properties": {
                "alert_manager_instances": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "create_user_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "group_by": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "group_interval": {
                    "type": "string"
                },
                "group_wait": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "receiver": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "repeat_interval": {
                    "type": "string"
                },
                "resolve_timeout": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateMonitorAlertRuleReq": {
            "type": "object",
            "required": [
                "expr",
                "for_time",
                "name",
                "pool_id",
                "send_group_id"
            ],
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "create_user_name": {
                    "type": "string"
                },
                "enable": {
                    "type": "integer"
                },
                "expr": {
                    "type": "string"
                },
                "for_time": {
                    "type": "string"
                },
                "grafana_link": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "pool_id": {
                    "type": "integer"
                },
                "send_group_id": {
                    "type": "integer"
                },
                "severity": {
                    "$ref": "#/definitions/model.AlertRuleSeverity"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateMonitorConfigReq": {
            "type": "object",
            "required": [
                "config_content",
                "config_type",
                "instance_ip",
                "name",
                "pool_id"
            ],
            "properties": {
                "config_content": {
                    "type": "string"
                },
                "config_type": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                "instance_ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "pool_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "model.CreateMonitorOnDutyGroupChangeReq": {
            "type": "object",
            "required": [
                "date",
                "on_duty_group_id",
                "on_duty_user_id",
                "origin_user_id",
                "user_id"
            ],
            "properties": {
                "create_user_name": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "on_duty_group_id": {
                    "type": "integer"
                },
                "on_duty_user_id": {
                    "type": "integer"
                },
                "origin_user_id": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string",
                    "maxLength": 255
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateMonitorOnDutyGroupReq": {
            "type": "object",
            "required": [
                "name",
                "shift_days",
                "user_id",
                "user_ids"
            ],
            "properties": {
                "create_user_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "shift_days": {
                    "type": "integer",
                    "minimum": 1
                },
                "user_id": {
                    "type": "integer"
                },
                "user_ids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.CreateMonitorRecordRuleReq": {
            "type": "object",
            "required": [
                "expr",
                "name",
                "pool_id"
            ],
            "properties": {
                "create_user_name": {
                    "type": "string"
                },
                "enable": {
                    "type": "integer"
                },
                "expr": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "pool_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateMonitorScrapeJobReq": {
            "type": "object",
            "required": [
                "name",
                "pool_id",
                "user_id"
            ],
            "properties": {
                "bearer_token": {
                    "type": "string"
                },
                "bearer_token_file": {
                    "type": "string"
                },
                "create_user_name": {
                    "type": "string"
                },
                "enable": {
                    "type": "integer"
                },
                "ip_address": {
                    "type": "string"
                },
                "kube_config_file_path": {
                    "type": "string"
                },
                "kubernetes_sd_role": {
                    "type": "string"
                },
                "metrics_path": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "pool_id": {
                    "type": "integer"
                },
                "port": {
                    "type": "integer"
                },
                "refresh_interval": {
                    "type": "integer"
                },
                "relabel_configs_yaml_string": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "scrape_interval": {
                    "type": "integer"
                },
                "scrape_timeout": {
                    "type": "integer"
                },
                "service_discovery_type": {
                    "$ref": "#/definitions/model.ServiceDiscoveryType"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tls_ca_content": {
                    "type": "string"
                },
                "tls_ca_file_path": {
                    "type": "string"
                },
                "tree_node_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateMonitorScrapePoolReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "alert_manager_url": {
                    "type": "string"
                },
                "create_user_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "prometheus_instances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "record_file_path": {
                    "type": "string"
                },
                "remote_read_url": {
                    "type": "string"
                },
                "remote_timeout_seconds": {
                    "type": "integer"
                },
                "remote_write_url": {
                    "type": "string"
                },
                "rule_file_path": {
                    "type": "string"
                },
                "scrape_interval": {
                    "type": "integer"
                },
                "scrape_timeout": {
                    "type": "integer"
                },
                "support_alert": {
                    "type": "integer"
                },
                "support_record": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateMonitorSendGroupReq": {
            "type": "object",
            "required": [
                "name",
                "name_zh",
                "pool_id",
                "user_id"
            ],
            "properties": {
                "create_user_name": {
                    "type": "string"
                },
                "enable": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "fei_shu_qun_robot_token": {
                    "type": "string",
                    "maxLength": 255
                },
                "first_upgrade_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "name_zh": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "need_upgrade": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "notify_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "on_duty_group_id": {
                    "type": "integer"
                },
                "pool_id": {
                    "type": "integer"
                },
                "repeat_interval": {
                    "type": "string",
                    "maxLength": 50
                },
                "second_upgrade_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "send_resolved": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "static_receive_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "upgrade_minutes": {
                    "type": "integer",
                    "minimum": 0
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateNamespaceReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "namespace"
            ],
            "properties": {
                "annotations": {
                    "description": "命名空间注解",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "type": "integer"
                },
                "labels": {
                    "description": "命名空间标签",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "model.CreateRoleRequest": {
            "type": "object",
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "api_ids": {
                    "description": "关联的API ID列表",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "code": {
                    "description": "角色编码",
                    "type": "string",
                    "maxLength": 50
                },
                "description": {
                    "description": "角色描述",
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "description": "角色名称",
                    "type": "string",
                    "maxLength": 50
                },
                "status": {
                    "description": "状态",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                }
            }
        },
        "model.CreateTreeLocalResourceReq": {
            "type": "object",
            "required": [
                "ip_addr",
                "name"
            ],
            "properties": {
                "auth_mode": {
                    "$ref": "#/definitions/model.AuthMode"
                },
                "create_user_id": {
                    "type": "integer"
                },
                "create_user_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "image_name": {
                    "type": "string"
                },
                "ip_addr": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os_name": {
                    "type": "string"
                },
                "os_type": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.CreateTreeNodeReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "creator_id": {
                    "description": "创建者ID",
                    "type": "integer"
                },
                "creator_name": {
                    "description": "创建者姓名",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "is_leaf": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "parent_id": {
                    "description": "父节点ID，0表示根节点",
                    "type": "integer"
                },
                "status": {
                    "enum": [
                        1,
                        2
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TreeNodeStatus"
                        }
                    ]
                }
            }
        },
        "model.CreateWorkorderCategoryReq": {
            "type": "object",
            "required": [
                "name",
                "operator_id",
                "operator_name",
                "status"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "operator_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "model.CreateWorkorderFormDesignReq": {
            "type": "object",
            "required": [
                "is_template",
                "name",
                "operator_id",
                "operator_name",
                "schema",
                "status"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "is_template": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "operator_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "schema": {
                    "$ref": "#/definitions/model.FormSchema"
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.CreateWorkorderInstanceCommentReq": {
            "type": "object",
            "required": [
                "content",
                "instance_id",
                "operator_id",
                "operator_name"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "maxLength": 2000,
                    "minLength": 1
                },
                "instance_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "is_system": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "operator_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "parent_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "system"
                    ]
                }
            }
        },
        "model.CreateWorkorderInstanceFromTemplateReq": {
            "type": "object",
            "required": [
                "operator_id",
                "operator_name",
                "priority",
                "title"
            ],
            "properties": {
                "assignee_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "description": {
                    "type": "string",
                    "maxLength": 2000
                },
                "due_date": {
                    "type": "string"
                },
                "form_data": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "operator_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "priority": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                }
            }
        },
        "model.CreateWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "form_data",
                "operator_id",
                "operator_name",
                "priority",
                "process_id",
                "status",
                "title"
            ],
            "properties": {
                "assignee_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "description": {
                    "type": "string",
                    "maxLength": 2000
                },
                "due_date": {
                    "type": "string"
                },
                "form_data": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "operator_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "priority": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "process_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                }
            }
        },
        "model.CreateWorkorderInstanceTimelineReq": {
            "type": "object",
            "required": [
                "action",
                "instance_id",
                "operator_id",
                "operator_name"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "create",
                        "submit",
                        "approve",
                        "reject",
                        "assign",
                        "cancel",
                        "complete",
                        "return",
                        "comment",
                        "update",
                        "view",
                        "attach",
                        "notify",
                        "remind"
                    ]
                },
                "action_detail": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 2000
                },
                "instance_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "related_id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.CreateWorkorderNotificationReq": {
            "type": "object",
            "required": [
                "channels",
                "event_types",
                "message_template",
                "name",
                "recipient_types",
                "trigger_type"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "event_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_default": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "max_retries": {
                    "type": "integer"
                },
                "message_template": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process_id": {
                    "type": "integer"
                },
                "recipient_depts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient_users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repeat_interval": {
                    "type": "integer"
                },
                "retry_interval": {
                    "type": "integer"
                },
                "scheduled_time": {
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "status": {
                    "type": "integer"
                },
                "subject_template": {
                    "type": "string"
                },
                "template_id": {
                    "type": "integer"
                },
                "trigger_condition": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "trigger_type": {
                    "type": "string"
                }
            }
        },
        "model.CreateWorkorderProcessReq": {
            "type": "object",
            "required": [
                "definition",
                "form_design_id",
                "is_default",
                "name",
                "operator_id",
                "operator_name",
                "status"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "definition": {
                    "$ref": "#/definitions/model.ProcessDefinition"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "form_design_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "is_default": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "operator_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.CreateWorkorderTemplateReq": {
            "type": "object",
            "required": [
                "form_design_id",
                "name",
                "operator_id",
                "operator_name",
                "process_id",
                "status"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "default_values": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "form_design_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "operator_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "operator_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "process_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.DaemonSetRollingUpdateStrategy": {
            "type": "object",
            "properties": {
                "max_surge": {
                    "description": "最大超出数量",
                    "type": "integer"
                },
                "max_unavailable": {
                    "description": "最大不可用数量",
                    "type": "integer"
                }
            }
        },
        "model.DaemonSetUpdateStrategy": {
            "type": "object",
            "properties": {
                "rolling_update": {
                    "description": "滚动更新策略",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DaemonSetRollingUpdateStrategy"
                        }
                    ]
                },
                "type": {
                    "description": "更新策略类型",
                    "type": "string"
                }
            }
        },
        "model.DeploymentBatchDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "deployment_names",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "deployment_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "model.DeploymentBatchRestartReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "deployment_names",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "deployment_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "model.EnvVar": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "value_from": {
                    "$ref": "#/definitions/model.EnvVarSource"
                }
            }
        },
        "model.EnvVarSource": {
            "type": "object",
            "properties": {
                "config_map_key_ref": {
                    "$ref": "#/definitions/model.ConfigMapKeySelector"
                },
                "secret_key_ref": {
                    "$ref": "#/definitions/model.SecretKeySelector"
                }
            }
        },
        "model.Event": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "事件发生次数",
                    "type": "integer"
                },
                "first_timestamp": {
                    "description": "第一次发生时间",
                    "type": "string"
                },
                "last_timestamp": {
                    "description": "最后一次发生时间",
                    "type": "string"
                },
                "message": {
                    "description": "事件消息",
                    "type": "string"
                },
                "reason": {
                    "description": "事件原因",
                    "type": "string"
                },
                "source": {
                    "description": "事件来源",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EventSource"
                        }
                    ]
                },
                "type": {
                    "description": "事件类型，例如 Normal, Warning",
                    "type": "string"
                }
            }
        },
        "model.EventAlertClaimReq": {
            "type": "object",
            "required": [
                "id",
                "user_id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.EventAlertSilenceReq": {
            "type": "object",
            "required": [
                "id",
                "time",
                "user_id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                },
                "use_name": {
                    "description": "是否启用名称静默",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.EventAlertUnSilenceReq": {
            "type": "object",
            "required": [
                "id",
                "user_id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.EventReasonCount": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "数量",
                    "type": "integer"
                },
                "reason": {
                    "description": "原因",
                    "type": "string"
                }
            }
        },
        "model.EventSourceCount": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "数量",
                    "type": "integer"
                },
                "source": {
                    "description": "来源",
                    "type": "string"
                }
            }
        },
        "model.FormField": {
            "type": "object",
            "required": [
                "label",
                "name",
                "type"
            ],
            "properties": {
                "default": {
                    "description": "默认值"
                },
                "id": {
                    "description": "字段唯一标识（系统自动生成）",
                    "type": "string"
                },
                "label": {
                    "description": "字段标签",
                    "type": "string"
                },
                "name": {
                    "description": "字段名称",
                    "type": "string"
                },
                "options": {
                    "description": "选项（如下拉、单选等）",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "placeholder": {
                    "description": "占位符",
                    "type": "string"
                },
                "required": {
                    "description": "是否必填",
                    "type": "integer"
                },
                "type": {
                    "description": "字段类型",
                    "type": "string"
                }
            }
        },
        "model.FormSchema": {
            "type": "object",
            "required": [
                "fields"
            ],
            "properties": {
                "fields": {
                    "description": "字段列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FormField"
                    }
                }
            }
        },
        "model.IngressBackend": {
            "type": "object",
            "properties": {
                "service_name": {
                    "description": "服务名称",
                    "type": "string"
                },
                "service_port": {
                    "description": "服务端口",
                    "type": "integer"
                }
            }
        },
        "model.IngressBackendReq": {
            "type": "object",
            "required": [
                "service_name",
                "service_port"
            ],
            "properties": {
                "service_name": {
                    "description": "服务名称",
                    "type": "string"
                },
                "service_port": {
                    "description": "服务端口",
                    "type": "integer"
                }
            }
        },
        "model.IngressHTTPRule": {
            "type": "object",
            "properties": {
                "paths": {
                    "description": "路径规则",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.IngressPath"
                    }
                }
            }
        },
        "model.IngressLoadBalancer": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "负载均衡器主机名",
                    "type": "string"
                },
                "ip": {
                    "description": "负载均衡器IP",
                    "type": "string"
                }
            }
        },
        "model.IngressPath": {
            "type": "object",
            "properties": {
                "backend": {
                    "description": "后端",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.IngressBackend"
                        }
                    ]
                },
                "path": {
                    "description": "路径",
                    "type": "string"
                },
                "path_type": {
                    "description": "路径类型",
                    "type": "string"
                }
            }
        },
        "model.IngressPathReq": {
            "type": "object",
            "required": [
                "backend",
                "path",
                "path_type"
            ],
            "properties": {
                "backend": {
                    "description": "后端",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.IngressBackendReq"
                        }
                    ]
                },
                "path": {
                    "description": "路径",
                    "type": "string"
                },
                "path_type": {
                    "description": "路径类型",
                    "type": "string"
                }
            }
        },
        "model.IngressRule": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "主机名",
                    "type": "string"
                },
                "http": {
                    "description": "HTTP规则",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.IngressHTTPRule"
                        }
                    ]
                }
            }
        },
        "model.IngressRuleReq": {
            "type": "object",
            "required": [
                "host",
                "paths"
            ],
            "properties": {
                "host": {
                    "description": "主机名",
                    "type": "string"
                },
                "paths": {
                    "description": "路径规则",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.IngressPathReq"
                    }
                }
            }
        },
        "model.IngressTLS": {
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "主机列表",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secret_name": {
                    "description": "Secret名称",
                    "type": "string"
                }
            }
        },
        "model.IngressTLSReq": {
            "type": "object",
            "required": [
                "hosts",
                "secret_name"
            ],
            "properties": {
                "hosts": {
                    "description": "主机列表",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secret_name": {
                    "description": "Secret名称",
                    "type": "string"
                }
            }
        },
        "model.JSONMap": {
            "type": "object",
            "additionalProperties": true
        },
        "model.K8sBackendHealth": {
            "type": "object",
            "properties": {
                "healthy": {
                    "description": "是否健康",
                    "type": "boolean"
                },
                "message": {
                    "description": "状态信息",
                    "type": "string"
                },
                "service_name": {
                    "description": "服务名称",
                    "type": "string"
                },
                "service_port": {
                    "description": "服务端口",
                    "type": "integer"
                }
            }
        },
        "model.K8sBatchDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "namespace",
                "resource_names"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "namespace": {
                    "type": "string"
                },
                "resource_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.K8sCluster": {
            "type": "object",
            "required": [
                "name",
                "name_zh"
            ],
            "properties": {
                "action_timeout_seconds": {
                    "description": "操作超时时间（秒）",
                    "type": "integer"
                },
                "api_server_addr": {
                    "description": "API Server 地址",
                    "type": "string"
                },
                "cpu_limit": {
                    "description": "CPU 限制量",
                    "type": "string"
                },
                "cpu_request": {
                    "description": "CPU 请求量",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "env": {
                    "description": "集群环境",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kube_config_content": {
                    "description": "kubeConfig 内容",
                    "type": "string"
                },
                "memory_limit": {
                    "description": "内存限制量",
                    "type": "string"
                },
                "memory_request": {
                    "description": "内存请求量",
                    "type": "string"
                },
                "name": {
                    "description": "集群名称",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "name_zh": {
                    "description": "集群中文名称",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "restricted_name_space": {
                    "description": "资源限制命名空间",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "集群状态",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "创建者用户ID",
                    "type": "integer"
                },
                "version": {
                    "description": "集群版本",
                    "type": "string"
                }
            }
        },
        "model.K8sClusterNodesReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "node_name"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群id，必填",
                    "type": "integer"
                },
                "node_name": {
                    "description": "节点名称列表，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sConfigMap": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "binary_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "creation_timestamp": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.K8sEvent"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "model.K8sContainerPort": {
            "type": "object",
            "required": [
                "container_port"
            ],
            "properties": {
                "container_port": {
                    "description": "容器端口号",
                    "type": "integer"
                },
                "name": {
                    "description": "端口名称（可选）",
                    "type": "string"
                },
                "protocol": {
                    "description": "协议类型，例如 \"TCP\", \"UDP\"",
                    "type": "string"
                }
            }
        },
        "model.K8sDaemonSetBatchDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "names",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "force": {
                    "description": "是否强制删除",
                    "type": "boolean"
                },
                "grace_period_seconds": {
                    "description": "优雅删除时间",
                    "type": "integer"
                },
                "names": {
                    "description": "DaemonSet名称列表，必填",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sDaemonSetBatchRestartReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "names",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "names": {
                    "description": "DaemonSet名称列表，必填",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sDaemonSetCreateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "image",
                "name",
                "namespace"
            ],
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "daemonset_yaml": {
                    "description": "DaemonSet YAML对象",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DaemonSet"
                        }
                    ]
                },
                "env": {
                    "description": "环境变量",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EnvVar"
                    }
                },
                "image": {
                    "description": "镜像地址，必填",
                    "type": "string"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "DaemonSet名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                },
                "node_selector": {
                    "description": "节点选择器",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ports": {
                    "description": "容器端口",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ContainerPort"
                    }
                },
                "resources": {
                    "description": "资源限制",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceRequirements"
                        }
                    ]
                },
                "tolerations": {
                    "description": "容忍度",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Toleration"
                    }
                },
                "update_strategy": {
                    "description": "更新策略",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DaemonSetUpdateStrategy"
                        }
                    ]
                }
            }
        },
        "model.K8sDaemonSetDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "force": {
                    "description": "是否强制删除",
                    "type": "boolean"
                },
                "grace_period_seconds": {
                    "description": "优雅删除时间",
                    "type": "integer"
                },
                "name": {
                    "description": "DaemonSet名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sDaemonSetEntity": {
            "type": "object",
            "required": [
                "name",
                "namespace"
            ],
            "properties": {
                "age": {
                    "description": "存在时间，前端计算使用",
                    "type": "string"
                },
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "available_number": {
                    "description": "可用数量",
                    "type": "integer"
                },
                "cluster_id": {
                    "description": "所属集群ID",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "creation_timestamp": {
                    "description": "Kubernetes创建时间",
                    "type": "string"
                },
                "current_number": {
                    "description": "当前数量",
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "desired_number": {
                    "description": "期望数量",
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "images": {
                    "description": "容器镜像列表",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "misscheduled_number": {
                    "description": "错误调度数量",
                    "type": "integer"
                },
                "name": {
                    "description": "DaemonSet名称",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "namespace": {
                    "description": "所属命名空间",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "ready_number": {
                    "description": "就绪数量",
                    "type": "integer"
                },
                "status": {
                    "description": "DaemonSet状态，前端计算使用",
                    "type": "string"
                },
                "uid": {
                    "description": "DaemonSet UID",
                    "type": "string"
                },
                "update_strategy": {
                    "description": "更新策略",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_number": {
                    "description": "更新数量",
                    "type": "integer"
                }
            }
        },
        "model.K8sDaemonSetRestartReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "name": {
                    "description": "DaemonSet名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sDaemonSetUpdateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace"
            ],
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "daemonset_yaml": {
                    "description": "DaemonSet YAML对象",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DaemonSet"
                        }
                    ]
                },
                "env": {
                    "description": "环境变量",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EnvVar"
                    }
                },
                "image": {
                    "description": "镜像地址",
                    "type": "string"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "DaemonSet名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                },
                "node_selector": {
                    "description": "节点选择器",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ports": {
                    "description": "容器端口",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ContainerPort"
                    }
                },
                "resources": {
                    "description": "资源限制",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceRequirements"
                        }
                    ]
                },
                "tolerations": {
                    "description": "容忍度",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Toleration"
                    }
                },
                "update_strategy": {
                    "description": "更新策略",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DaemonSetUpdateStrategy"
                        }
                    ]
                }
            }
        },
        "model.K8sDeploymentReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群名称，必填",
                    "type": "integer"
                },
                "deployment_names": {
                    "description": "Deployment 名称，可选",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deployment_yaml": {
                    "description": "Deployment 对象, 可选",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Deployment"
                        }
                    ]
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sEnvVar": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "环境变量名称",
                    "type": "string"
                },
                "value": {
                    "description": "环境变量值",
                    "type": "string"
                }
            }
        },
        "model.K8sEvent": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "creation_timestamp": {
                    "type": "string"
                },
                "first_timestamp": {
                    "type": "string"
                },
                "involved_object": {
                    "$ref": "#/definitions/v1.ObjectReference"
                },
                "last_timestamp": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/definitions/v1.EventSource"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.K8sEventCleanupReq": {
            "type": "object",
            "required": [
                "cluster_id"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "days_to_keep": {
                    "description": "保留天数，删除指定天数之前的事件",
                    "type": "integer"
                },
                "namespace": {
                    "description": "命名空间",
                    "type": "string"
                }
            }
        },
        "model.K8sEventCleanupResult": {
            "type": "object",
            "properties": {
                "cleaned_count": {
                    "description": "清理数量",
                    "type": "integer"
                },
                "error_count": {
                    "description": "错误数量",
                    "type": "integer"
                },
                "errors": {
                    "description": "错误列表",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.K8sEventEntity": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "存在时间，前端计算使用",
                    "type": "string"
                },
                "cluster_id": {
                    "description": "所属集群ID",
                    "type": "integer"
                },
                "count": {
                    "description": "发生次数",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "creation_timestamp": {
                    "description": "Kubernetes创建时间",
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "first_timestamp": {
                    "description": "首次发生时间",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "involved_object": {
                    "description": "相关对象",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectReference"
                        }
                    ]
                },
                "last_timestamp": {
                    "description": "最后发生时间",
                    "type": "string"
                },
                "message": {
                    "description": "事件消息",
                    "type": "string"
                },
                "name": {
                    "description": "事件名称",
                    "type": "string"
                },
                "namespace": {
                    "description": "所属命名空间",
                    "type": "string"
                },
                "reason": {
                    "description": "事件原因",
                    "type": "string"
                },
                "severity": {
                    "description": "事件严重程度，前端计算使用",
                    "type": "string"
                },
                "source": {
                    "description": "事件来源",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EventSource"
                        }
                    ]
                },
                "type": {
                    "description": "事件类型",
                    "type": "string"
                },
                "uid": {
                    "description": "事件UID",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.K8sEventStatistics": {
            "type": "object",
            "properties": {
                "normal_events": {
                    "description": "正常事件数",
                    "type": "integer"
                },
                "top_reasons": {
                    "description": "主要原因统计",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EventReasonCount"
                    }
                },
                "top_sources": {
                    "description": "主要来源统计",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EventSourceCount"
                    }
                },
                "total_events": {
                    "description": "总事件数",
                    "type": "integer"
                },
                "warning_events": {
                    "description": "警告事件数",
                    "type": "integer"
                }
            }
        },
        "model.K8sEventTimelineItem": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "消息",
                    "type": "string"
                },
                "object": {
                    "description": "对象",
                    "type": "string"
                },
                "reason": {
                    "description": "原因",
                    "type": "string"
                },
                "timestamp": {
                    "description": "时间戳",
                    "type": "string"
                },
                "type": {
                    "description": "事件类型",
                    "type": "string"
                }
            }
        },
        "model.K8sHTTPGetAction": {
            "type": "object",
            "required": [
                "path",
                "port"
            ],
            "properties": {
                "path": {
                    "description": "探测路径，必填，长度限制为255字符",
                    "type": "string"
                },
                "port": {
                    "description": "探测端口号，必填",
                    "type": "integer"
                },
                "scheme": {
                    "description": "协议类型，例如 \"HTTP\", \"HTTPS\"，长度限制为10字符",
                    "type": "string"
                }
            }
        },
        "model.K8sIngressBatchDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "names",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "force": {
                    "description": "是否强制删除",
                    "type": "boolean"
                },
                "grace_period_seconds": {
                    "description": "优雅删除时间",
                    "type": "integer"
                },
                "names": {
                    "description": "Ingress名称列表，必填",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sIngressCreateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace",
                "rules"
            ],
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "ingress_class_name": {
                    "description": "Ingress类名",
                    "type": "string"
                },
                "ingress_yaml": {
                    "description": "Ingress YAML对象",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Ingress"
                        }
                    ]
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Ingress名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                },
                "rules": {
                    "description": "Ingress规则，必填",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.IngressRuleReq"
                    }
                },
                "tls": {
                    "description": "TLS配置",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.IngressTLSReq"
                    }
                }
            }
        },
        "model.K8sIngressDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "force": {
                    "description": "是否强制删除",
                    "type": "boolean"
                },
                "grace_period_seconds": {
                    "description": "优雅删除时间",
                    "type": "integer"
                },
                "name": {
                    "description": "Ingress名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sIngressEntity": {
            "type": "object",
            "required": [
                "name",
                "namespace"
            ],
            "properties": {
                "age": {
                    "description": "存在时间，前端计算使用",
                    "type": "string"
                },
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "所属集群ID",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "creation_timestamp": {
                    "description": "Kubernetes创建时间",
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "hosts": {
                    "description": "主机列表，前端使用",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "ingress_class_name": {
                    "description": "Ingress类名",
                    "type": "string"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "load_balancer": {
                    "description": "负载均衡器信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.IngressLoadBalancer"
                        }
                    ]
                },
                "name": {
                    "description": "Ingress名称",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "namespace": {
                    "description": "所属命名空间",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "rules": {
                    "description": "Ingress规则",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.IngressRule"
                    }
                },
                "status": {
                    "description": "Ingress状态，前端计算使用",
                    "type": "string"
                },
                "tls": {
                    "description": "TLS配置",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.IngressTLS"
                    }
                },
                "uid": {
                    "description": "Ingress UID",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.K8sIngressTLSTestReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "host",
                "name",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "host": {
                    "description": "测试主机名，必填",
                    "type": "string"
                },
                "name": {
                    "description": "Ingress名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sIngressUpdateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace"
            ],
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "ingress_class_name": {
                    "description": "Ingress类名",
                    "type": "string"
                },
                "ingress_yaml": {
                    "description": "Ingress YAML对象",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Ingress"
                        }
                    ]
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Ingress名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                },
                "rules": {
                    "description": "Ingress规则",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.IngressRuleReq"
                    }
                },
                "tls": {
                    "description": "TLS配置",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.IngressTLSReq"
                    }
                }
            }
        },
        "model.K8sNode": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "age": {
                    "description": "节点存在时间",
                    "type": "string"
                },
                "annotation": {
                    "description": "注解键值对映射",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "所属集群ID",
                    "type": "integer"
                },
                "conditions": {
                    "description": "节点条件列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeCondition"
                    }
                },
                "cpu_cores": {
                    "description": "CPU 核心信息",
                    "type": "string"
                },
                "cpu_limit_info": {
                    "description": "CPU 限制信息",
                    "type": "string"
                },
                "cpu_request_info": {
                    "description": "CPU 请求信息",
                    "type": "string"
                },
                "cpu_usage_info": {
                    "description": "CPU 使用信息",
                    "type": "string"
                },
                "created_at": {
                    "description": "创建时间",
                    "type": "string"
                },
                "cri_version": {
                    "description": "容器运行时接口版本",
                    "type": "string"
                },
                "ephemeral_storage": {
                    "description": "临时存储信息",
                    "type": "string"
                },
                "events": {
                    "description": "节点相关事件列表，包含最近的事件信息",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.OneEvent"
                    }
                },
                "ip": {
                    "description": "节点内部IP",
                    "type": "string"
                },
                "kernel_version": {
                    "description": "内核版本",
                    "type": "string"
                },
                "kubelet_version": {
                    "description": "Kubelet 版本",
                    "type": "string"
                },
                "label_pairs": {
                    "description": "标签键值对映射",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "节点标签列表",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels_front": {
                    "description": "前端显示的标签字符串，格式为多行 key=value",
                    "type": "string"
                },
                "mem_gibs": {
                    "description": "内存信息",
                    "type": "string"
                },
                "memory_limit_info": {
                    "description": "内存限制信息",
                    "type": "string"
                },
                "memory_request_info": {
                    "description": "内存请求信息",
                    "type": "string"
                },
                "memory_usage_info": {
                    "description": "内存使用信息",
                    "type": "string"
                },
                "name": {
                    "description": "节点名称",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "os_version": {
                    "description": "操作系统版本",
                    "type": "string"
                },
                "pod_num": {
                    "description": "节点上的 Pod 数量",
                    "type": "integer"
                },
                "pod_num_info": {
                    "description": "Pod 数量信息",
                    "type": "string"
                },
                "roles": {
                    "description": "节点角色",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "schedule_enable": {
                    "description": "节点是否可调度",
                    "type": "boolean"
                },
                "status": {
                    "description": "节点状态",
                    "type": "string"
                },
                "taints": {
                    "description": "节点 Taints 列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Taint"
                    }
                },
                "taints_front": {
                    "description": "前端显示的 Taints 字符串，格式为多行 key=value:Effect",
                    "type": "string"
                },
                "updated_at": {
                    "description": "更新时间",
                    "type": "string"
                }
            }
        },
        "model.K8sPVBatchDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "names"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "force": {
                    "description": "是否强制删除",
                    "type": "boolean"
                },
                "grace_period_seconds": {
                    "description": "优雅删除时间",
                    "type": "integer"
                },
                "names": {
                    "description": "PV名称列表，必填",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.K8sPVCBatchDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "names",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "force": {
                    "description": "是否强制删除",
                    "type": "boolean"
                },
                "grace_period_seconds": {
                    "description": "优雅删除时间",
                    "type": "integer"
                },
                "names": {
                    "description": "PVC名称列表，必填",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVCCreateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace",
                "yaml"
            ],
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "PVC名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                },
                "pvc_yaml": {
                    "description": "PVC YAML配置，兼容性字段",
                    "type": "string"
                },
                "yaml": {
                    "description": "YAML配置，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVCDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "force": {
                    "description": "是否强制删除",
                    "type": "boolean"
                },
                "grace_period_seconds": {
                    "description": "优雅删除时间",
                    "type": "integer"
                },
                "name": {
                    "description": "PVC名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVCEntity": {
            "type": "object",
            "properties": {
                "access_modes": {
                    "description": "访问模式",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "age": {
                    "description": "存在时间",
                    "type": "string"
                },
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "capacity": {
                    "description": "容量",
                    "type": "string"
                },
                "cluster_id": {
                    "description": "集群ID",
                    "type": "integer"
                },
                "creation_timestamp": {
                    "description": "创建时间",
                    "type": "string"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "PVC名称",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间",
                    "type": "string"
                },
                "status": {
                    "description": "状态",
                    "type": "string"
                },
                "storage_class": {
                    "description": "存储类",
                    "type": "string"
                },
                "uid": {
                    "description": "UID",
                    "type": "string"
                },
                "volume": {
                    "description": "绑定的PV",
                    "type": "string"
                },
                "volume_mode": {
                    "description": "卷模式",
                    "type": "string"
                }
            }
        },
        "model.K8sPVCExpandReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace",
                "new_size"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "name": {
                    "description": "PVC名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                },
                "new_size": {
                    "description": "新容量，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVCUpdateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace",
                "yaml"
            ],
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "PVC名称，必填",
                    "type": "string"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                },
                "pvc_yaml": {
                    "description": "PVC YAML配置，兼容性字段",
                    "type": "string"
                },
                "yaml": {
                    "description": "YAML配置，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVCUsageInfo": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "可用",
                    "type": "string"
                },
                "total": {
                    "description": "总容量",
                    "type": "string"
                },
                "usage_rate": {
                    "description": "使用率",
                    "type": "number"
                },
                "used": {
                    "description": "已使用",
                    "type": "string"
                }
            }
        },
        "model.K8sPVCreateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "yaml"
            ],
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "PV名称，必填",
                    "type": "string"
                },
                "pv_yaml": {
                    "description": "PV YAML配置，兼容性字段",
                    "type": "string"
                },
                "yaml": {
                    "description": "YAML配置，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVDeleteReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "force": {
                    "description": "是否强制删除",
                    "type": "boolean"
                },
                "grace_period_seconds": {
                    "description": "优雅删除时间",
                    "type": "integer"
                },
                "name": {
                    "description": "PV名称，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVEntity": {
            "type": "object",
            "properties": {
                "access_modes": {
                    "description": "访问模式",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "age": {
                    "description": "存在时间",
                    "type": "string"
                },
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "capacity": {
                    "description": "容量",
                    "type": "string"
                },
                "claim": {
                    "description": "绑定的PVC",
                    "type": "string"
                },
                "cluster_id": {
                    "description": "集群ID",
                    "type": "integer"
                },
                "creation_timestamp": {
                    "description": "创建时间",
                    "type": "string"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "PV名称",
                    "type": "string"
                },
                "reason": {
                    "description": "原因",
                    "type": "string"
                },
                "reclaim_policy": {
                    "description": "回收策略",
                    "type": "string"
                },
                "status": {
                    "description": "状态",
                    "type": "string"
                },
                "storage_class": {
                    "description": "存储类",
                    "type": "string"
                },
                "uid": {
                    "description": "UID",
                    "type": "string"
                },
                "volume_mode": {
                    "description": "卷模式",
                    "type": "string"
                }
            }
        },
        "model.K8sPVReclaimReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "name": {
                    "description": "PV名称，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVUpdateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "yaml"
            ],
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "description": "集群ID，必填",
                    "type": "integer"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "PV名称，必填",
                    "type": "string"
                },
                "pv_yaml": {
                    "description": "PV YAML配置，兼容性字段",
                    "type": "string"
                },
                "yaml": {
                    "description": "YAML配置，必填",
                    "type": "string"
                }
            }
        },
        "model.K8sPVUsageInfo": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "可用",
                    "type": "string"
                },
                "total": {
                    "description": "总容量",
                    "type": "string"
                },
                "usage_rate": {
                    "description": "使用率",
                    "type": "number"
                },
                "used": {
                    "description": "已使用",
                    "type": "string"
                }
            }
        },
        "model.K8sPod": {
            "type": "object",
            "required": [
                "name",
                "namespace"
            ],
            "properties": {
                "annotations": {
                    "description": "Pod 注解键值对",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "containers": {
                    "description": "Pod 内的容器信息，前端使用",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.K8sPodContainer"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "description": "Pod 标签键值对",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Pod 名称",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "namespace": {
                    "description": "Pod 所属的命名空间",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "node_name": {
                    "description": "Pod 所在节点名称",
                    "type": "string"
                },
                "status": {
                    "description": "Pod 状态，例如 \"Running\", \"Pending\"",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.K8sPodContainer": {
            "type": "object",
            "required": [
                "image",
                "name"
            ],
            "properties": {
                "args": {
                    "description": "启动参数",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "启动命令组",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envs": {
                    "description": "环境变量组",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.K8sEnvVar"
                    }
                },
                "image": {
                    "description": "容器镜像",
                    "type": "string"
                },
                "image_pull_policy": {
                    "description": "镜像拉取策略，例如 \"Always\", \"IfNotPresent\", \"Never\"",
                    "type": "string"
                },
                "liveness_probe": {
                    "description": "存活探测配置",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.K8sProbe"
                        }
                    ]
                },
                "name": {
                    "description": "容器名称",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "ports": {
                    "description": "容器端口配置",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.K8sContainerPort"
                    }
                },
                "readiness_probe": {
                    "description": "就绪探测配置",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.K8sProbe"
                        }
                    ]
                },
                "resources": {
                    "description": "资源请求与限制",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceRequirements"
                        }
                    ]
                },
                "volume_mounts": {
                    "description": "卷挂载配置",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.K8sVolumeMount"
                    }
                }
            }
        },
        "model.K8sProbe": {
            "type": "object",
            "properties": {
                "failure_threshold": {
                    "description": "探测失败阈值",
                    "type": "integer"
                },
                "http_get": {
                    "description": "HTTP GET 探测",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.K8sHTTPGetAction"
                        }
                    ]
                },
                "initial_delay_seconds": {
                    "description": "TCPSocket 和 Exec 探测也可以根据需要添加",
                    "type": "integer"
                },
                "period_seconds": {
                    "description": "探测间隔时间",
                    "type": "integer"
                },
                "success_threshold": {
                    "description": "探测成功阈值",
                    "type": "integer"
                },
                "timeout_seconds": {
                    "description": "探测超时时间",
                    "type": "integer"
                }
            }
        },
        "model.K8sResourceHistory": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "注解",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "change_cause": {
                    "description": "变更原因",
                    "type": "string"
                },
                "change_time": {
                    "description": "变更时间",
                    "type": "string"
                },
                "config_changes": {
                    "description": "配置变更内容",
                    "type": "string"
                },
                "labels": {
                    "description": "标签",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "description": "命名空间",
                    "type": "string"
                },
                "resource_name": {
                    "description": "资源名称",
                    "type": "string"
                },
                "resource_type": {
                    "description": "资源类型 (deployment, daemonset, statefulset等)",
                    "type": "string"
                },
                "revision": {
                    "description": "版本号",
                    "type": "integer"
                },
                "status": {
                    "description": "状态",
                    "type": "string"
                }
            }
        },
        "model.K8sResourceList": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPU 数量，例如 \"500m\", \"2\"",
                    "type": "string"
                },
                "memory": {
                    "description": "内存数量，例如 \"1Gi\", \"512Mi\"",
                    "type": "string"
                }
            }
        },
        "model.K8sSecret": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creation_timestamp": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.K8sEvent"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "string_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "model.K8sServiceReq": {
            "type": "object",
            "required": [
                "cluster_id"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群id，必填",
                    "type": "integer"
                },
                "namespace": {
                    "description": "命名空间，必填",
                    "type": "string"
                },
                "service_names": {
                    "description": "Service 名称，可选",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "service_yaml": {
                    "description": "Service 对象, 可选",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Service"
                        }
                    ]
                }
            }
        },
        "model.K8sStatefulSet": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creation_timestamp": {
                    "type": "string"
                },
                "current_replicas": {
                    "type": "integer"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.K8sEvent"
                    }
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "ready_replicas": {
                    "type": "integer"
                },
                "replicas": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "update_strategy": {
                    "type": "string"
                },
                "updated_replicas": {
                    "type": "integer"
                }
            }
        },
        "model.K8sTLSTestResult": {
            "type": "object",
            "properties": {
                "error_msg": {
                    "description": "错误信息",
                    "type": "string"
                },
                "expiry_date": {
                    "description": "证书过期时间",
                    "type": "string"
                },
                "host": {
                    "description": "主机名",
                    "type": "string"
                },
                "issuer": {
                    "description": "证书颁发者",
                    "type": "string"
                },
                "subject": {
                    "description": "证书主题",
                    "type": "string"
                },
                "valid": {
                    "description": "证书是否有效",
                    "type": "boolean"
                }
            }
        },
        "model.K8sVolumeMount": {
            "type": "object",
            "required": [
                "mount_path",
                "name"
            ],
            "properties": {
                "mount_path": {
                    "description": "挂载路径，必填，长度限制为255字符",
                    "type": "string"
                },
                "name": {
                    "description": "卷名称，必填，长度限制为100字符",
                    "type": "string"
                },
                "read_only": {
                    "description": "是否只读",
                    "type": "boolean"
                },
                "sub_path": {
                    "description": "子路径（可选），长度限制为255字符",
                    "type": "string"
                }
            }
        },
        "model.K8sYamlTask": {
            "type": "object",
            "properties": {
                "apply_result": {
                    "description": "apply 结果",
                    "type": "string"
                },
                "cluster_id": {
                    "description": "集群名称",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "description": "YAML 任务名称",
                    "type": "string"
                },
                "status": {
                    "description": "当前状态",
                    "type": "string"
                },
                "template_id": {
                    "description": "关联的模板ID",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "创建者用户ID",
                    "type": "integer"
                },
                "variables": {
                    "description": "YAML 变量",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.K8sYamlTemplate": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "content": {
                    "description": "YAML 模板内容",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "description": "模板名称",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "创建者用户ID",
                    "type": "integer"
                }
            }
        },
        "model.LabelK8sNodesReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "labels",
                "mod_type",
                "node_name"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群id，必填",
                    "type": "integer"
                },
                "labels": {
                    "description": "标签键值对，必填",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mod_type": {
                    "description": "操作类型，必填，值为 \"add\" 或 \"del\"",
                    "type": "string",
                    "enum": [
                        "add",
                        "del"
                    ]
                },
                "node_name": {
                    "description": "节点名称列表，必填",
                    "type": "string"
                }
            }
        },
        "model.LabelSelector": {
            "type": "object",
            "properties": {
                "match_expressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.LabelSelectorRequirement"
                    }
                },
                "match_labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "model.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.ManualSendNotificationReq": {
            "type": "object",
            "required": [
                "channels",
                "content",
                "recipient",
                "subject"
            ],
            "properties": {
                "channels": {
                    "description": "通知渠道列表",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "description": "通知内容",
                    "type": "string"
                },
                "recipient": {
                    "description": "接收人地址",
                    "type": "string"
                },
                "subject": {
                    "description": "通知主题",
                    "type": "string"
                }
            }
        },
        "model.MoveTreeNodeReq": {
            "type": "object",
            "required": [
                "id",
                "new_parent_id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "new_parent_id": {
                    "description": "新父节点ID，必填",
                    "type": "integer"
                }
            }
        },
        "model.Namespace": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "命名空间注解",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "creation_time": {
                    "description": "创建时间",
                    "type": "string"
                },
                "labels": {
                    "description": "命名空间标签",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "命名空间名称",
                    "type": "string"
                },
                "status": {
                    "description": "命名空间状态，例如 Active",
                    "type": "string"
                },
                "uid": {
                    "description": "命名空间唯一标识符",
                    "type": "string"
                }
            }
        },
        "model.OneEvent": {
            "type": "object",
            "properties": {
                "component": {
                    "description": "事件的组件来源，例如 \"kubelet\"",
                    "type": "string"
                },
                "count": {
                    "description": "事件发生的次数",
                    "type": "integer"
                },
                "first_time": {
                    "description": "事件第一次发生的时间，例如 \"2024-04-27T10:00:00Z\"",
                    "type": "string"
                },
                "last_time": {
                    "description": "事件最近一次发生的时间，例如 \"2024-04-27T12:00:00Z\"",
                    "type": "string"
                },
                "message": {
                    "description": "事件的详细消息",
                    "type": "string"
                },
                "object": {
                    "description": "事件关联的对象信息，例如 \"kind:Node name:node-1\"",
                    "type": "string"
                },
                "reason": {
                    "description": "事件的原因，例如 \"NodeReady\"",
                    "type": "string"
                },
                "type": {
                    "description": "事件类型，例如 \"Normal\", \"Warning\"",
                    "type": "string"
                }
            }
        },
        "model.PersistentVolumeClaimTemplate": {
            "type": "object",
            "properties": {
                "access_modes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "resources": {
                    "$ref": "#/definitions/model.ResourceRequirements"
                },
                "selector": {
                    "$ref": "#/definitions/model.LabelSelector"
                },
                "size": {
                    "type": "string"
                },
                "storage_class": {
                    "type": "string"
                }
            }
        },
        "model.ProcessConnection": {
            "type": "object",
            "properties": {
                "from": {
                    "description": "来源步骤ID",
                    "type": "string"
                },
                "to": {
                    "description": "目标步骤ID",
                    "type": "string"
                }
            }
        },
        "model.ProcessDefinition": {
            "type": "object",
            "required": [
                "connections",
                "steps"
            ],
            "properties": {
                "connections": {
                    "description": "连接列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProcessConnection"
                    }
                },
                "steps": {
                    "description": "步骤列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProcessStep"
                    }
                }
            }
        },
        "model.ProcessStep": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "actions": {
                    "description": "可执行动作",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "assignee_ids": {
                    "description": "受理人ID列表",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "assignee_type": {
                    "description": "受理人类型",
                    "type": "string"
                },
                "id": {
                    "description": "步骤唯一标识",
                    "type": "string"
                },
                "name": {
                    "description": "步骤名称",
                    "type": "string"
                },
                "sort_order": {
                    "description": "排序",
                    "type": "integer"
                },
                "type": {
                    "description": "步骤类型",
                    "type": "string"
                }
            }
        },
        "model.PromqlAlertRuleExprCheckReq": {
            "type": "object",
            "required": [
                "promql_expr"
            ],
            "properties": {
                "promql_expr": {
                    "type": "string"
                }
            }
        },
        "model.RejectWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "comment",
                "id"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.RemoveTreeNodeMemberReq": {
            "type": "object",
            "required": [
                "member_type",
                "node_id",
                "user_id"
            ],
            "properties": {
                "member_type": {
                    "enum": [
                        1,
                        2
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TreeNodeMemberType"
                        }
                    ]
                },
                "node_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.Resource": {
            "type": "object",
            "properties": {
                "creation_time": {
                    "description": "创建时间",
                    "type": "string"
                },
                "name": {
                    "description": "资源名称",
                    "type": "string"
                },
                "namespace": {
                    "description": "所属命名空间",
                    "type": "string"
                },
                "status": {
                    "description": "资源状态，例如 Running, Pending",
                    "type": "string"
                },
                "type": {
                    "description": "资源类型，例如 Pod, Service, Deployment",
                    "type": "string"
                }
            }
        },
        "model.ResourceRequirements": {
            "type": "object",
            "properties": {
                "limits": {
                    "description": "资源限制",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.K8sResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "资源请求",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.K8sResourceList"
                        }
                    ]
                }
            }
        },
        "model.ResourceStatus": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "x-enum-varnames": [
                "RUNNING",
                "STOPPED",
                "STARTING",
                "STOPPING",
                "RESTARTING",
                "DELETING",
                "ERROR"
            ]
        },
        "model.ReturnWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "comment",
                "id"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.RevokeRoleApiRequest": {
            "type": "object",
            "required": [
                "api_ids",
                "role_id"
            ],
            "properties": {
                "api_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "role_id": {
                    "type": "integer"
                }
            }
        },
        "model.RevokeRolesFromUserRequest": {
            "type": "object",
            "required": [
                "role_ids",
                "user_id"
            ],
            "properties": {
                "role_ids": {
                    "description": "角色ID列表",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "user_id": {
                    "description": "用户ID",
                    "type": "integer"
                }
            }
        },
        "model.Role": {
            "type": "object",
            "properties": {
                "apis": {
                    "description": "多对多关联API",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Api"
                    }
                },
                "code": {
                    "description": "角色编码，唯一且非空",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "description": "角色描述",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_system": {
                    "description": "是否系统角色，系统角色不可删除",
                    "type": "integer"
                },
                "name": {
                    "description": "角色名称，唯一且非空",
                    "type": "string"
                },
                "status": {
                    "description": "角色状态",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "description": "多对多关联用户",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                }
            }
        },
        "model.ScheduleK8sNodesReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "node_name"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群id，必填",
                    "type": "integer"
                },
                "node_name": {
                    "description": "节点名称列表，必填",
                    "type": "string"
                },
                "schedule_enable": {
                    "type": "boolean"
                }
            }
        },
        "model.SecretCreateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "name",
                "namespace"
            ],
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "type": "integer"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "string_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.SecretKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.SecretUpdateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "namespace",
                "resource_name"
            ],
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "type": "integer"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "resource_name": {
                    "type": "string"
                },
                "string_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "model.ServiceDiscoveryType": {
            "type": "integer",
            "enum": [
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "ServiceDiscoveryTypeK8s",
                "ServiceDiscoveryTypeHttp",
                "ServiceDiscoveryTypeStatic"
            ]
        },
        "model.StatefulSetCreateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "image",
                "name",
                "namespace",
                "service_name"
            ],
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "type": "integer"
                },
                "env": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EnvVar"
                    }
                },
                "image": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ContainerPort"
                    }
                },
                "replicas": {
                    "type": "integer"
                },
                "resources": {
                    "$ref": "#/definitions/model.ResourceRequirements"
                },
                "service_name": {
                    "type": "string"
                },
                "update_strategy": {
                    "$ref": "#/definitions/model.StatefulSetUpdateStrategy"
                },
                "volume_claim_templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PersistentVolumeClaimTemplate"
                    }
                }
            }
        },
        "model.StatefulSetRollingUpdateStrategy": {
            "type": "object",
            "properties": {
                "max_unavailable": {
                    "type": "string"
                },
                "partition": {
                    "type": "integer"
                }
            }
        },
        "model.StatefulSetScaleReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "namespace",
                "replicas",
                "resource_name"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "namespace": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer",
                    "minimum": 0
                },
                "resource_name": {
                    "type": "string"
                }
            }
        },
        "model.StatefulSetUpdateReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "namespace",
                "resource_name"
            ],
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "type": "integer"
                },
                "env": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EnvVar"
                    }
                },
                "image": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ContainerPort"
                    }
                },
                "replicas": {
                    "type": "integer"
                },
                "resource_name": {
                    "type": "string"
                },
                "resources": {
                    "$ref": "#/definitions/model.ResourceRequirements"
                },
                "update_strategy": {
                    "$ref": "#/definitions/model.StatefulSetUpdateStrategy"
                },
                "volume_claim_templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PersistentVolumeClaimTemplate"
                    }
                }
            }
        },
        "model.StatefulSetUpdateStrategy": {
            "type": "object",
            "properties": {
                "rolling_update": {
                    "$ref": "#/definitions/model.StatefulSetRollingUpdateStrategy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.SubmitWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "model.SystemInfoResponse": {
            "type": "object",
            "properties": {
                "arch": {
                    "description": "系统架构",
                    "type": "string"
                },
                "cpu_cores": {
                    "description": "CPU核心数",
                    "type": "integer"
                },
                "cpu_model": {
                    "description": "CPU型号",
                    "type": "string"
                },
                "cpu_usage": {
                    "description": "CPU使用率",
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "disk_total": {
                    "description": "总磁盘空间（GB）",
                    "type": "integer"
                },
                "disk_usage": {
                    "description": "磁盘使用率",
                    "type": "number"
                },
                "disk_usage_formatted": {
                    "description": "格式化的磁盘使用情况",
                    "type": "string"
                },
                "disk_used": {
                    "description": "已用磁盘空间（GB）",
                    "type": "integer"
                },
                "hostname": {
                    "description": "主机名",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_update_time": {
                    "description": "最后更新时间",
                    "type": "integer"
                },
                "load_avg_1": {
                    "description": "1分钟平均负载",
                    "type": "number"
                },
                "load_avg_15": {
                    "description": "15分钟平均负载",
                    "type": "number"
                },
                "load_avg_5": {
                    "description": "5分钟平均负载",
                    "type": "number"
                },
                "memory_total": {
                    "description": "总内存（MB）",
                    "type": "integer"
                },
                "memory_usage": {
                    "description": "内存使用率",
                    "type": "number"
                },
                "memory_usage_formatted": {
                    "description": "格式化的内存使用情况",
                    "type": "string"
                },
                "memory_used": {
                    "description": "已用内存（MB）",
                    "type": "integer"
                },
                "network_in": {
                    "description": "网络入流量（MB）",
                    "type": "integer"
                },
                "network_out": {
                    "description": "网络出流量（MB）",
                    "type": "integer"
                },
                "os": {
                    "description": "操作系统",
                    "type": "string"
                },
                "os_version": {
                    "description": "操作系统版本",
                    "type": "string"
                },
                "process_count": {
                    "description": "进程数",
                    "type": "integer"
                },
                "system_status": {
                    "description": "系统状态",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uptime": {
                    "description": "系统运行时长（秒）",
                    "type": "integer"
                },
                "uptime_formatted": {
                    "description": "格式化的运行时间",
                    "type": "string"
                }
            }
        },
        "model.TaintK8sNodesReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "node_name"
            ],
            "properties": {
                "cluster_id": {
                    "description": "集群id，必填",
                    "type": "integer"
                },
                "mod_type": {
                    "description": "操作类型，值为 \"add\" 或 \"del\"",
                    "type": "string"
                },
                "node_name": {
                    "description": "节点名称列表，必填",
                    "type": "string"
                },
                "taint_yaml": {
                    "description": "可选的 Taint YAML 字符串，用于验证或其他用途",
                    "type": "string"
                }
            }
        },
        "model.TestSendWorkorderNotificationReq": {
            "type": "object",
            "required": [
                "notification_id"
            ],
            "properties": {
                "notification_id": {
                    "type": "integer"
                },
                "recipient": {
                    "description": "可选，如果不提供则使用默认测试地址",
                    "type": "string"
                }
            }
        },
        "model.TokenRequest": {
            "type": "object",
            "required": [
                "account_type",
                "refreshToken",
                "ssid",
                "user_id",
                "username"
            ],
            "properties": {
                "account_type": {
                    "description": "账号类型 1普通用户 2服务账号",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "refreshToken": {
                    "description": "刷新令牌",
                    "type": "string"
                },
                "ssid": {
                    "description": "会话ID",
                    "type": "string"
                },
                "user_id": {
                    "description": "用户ID",
                    "type": "integer"
                },
                "username": {
                    "description": "用户名",
                    "type": "string"
                }
            }
        },
        "model.Toleration": {
            "type": "object",
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "toleration_seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.TreeLocalResource": {
            "type": "object",
            "properties": {
                "auth_mode": {
                    "$ref": "#/definitions/model.AuthMode"
                },
                "cpu": {
                    "type": "integer"
                },
                "create_user_id": {
                    "type": "integer"
                },
                "create_user_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "disk": {
                    "type": "integer"
                },
                "environment": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_name": {
                    "type": "string"
                },
                "ip_addr": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "memory": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "os_name": {
                    "type": "string"
                },
                "os_type": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/model.ResourceStatus"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tree_nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TreeNode"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.TreeNode": {
            "type": "object",
            "properties": {
                "admins": {
                    "description": "管理员多对多关系",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "children": {
                    "description": "子节点列表",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TreeNode"
                    }
                },
                "create_user_id": {
                    "description": "创建者ID",
                    "type": "integer"
                },
                "create_user_name": {
                    "description": "创建者姓名",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "description": "节点描述",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_leaf": {
                    "description": "是否为叶子节点",
                    "type": "integer"
                },
                "level": {
                    "description": "节点层级",
                    "type": "integer"
                },
                "members": {
                    "description": "成员多对多关系",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "name": {
                    "description": "节点名称",
                    "type": "string"
                },
                "parent_id": {
                    "description": "父节点ID",
                    "type": "integer"
                },
                "status": {
                    "description": "节点状态",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TreeNodeStatus"
                        }
                    ]
                },
                "tree_local_resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TreeLocalResource"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.TreeNodeMemberType": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "AdminRole",
                "MemberRole"
            ]
        },
        "model.TreeNodeStatisticsResp": {
            "type": "object",
            "properties": {
                "active_nodes": {
                    "description": "活跃节点数",
                    "type": "integer"
                },
                "inactive_nodes": {
                    "description": "非活跃节点数",
                    "type": "integer"
                },
                "total_admins": {
                    "description": "管理员总数",
                    "type": "integer"
                },
                "total_members": {
                    "description": "成员总数",
                    "type": "integer"
                },
                "total_nodes": {
                    "description": "节点总数",
                    "type": "integer"
                },
                "total_resources": {
                    "description": "资源总数",
                    "type": "integer"
                }
            }
        },
        "model.TreeNodeStatus": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "ACTIVE",
                "INACTIVE"
            ]
        },
        "model.UnBindTreeLocalResourceReq": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "tree_node_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.UnbindTreeNodeResourceReq": {
            "type": "object",
            "required": [
                "node_id",
                "resource_id"
            ],
            "properties": {
                "node_id": {
                    "type": "integer"
                },
                "resource_id": {
                    "type": "integer"
                }
            }
        },
        "model.UpdateApiRequest": {
            "type": "object",
            "required": [
                "id",
                "method",
                "name",
                "path"
            ],
            "properties": {
                "category": {
                    "description": "API分类",
                    "type": "integer"
                },
                "description": {
                    "description": "API描述",
                    "type": "string"
                },
                "id": {
                    "description": "API ID",
                    "type": "integer"
                },
                "is_public": {
                    "description": "是否公开",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "method": {
                    "description": "请求方法",
                    "type": "integer"
                },
                "name": {
                    "description": "API名称",
                    "type": "string"
                },
                "path": {
                    "description": "API路径",
                    "type": "string"
                },
                "version": {
                    "description": "API版本",
                    "type": "string"
                }
            }
        },
        "model.UpdateMonitorAlertManagerPoolReq": {
            "type": "object",
            "required": [
                "alert_manager_instances",
                "id",
                "name",
                "receiver"
            ],
            "properties": {
                "alert_manager_instances": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "group_by": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "group_interval": {
                    "type": "string"
                },
                "group_wait": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "receiver": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "repeat_interval": {
                    "type": "string"
                },
                "resolve_timeout": {
                    "type": "string"
                }
            }
        },
        "model.UpdateMonitorAlertRuleReq": {
            "type": "object",
            "required": [
                "expr",
                "for_time",
                "id",
                "name",
                "pool_id",
                "send_group_id"
            ],
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enable": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "expr": {
                    "type": "string"
                },
                "for_time": {
                    "type": "string"
                },
                "grafana_link": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip_address": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "pool_id": {
                    "type": "integer"
                },
                "send_group_id": {
                    "type": "integer"
                },
                "severity": {
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AlertRuleSeverity"
                        }
                    ]
                }
            }
        },
        "model.UpdateMonitorConfigReq": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "config_content": {
                    "type": "string"
                },
                "config_type": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                "id": {
                    "type": "integer"
                },
                "instance_ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "pool_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "model.UpdateMonitorOnDutyGroupReq": {
            "type": "object",
            "required": [
                "id",
                "name",
                "shift_days",
                "user_ids"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 255
                },
                "enable": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "shift_days": {
                    "type": "integer",
                    "minimum": 1
                },
                "user_ids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.UpdateMonitorRecordRuleReq": {
            "type": "object",
            "required": [
                "expr",
                "id",
                "name",
                "pool_id"
            ],
            "properties": {
                "enable": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "expr": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip_address": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "pool_id": {
                    "type": "integer"
                }
            }
        },
        "model.UpdateMonitorScrapeJobReq": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "bearer_token": {
                    "type": "string"
                },
                "bearer_token_file": {
                    "type": "string"
                },
                "enable": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "ip_address": {
                    "type": "string"
                },
                "kube_config_file_path": {
                    "type": "string"
                },
                "kubernetes_sd_role": {
                    "type": "string"
                },
                "metrics_path": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "pool_id": {
                    "type": "integer"
                },
                "port": {
                    "type": "integer"
                },
                "refresh_interval": {
                    "type": "integer"
                },
                "relabel_configs_yaml_string": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "scrape_interval": {
                    "type": "integer"
                },
                "scrape_timeout": {
                    "type": "integer"
                },
                "service_discovery_type": {
                    "$ref": "#/definitions/model.ServiceDiscoveryType"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tls_ca_content": {
                    "type": "string"
                },
                "tls_ca_file_path": {
                    "type": "string"
                },
                "tree_node_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.UpdateMonitorScrapePoolReq": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "alert_manager_url": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "prometheus_instances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "record_file_path": {
                    "type": "string"
                },
                "remote_read_url": {
                    "type": "string"
                },
                "remote_timeout_seconds": {
                    "type": "integer"
                },
                "remote_write_url": {
                    "type": "string"
                },
                "rule_file_path": {
                    "type": "string"
                },
                "scrape_interval": {
                    "type": "integer"
                },
                "scrape_timeout": {
                    "type": "integer"
                },
                "support_alert": {
                    "type": "integer"
                },
                "support_record": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.UpdateMonitorSendGroupReq": {
            "type": "object",
            "required": [
                "id",
                "name",
                "name_zh",
                "pool_id"
            ],
            "properties": {
                "enable": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "fei_shu_qun_robot_token": {
                    "type": "string",
                    "maxLength": 255
                },
                "first_upgrade_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "name_zh": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "need_upgrade": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "notify_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "on_duty_group_id": {
                    "type": "integer"
                },
                "pool_id": {
                    "type": "integer"
                },
                "repeat_interval": {
                    "type": "string",
                    "maxLength": 50
                },
                "second_upgrade_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "send_resolved": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "static_receive_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "upgrade_minutes": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "model.UpdateNamespaceReq": {
            "type": "object",
            "required": [
                "cluster_id",
                "namespace"
            ],
            "properties": {
                "annotations": {
                    "description": "命名空间注解",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cluster_id": {
                    "type": "integer"
                },
                "labels": {
                    "description": "命名空间标签",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "model.UpdateProfileReq": {
            "type": "object",
            "required": [
                "account_type",
                "home_path",
                "id",
                "mobile",
                "real_name"
            ],
            "properties": {
                "account_type": {
                    "description": "账号类型",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "avatar": {
                    "description": "用户头像",
                    "type": "string"
                },
                "desc": {
                    "description": "描述",
                    "type": "string"
                },
                "email": {
                    "description": "邮箱",
                    "type": "string"
                },
                "enable": {
                    "description": "用户状态",
                    "type": "integer",
                    "default": 1,
                    "enum": [
                        1,
                        2
                    ]
                },
                "fei_shu_user_id": {
                    "description": "飞书用户ID",
                    "type": "string"
                },
                "home_path": {
                    "description": "默认首页",
                    "type": "string"
                },
                "id": {
                    "description": "用户ID",
                    "type": "integer"
                },
                "mobile": {
                    "description": "手机号",
                    "type": "string"
                },
                "real_name": {
                    "description": "真实姓名",
                    "type": "string"
                }
            }
        },
        "model.UpdateRoleRequest": {
            "type": "object",
            "required": [
                "code",
                "id",
                "name"
            ],
            "properties": {
                "api_ids": {
                    "description": "关联的API ID列表",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "code": {
                    "description": "角色编码",
                    "type": "string",
                    "maxLength": 50
                },
                "description": {
                    "description": "角色描述",
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "description": "角色ID",
                    "type": "integer"
                },
                "name": {
                    "description": "角色名称",
                    "type": "string",
                    "maxLength": 50
                },
                "status": {
                    "description": "状态",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                }
            }
        },
        "model.UpdateTreeLocalResourceReq": {
            "type": "object",
            "properties": {
                "auth_mode": {
                    "$ref": "#/definitions/model.AuthMode"
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_name": {
                    "type": "string"
                },
                "ip_addr": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os_name": {
                    "type": "string"
                },
                "os_type": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.UpdateTreeNodeReq": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_leaf": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "parent_id": {
                    "type": "integer"
                },
                "status": {
                    "enum": [
                        1,
                        2
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TreeNodeStatus"
                        }
                    ]
                }
            }
        },
        "model.UpdateWorkorderCategoryReq": {
            "type": "object",
            "required": [
                "id",
                "name",
                "status"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "model.UpdateWorkorderFormDesignReq": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                },
                "is_template": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "schema": {
                    "$ref": "#/definitions/model.FormSchema"
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.UpdateWorkorderInstanceCommentReq": {
            "type": "object",
            "required": [
                "content",
                "id"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "maxLength": 2000,
                    "minLength": 1
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                },
                "is_system": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                }
            }
        },
        "model.UpdateWorkorderInstanceReq": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "assignee_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "completed_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 2000
                },
                "due_date": {
                    "type": "string"
                },
                "form_data": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                },
                "priority": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                }
            }
        },
        "model.UpdateWorkorderNotificationReq": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "event_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "is_default": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "max_retries": {
                    "type": "integer"
                },
                "message_template": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process_id": {
                    "type": "integer"
                },
                "recipient_depts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient_users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repeat_interval": {
                    "type": "integer"
                },
                "retry_interval": {
                    "type": "integer"
                },
                "scheduled_time": {
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "status": {
                    "type": "integer"
                },
                "subject_template": {
                    "type": "string"
                },
                "template_id": {
                    "type": "integer"
                },
                "trigger_condition": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "trigger_type": {
                    "type": "string"
                }
            }
        },
        "model.UpdateWorkorderProcessReq": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "definition": {
                    "$ref": "#/definitions/model.ProcessDefinition"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "form_design_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                },
                "is_default": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.UpdateWorkorderTemplateReq": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "default_values": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "form_design_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "id": {
                    "type": "integer",
                    "minimum": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "process_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "account_type": {
                    "description": "账号类型，使用int8节省空间",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "apis": {
                    "description": "多对多关联接口",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Api"
                    }
                },
                "avatar": {
                    "description": "用户头像",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "desc": {
                    "description": "用户描述，支持较长文本",
                    "type": "string"
                },
                "domain": {
                    "description": "用户域，默认default",
                    "type": "string"
                },
                "email": {
                    "description": "邮箱，添加唯一索引",
                    "type": "string"
                },
                "enable": {
                    "description": "用户状态，使用int8节省空间",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "fei_shu_user_id": {
                    "description": "飞书用户ID，添加唯一索引",
                    "type": "string"
                },
                "home_path": {
                    "description": "登录后的默认首页，添加默认值",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mobile": {
                    "description": "手机号，添加唯一索引",
                    "type": "string"
                },
                "real_name": {
                    "description": "用户真实姓名",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "description": "用户登录名，唯一且非空",
                    "type": "string"
                }
            }
        },
        "model.UserLoginReq": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "密码",
                    "type": "string"
                },
                "username": {
                    "description": "用户名",
                    "type": "string"
                }
            }
        },
        "model.UserSignUpReq": {
            "type": "object",
            "required": [
                "account_type",
                "mobile",
                "password",
                "real_name",
                "username"
            ],
            "properties": {
                "account_type": {
                    "description": "账号类型 1普通用户 2服务账号",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "avatar": {
                    "description": "用户头像",
                    "type": "string"
                },
                "desc": {
                    "description": "用户描述",
                    "type": "string"
                },
                "email": {
                    "description": "邮箱",
                    "type": "string"
                },
                "enable": {
                    "description": "用户状态 1正常 2冻结",
                    "type": "integer",
                    "default": 1,
                    "enum": [
                        1,
                        2
                    ]
                },
                "fei_shu_user_id": {
                    "description": "飞书用户ID",
                    "type": "string"
                },
                "home_path": {
                    "description": "默认首页",
                    "type": "string",
                    "default": "/"
                },
                "mobile": {
                    "description": "手机号",
                    "type": "string"
                },
                "password": {
                    "description": "密码，至少6位",
                    "type": "string",
                    "minLength": 6
                },
                "real_name": {
                    "description": "真实姓名",
                    "type": "string"
                },
                "username": {
                    "description": "用户名",
                    "type": "string"
                }
            }
        },
        "model.WorkorderCategory": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "integer"
                },
                "operator_name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.WorkorderFormDesign": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/model.WorkorderCategory"
                },
                "category_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_template": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "integer"
                },
                "operator_name": {
                    "type": "string"
                },
                "schema": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "status": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.WorkorderInstance": {
            "type": "object",
            "properties": {
                "assignee_id": {
                    "type": "integer"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.WorkorderInstanceComment"
                    }
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "current_step_id": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "flow_logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.WorkorderInstanceFlow"
                    }
                },
                "form_data": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "id": {
                    "type": "integer"
                },
                "operator_id": {
                    "type": "integer"
                },
                "operator_name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "process": {
                    "description": "关联字段",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.WorkorderProcess"
                        }
                    ]
                },
                "process_id": {
                    "type": "integer"
                },
                "serial_number": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeline": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.WorkorderInstanceTimeline"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.WorkorderInstanceComment": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.WorkorderInstanceComment"
                    }
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "is_system": {
                    "type": "integer"
                },
                "operator_id": {
                    "type": "integer"
                },
                "operator_name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.WorkorderInstanceFlow": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "from_status": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "is_system_action": {
                    "type": "integer"
                },
                "operator_id": {
                    "type": "integer"
                },
                "operator_name": {
                    "type": "string"
                },
                "to_status": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.WorkorderInstanceTimeline": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "action_detail": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "instance_id": {
                    "type": "integer"
                },
                "operator_id": {
                    "type": "integer"
                },
                "operator_name": {
                    "type": "string"
                },
                "related_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.WorkorderProcess": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/model.WorkorderCategory"
                },
                "category_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "definition": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "form_design": {
                    "$ref": "#/definitions/model.WorkorderFormDesign"
                },
                "form_design_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_default": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "integer"
                },
                "operator_name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.WorkorderTemplate": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/model.WorkorderCategory"
                },
                "category_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "default_values": {
                    "$ref": "#/definitions/model.JSONMap"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "form_design": {
                    "$ref": "#/definitions/model.WorkorderFormDesign"
                },
                "form_design_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "integer"
                },
                "operator_name": {
                    "type": "string"
                },
                "process": {
                    "$ref": "#/definitions/model.WorkorderProcess"
                },
                "process_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.WriteOffReq": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "密码",
                    "type": "string"
                },
                "username": {
                    "description": "用户名",
                    "type": "string"
                }
            }
        },
        "model.YamlTaskCreateReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "template_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.YamlTaskUpdateReq": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "template_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.YamlTemplateCheckReq": {
            "type": "object",
            "required": [
                "content",
                "name"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                }
            }
        },
        "model.YamlTemplateCreateReq": {
            "type": "object",
            "required": [
                "content",
                "name"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.YamlTemplateUpdateReq": {
            "type": "object",
            "required": [
                "content",
                "id",
                "name"
            ],
            "properties": {
                "cluster_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "resource.Quantity": {
            "type": "object",
            "properties": {
                "Format": {
                    "type": "string",
                    "enum": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ],
                    "x-enum-comments": {
                        "BinarySI": "e.g., 12Mi (12 * 2^20)",
                        "DecimalExponent": "e.g., 12e6",
                        "DecimalSI": "e.g., 12M  (12 * 10^6)"
                    },
                    "x-enum-varnames": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ]
                }
            }
        },
        "utils.ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "状态码，表示业务逻辑的状态，而非HTTP状态码",
                    "type": "integer"
                },
                "data": {
                    "description": "响应数据"
                },
                "message": {
                    "description": "反馈信息",
                    "type": "string"
                },
                "type": {
                    "description": "消息类型",
                    "type": "string"
                }
            }
        },
        "v1.AWSElasticBlockStoreVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "partition": {
                    "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n+optional",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string"
                }
            }
        },
        "v1.Affinity": {
            "type": "object",
            "properties": {
                "nodeAffinity": {
                    "description": "Describes node affinity scheduling rules for the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeAffinity"
                        }
                    ]
                },
                "podAffinity": {
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinity"
                        }
                    ]
                },
                "podAntiAffinity": {
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAntiAffinity"
                        }
                    ]
                }
            }
        },
        "v1.AppArmorProfile": {
            "type": "object",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.\n+unionDiscriminator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfileType"
                        }
                    ]
                }
            }
        },
        "v1.AppArmorProfileType": {
            "type": "string",
            "enum": [
                "Unconfined",
                "RuntimeDefault",
                "Localhost"
            ],
            "x-enum-varnames": [
                "AppArmorProfileTypeUnconfined",
                "AppArmorProfileTypeRuntimeDefault",
                "AppArmorProfileTypeLocalhost"
            ]
        },
        "v1.AzureDataDiskCachingMode": {
            "type": "string",
            "enum": [
                "None",
                "ReadOnly",
                "ReadWrite"
            ],
            "x-enum-varnames": [
                "AzureDataDiskCachingNone",
                "AzureDataDiskCachingReadOnly",
                "AzureDataDiskCachingReadWrite"
            ]
        },
        "v1.AzureDataDiskKind": {
            "type": "string",
            "enum": [
                "Shared",
                "Dedicated",
                "Managed"
            ],
            "x-enum-varnames": [
                "AzureSharedBlobDisk",
                "AzureDedicatedBlobDisk",
                "AzureManagedDisk"
            ]
        },
        "v1.AzureDiskVolumeSource": {
            "type": "object",
            "properties": {
                "cachingMode": {
                    "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.\n+optional\n+default=ref(AzureDataDiskCachingReadWrite)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDataDiskCachingMode"
                        }
                    ]
                },
                "diskName": {
                    "description": "diskName is the Name of the data disk in the blob storage",
                    "type": "string"
                },
                "diskURI": {
                    "description": "diskURI is the URI of data disk in the blob storage",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional\n+default=\"ext4\"",
                    "type": "string"
                },
                "kind": {
                    "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared\n+default=ref(AzureSharedBlobDisk)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDataDiskKind"
                        }
                    ]
                },
                "readOnly": {
                    "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional\n+default=false",
                    "type": "boolean"
                }
            }
        },
        "v1.AzureFileVolumeSource": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
                    "type": "string"
                },
                "shareName": {
                    "description": "shareName is the azure share Name",
                    "type": "string"
                }
            }
        },
        "v1.CSIVolumeSource": {
            "type": "object",
            "properties": {
                "driver": {
                    "description": "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.\n+optional",
                    "type": "string"
                },
                "nodePublishSecretRef": {
                    "description": "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "readOnly": {
                    "description": "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).\n+optional",
                    "type": "boolean"
                },
                "volumeAttributes": {
                    "description": "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.Capabilities": {
            "type": "object",
            "properties": {
                "add": {
                    "description": "Added capabilities\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "drop": {
                    "description": "Removed capabilities\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.CephFSVolumeSource": {
            "type": "object",
            "properties": {
                "monitors": {
                    "description": "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "boolean"
                },
                "secretFile": {
                    "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "user": {
                    "description": "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.CinderVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "volumeID": {
                    "description": "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                }
            }
        },
        "v1.ClientIPConfig": {
            "type": "object",
            "properties": {
                "timeoutSeconds": {
                    "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time.\nThe value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\".\nDefault value is 10800(for 3 hours).\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ClusterTrustBundleProjection": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as \"match nothing\".  If set but empty, interpreted as \"match\neverything\".\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "name": {
                    "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.\n+optional",
                    "type": "boolean"
                },
                "path": {
                    "description": "Relative path from the volume root to write the bundle.",
                    "type": "string"
                },
                "signerName": {
                    "description": "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.Condition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Type=string\n+kubebuilder:validation:Format=date-time",
                    "type": "string"
                },
                "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:MaxLength=32768",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\n+optional\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:MaxLength=1024\n+kubebuilder:validation:MinLength=1\n+kubebuilder:validation:Pattern=` + "`" + `^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$` + "`" + `",
                    "type": "string"
                },
                "status": {
                    "description": "status of the condition, one of True, False, Unknown.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Enum=True;False;Unknown",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_apimachinery_pkg_apis_meta_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=` + "`" + `^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$` + "`" + `\n+kubebuilder:validation:MaxLength=316",
                    "type": "string"
                }
            }
        },
        "v1.ConfigMapEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.Container": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Lifecycle"
                        }
                    ]
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
                    "type": "string"
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerPort"
                    }
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.\n+featureGate=InPlacePodVerticalScaling\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerResizePolicy"
                    }
                },
                "resources": {
                    "description": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.\n+featureGate=SidecarContainers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerRestartPolicy"
                        }
                    ]
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TerminationMessagePolicy"
                        }
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+listType=map\n+listMapKey=devicePath\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=map\n+listMapKey=mountPath",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerPort": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                    "type": "integer"
                },
                "hostIP": {
                    "description": "What host IP to bind the external port to.\n+optional",
                    "type": "string"
                },
                "hostPort": {
                    "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
                    "type": "integer"
                },
                "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.ContainerResizePolicy": {
            "type": "object",
            "properties": {
                "resourceName": {
                    "description": "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceName"
                        }
                    ]
                },
                "restartPolicy": {
                    "description": "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceResizeRestartPolicy"
                        }
                    ]
                }
            }
        },
        "v1.ContainerRestartPolicy": {
            "type": "string",
            "enum": [
                "Always"
            ],
            "x-enum-varnames": [
                "ContainerRestartPolicyAlways"
            ]
        },
        "v1.DNSPolicy": {
            "type": "string",
            "enum": [
                "ClusterFirstWithHostNet",
                "ClusterFirst",
                "Default",
                "None"
            ],
            "x-enum-varnames": [
                "DNSClusterFirstWithHostNet",
                "DNSClusterFirst",
                "DNSDefault",
                "DNSNone"
            ]
        },
        "v1.DaemonSet": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "The desired behavior of this daemon set.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DaemonSetSpec"
                        }
                    ]
                },
                "status": {
                    "description": "The current status of this daemon set. This data may be\nout of date by some window of time.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DaemonSetStatus"
                        }
                    ]
                }
            }
        },
        "v1.DaemonSetCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.\n+optional",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of DaemonSet condition.",
                    "type": "string"
                }
            }
        },
        "v1.DaemonSetSpec": {
            "type": "object",
            "properties": {
                "minReadySeconds": {
                    "description": "The minimum number of seconds for which a newly created DaemonSet pod should\nbe ready without any of its container crashing, for it to be considered\navailable. Defaults to 0 (pod will be considered available as soon as it\nis ready).\n+optional",
                    "type": "integer"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old history to retain to allow rollback.\nThis is a pointer to distinguish between explicit zero and not specified.\nDefaults to 10.\n+optional",
                    "type": "integer"
                },
                "selector": {
                    "description": "A label query over pods that are managed by the daemon set.\nMust match in order to be controlled.\nIt must match the pod template's labels.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "template": {
                    "description": "An object that describes the pod that will be created.\nThe DaemonSet will create exactly one copy of this pod on every node\nthat matches the template's node selector (or on every node if no node\nselector is specified).\nThe only allowed template.spec.restartPolicy value is \"Always\".\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodTemplateSpec"
                        }
                    ]
                },
                "updateStrategy": {
                    "description": "An update strategy to replace existing DaemonSet pods with new pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DaemonSetUpdateStrategy"
                        }
                    ]
                }
            }
        },
        "v1.DaemonSetStatus": {
            "type": "object",
            "properties": {
                "collisionCount": {
                    "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller\nuses this field as a collision avoidance mechanism when it needs to\ncreate the name for the newest ControllerRevision.\n+optional",
                    "type": "integer"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a DaemonSet's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DaemonSetCondition"
                    }
                },
                "currentNumberScheduled": {
                    "description": "The number of nodes that are running at least 1\ndaemon pod and are supposed to run the daemon pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer"
                },
                "desiredNumberScheduled": {
                    "description": "The total number of nodes that should be running the daemon\npod (including nodes correctly running the daemon pod).\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer"
                },
                "numberAvailable": {
                    "description": "The number of nodes that should be running the\ndaemon pod and have one or more of the daemon pod running and\navailable (ready for at least spec.minReadySeconds)\n+optional",
                    "type": "integer"
                },
                "numberMisscheduled": {
                    "description": "The number of nodes that are running the daemon pod, but are\nnot supposed to run the daemon pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer"
                },
                "numberReady": {
                    "description": "numberReady is the number of nodes that should be running the daemon pod and have one\nor more of the daemon pod running with a Ready Condition.",
                    "type": "integer"
                },
                "numberUnavailable": {
                    "description": "The number of nodes that should be running the\ndaemon pod and have none of the daemon pod running and available\n(ready for at least spec.minReadySeconds)\n+optional",
                    "type": "integer"
                },
                "observedGeneration": {
                    "description": "The most recent generation observed by the daemon set controller.\n+optional",
                    "type": "integer"
                },
                "updatedNumberScheduled": {
                    "description": "The total number of nodes that are running updated daemon pod\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.DaemonSetUpdateStrategy": {
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if type = \"RollingUpdate\".\n---\nTODO: Update this to follow our convention for oneOf, whatever we decide it\nto be. Same as Deployment ` + "`" + `strategy.rollingUpdate` + "`" + `.\nSee https://github.com/kubernetes/kubernetes/issues/35345\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RollingUpdateDaemonSet"
                        }
                    ]
                },
                "type": {
                    "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DaemonSetUpdateStrategyType"
                        }
                    ]
                }
            }
        },
        "v1.DaemonSetUpdateStrategyType": {
            "type": "string",
            "enum": [
                "RollingUpdate",
                "OnDelete"
            ],
            "x-enum-varnames": [
                "RollingUpdateDaemonSetStrategyType",
                "OnDeleteDaemonSetStrategyType"
            ]
        },
        "v1.Deployment": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Specification of the desired behavior of the Deployment.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Most recently observed status of the Deployment.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentStatus"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "type": "string"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "type": "string"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentConditionType"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentConditionType": {
            "type": "string",
            "enum": [
                "Available",
                "Progressing",
                "ReplicaFailure"
            ],
            "x-enum-varnames": [
                "DeploymentAvailable",
                "DeploymentProgressing",
                "DeploymentReplicaFailure"
            ]
        },
        "v1.DeploymentSpec": {
            "type": "object",
            "properties": {
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing, for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\n+optional",
                    "type": "integer"
                },
                "paused": {
                    "description": "Indicates that the deployment is paused.\n+optional",
                    "type": "boolean"
                },
                "progressDeadlineSeconds": {
                    "description": "The maximum time in seconds for a deployment to make progress before it\nis considered to be failed. The deployment controller will continue to\nprocess failed deployments and a condition with a ProgressDeadlineExceeded\nreason will be surfaced in the deployment status. Note that progress will\nnot be estimated during the time a deployment is paused. Defaults to 600s.",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Number of desired pods. This is a pointer to distinguish between explicit\nzero and not specified. Defaults to 1.\n+optional",
                    "type": "integer"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old ReplicaSets to retain to allow rollback.\nThis is a pointer to distinguish between explicit zero and not specified.\nDefaults to 10.\n+optional",
                    "type": "integer"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are\nselected by this will be the ones affected by this deployment.\nIt must match the pod template's labels.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.\n+optional\n+patchStrategy=retainKeys",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentStrategy"
                        }
                    ]
                },
                "template": {
                    "description": "Template describes the pods that will be created.\nThe only allowed template.spec.restartPolicy value is \"Always\".",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodTemplateSpec"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n+optional",
                    "type": "integer"
                },
                "collisionCount": {
                    "description": "Count of hash collisions for the Deployment. The Deployment controller uses this\nfield as a collision avoidance mechanism when it needs to create the name for the\nnewest ReplicaSet.\n+optional",
                    "type": "integer"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a deployment's current state.\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DeploymentCondition"
                    }
                },
                "observedGeneration": {
                    "description": "The generation observed by the deployment controller.\n+optional",
                    "type": "integer"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.\n+optional",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n+optional",
                    "type": "integer"
                },
                "unavailableReplicas": {
                    "description": "Total number of unavailable pods targeted by this deployment. This is the total number of\npods that are still required for the deployment to have 100% available capacity. They may\neither be pods that are running but not yet available or pods that still have not been created.\n+optional",
                    "type": "integer"
                },
                "updatedReplicas": {
                    "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.DeploymentStrategy": {
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if DeploymentStrategyType =\nRollingUpdate.\n---\nTODO: Update this to follow our convention for oneOf, whatever we decide it\nto be.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RollingUpdateDeployment"
                        }
                    ]
                },
                "type": {
                    "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentStrategyType"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentStrategyType": {
            "type": "string",
            "enum": [
                "Recreate",
                "RollingUpdate"
            ],
            "x-enum-varnames": [
                "RecreateDeploymentStrategyType",
                "RollingUpdateDeploymentStrategyType"
            ]
        },
        "v1.DownwardAPIProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a list of DownwardAPIVolume file\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1.DownwardAPIVolumeFile": {
            "type": "object",
            "properties": {
                "fieldRef": {
                    "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "mode": {
                    "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                    "type": "string"
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                }
            }
        },
        "v1.DownwardAPIVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "Items is a list of downward API volume file\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1.EmptyDirVolumeSource": {
            "type": "object",
            "properties": {
                "medium": {
                    "description": "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StorageMedium"
                        }
                    ]
                },
                "sizeLimit": {
                    "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                }
            }
        },
        "v1.EnvFromSource": {
            "type": "object",
            "properties": {
                "configMapRef": {
                    "description": "The ConfigMap to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapEnvSource"
                        }
                    ]
                },
                "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "The Secret to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretEnvSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVar": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EnvVarSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVarSource": {
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapKeySelector"
                        }
                    ]
                },
                "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, ` + "`" + `metadata.labels['\u003cKEY\u003e']` + "`" + `, ` + "`" + `metadata.annotations['\u003cKEY\u003e']` + "`" + `,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                },
                "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretKeySelector"
                        }
                    ]
                }
            }
        },
        "v1.EphemeralContainer": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "lifecycle": {
                    "description": "Lifecycle is not allowed for ephemeral containers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Lifecycle"
                        }
                    ]
                },
                "livenessProbe": {
                    "description": "Probes are not allowed for ephemeral containers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the ephemeral container specified as a DNS_LABEL.\nThis name must be unique among all containers, init containers and ephemeral containers.",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports are not allowed for ephemeral containers.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerPort"
                    }
                },
                "readinessProbe": {
                    "description": "Probes are not allowed for ephemeral containers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.\n+featureGate=InPlacePodVerticalScaling\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerResizePolicy"
                    }
                },
                "resources": {
                    "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources\nalready allocated to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "restartPolicy": {
                    "description": "Restart policy for the container to manage the restart behavior of each\ncontainer within a pod.\nThis may only be set for init containers. You cannot set this field on\nephemeral containers.\n+featureGate=SidecarContainers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerRestartPolicy"
                        }
                    ]
                },
                "securityContext": {
                    "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "startupProbe": {
                    "description": "Probes are not allowed for ephemeral containers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "type": "boolean"
                },
                "targetContainerName": {
                    "description": "If set, the name of the container from PodSpec that this ephemeral container targets.\nThe ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.\nIf not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not\nsupport namespace targeting then the result of setting this field is undefined.\n+optional",
                    "type": "string"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TerminationMessagePolicy"
                        }
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+listType=map\n+listMapKey=devicePath\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=map\n+listMapKey=mountPath",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.EphemeralVolumeSource": {
            "type": "object",
            "properties": {
                "volumeClaimTemplate": {
                    "description": "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be ` + "`" + `\u003cpod name\u003e-\u003cvolume name\u003e` + "`" + ` where\n` + "`" + `\u003cvolume name\u003e` + "`" + ` is the name from the ` + "`" + `PodSpec.Volumes` + "`" + ` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimTemplate"
                        }
                    ]
                }
            }
        },
        "v1.EventSource": {
            "type": "object",
            "properties": {
                "component": {
                    "description": "Component from which the event is generated.\n+optional",
                    "type": "string"
                },
                "host": {
                    "description": "Node name on which the event is generated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ExecAction": {
            "type": "object",
            "properties": {
                "command": {
                    "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.FCVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "lun": {
                    "description": "lun is Optional: FC target lun number\n+optional",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "targetWWNs": {
                    "description": "targetWWNs is Optional: FC target worldwide names (WWNs)\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wwids": {
                    "description": "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.FieldsV1": {
            "type": "object"
        },
        "v1.FlexVolumeSource": {
            "type": "object",
            "properties": {
                "driver": {
                    "description": "driver is the name of the driver to use for this volume.",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n+optional",
                    "type": "string"
                },
                "options": {
                    "description": "options is Optional: this field holds extra command options if any.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                }
            }
        },
        "v1.FlockerVolumeSource": {
            "type": "object",
            "properties": {
                "datasetName": {
                    "description": "datasetName is Name of the dataset stored as metadata -\u003e name on the dataset for Flocker\nshould be considered as deprecated\n+optional",
                    "type": "string"
                },
                "datasetUUID": {
                    "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.GCEPersistentDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "partition": {
                    "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "type": "integer"
                },
                "pdName": {
                    "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.GRPCAction": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                    "type": "integer"
                },
                "service": {
                    "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\"",
                    "type": "string"
                }
            }
        },
        "v1.GitRepoVolumeSource": {
            "type": "object",
            "properties": {
                "directory": {
                    "description": "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.\n+optional",
                    "type": "string"
                },
                "repository": {
                    "description": "repository is the URL",
                    "type": "string"
                },
                "revision": {
                    "description": "revision is the commit hash for the specified revision.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.GlusterfsVolumeSource": {
            "type": "object",
            "properties": {
                "endpoints": {
                    "description": "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "path": {
                    "description": "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.HTTPGetAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional",
                    "type": "string"
                },
                "httpHeaders": {
                    "description": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HTTPHeader"
                    }
                },
                "path": {
                    "description": "Path to access on the HTTP server.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "scheme": {
                    "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.URIScheme"
                        }
                    ]
                }
            }
        },
        "v1.HTTPHeader": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                    "type": "string"
                },
                "value": {
                    "description": "The header field value",
                    "type": "string"
                }
            }
        },
        "v1.HTTPIngressPath": {
            "type": "object",
            "properties": {
                "backend": {
                    "description": "backend defines the referenced service endpoint to which the traffic\nwill be forwarded to.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressBackend"
                        }
                    ]
                },
                "path": {
                    "description": "path is matched against the path of an incoming request. Currently it can\ncontain characters disallowed from the conventional \"path\" part of a URL\nas defined by RFC 3986. Paths must begin with a '/' and must be present\nwhen using PathType with value \"Exact\" or \"Prefix\".\n+optional",
                    "type": "string"
                },
                "pathType": {
                    "description": "pathType determines the interpretation of the path matching. PathType can\nbe one of the following values:\n* Exact: Matches the URL path exactly.\n* Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PathType"
                        }
                    ]
                }
            }
        },
        "v1.HTTPIngressRuleValue": {
            "type": "object",
            "properties": {
                "paths": {
                    "description": "paths is a collection of paths that map requests to backends.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HTTPIngressPath"
                    }
                }
            }
        },
        "v1.HostAlias": {
            "type": "object",
            "properties": {
                "hostnames": {
                    "description": "Hostnames for the above IP address.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ip": {
                    "description": "IP address of the host file entry.\n+required",
                    "type": "string"
                }
            }
        },
        "v1.HostPathType": {
            "type": "string",
            "enum": [
                "",
                "DirectoryOrCreate",
                "Directory",
                "FileOrCreate",
                "File",
                "Socket",
                "CharDevice",
                "BlockDevice"
            ],
            "x-enum-varnames": [
                "HostPathUnset",
                "HostPathDirectoryOrCreate",
                "HostPathDirectory",
                "HostPathFileOrCreate",
                "HostPathFile",
                "HostPathSocket",
                "HostPathCharDev",
                "HostPathBlockDev"
            ]
        },
        "v1.HostPathVolumeSource": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "type": "string"
                },
                "type": {
                    "description": "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HostPathType"
                        }
                    ]
                }
            }
        },
        "v1.IPFamily": {
            "type": "string",
            "enum": [
                "IPv4",
                "IPv6",
                ""
            ],
            "x-enum-varnames": [
                "IPv4Protocol",
                "IPv6Protocol",
                "IPFamilyUnknown"
            ]
        },
        "v1.IPFamilyPolicy": {
            "type": "string",
            "enum": [
                "SingleStack",
                "PreferDualStack",
                "RequireDualStack"
            ],
            "x-enum-varnames": [
                "IPFamilyPolicySingleStack",
                "IPFamilyPolicyPreferDualStack",
                "IPFamilyPolicyRequireDualStack"
            ]
        },
        "v1.ISCSIVolumeSource": {
            "type": "object",
            "properties": {
                "chapAuthDiscovery": {
                    "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication\n+optional",
                    "type": "boolean"
                },
                "chapAuthSession": {
                    "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication\n+optional",
                    "type": "boolean"
                },
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "initiatorName": {
                    "description": "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n\u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.\n+optional",
                    "type": "string"
                },
                "iqn": {
                    "description": "iqn is the target iSCSI Qualified Name.",
                    "type": "string"
                },
                "iscsiInterface": {
                    "description": "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).\n+optional\n+default=\"default\"",
                    "type": "string"
                },
                "lun": {
                    "description": "lun represents iSCSI Target Lun number.",
                    "type": "integer"
                },
                "portals": {
                    "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "targetPortal": {
                    "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
                    "type": "string"
                }
            }
        },
        "v1.ImageVolumeSource": {
            "type": "object",
            "properties": {
                "pullPolicy": {
                    "description": "Policy for pulling OCI objects. Possible values are:\nAlways: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\nNever: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\nIfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "reference": {
                    "description": "Required: Image or artifact reference to be used.\nBehaves in the same way as pod.spec.containers[*].image.\nPull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.Ingress": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "spec is the desired state of the Ingress.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressSpec"
                        }
                    ]
                },
                "status": {
                    "description": "status is the current state of the Ingress.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressStatus"
                        }
                    ]
                }
            }
        },
        "v1.IngressBackend": {
            "type": "object",
            "properties": {
                "resource": {
                    "description": "resource is an ObjectRef to another Kubernetes resource in the namespace\nof the Ingress object. If resource is specified, a service.Name and\nservice.Port must not be specified.\nThis is a mutually exclusive setting with \"Service\".\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedLocalObjectReference"
                        }
                    ]
                },
                "service": {
                    "description": "service references a service as a backend.\nThis is a mutually exclusive setting with \"Resource\".\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressServiceBackend"
                        }
                    ]
                }
            }
        },
        "v1.IngressLoadBalancerIngress": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "hostname is set for load-balancer ingress points that are DNS based.\n+optional",
                    "type": "string"
                },
                "ip": {
                    "description": "ip is set for load-balancer ingress points that are IP based.\n+optional",
                    "type": "string"
                },
                "ports": {
                    "description": "ports provides information about the ports exposed by this LoadBalancer.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IngressPortStatus"
                    }
                }
            }
        },
        "v1.IngressLoadBalancerStatus": {
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "ingress is a list containing ingress points for the load-balancer.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IngressLoadBalancerIngress"
                    }
                }
            }
        },
        "v1.IngressPortStatus": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+optional\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=` + "`" + `^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$` + "`" + `\n+kubebuilder:validation:MaxLength=316",
                    "type": "string"
                },
                "port": {
                    "description": "port is the port number of the ingress port.",
                    "type": "integer"
                },
                "protocol": {
                    "description": "protocol is the protocol of the ingress port.\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.IngressRule": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "host is the fully qualified domain name of a network host, as defined by RFC 3986.\nNote the following deviations from the \"host\" part of the\nURI as defined in RFC 3986:\n1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The ` + "`" + `:` + "`" + ` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future.\nIncoming requests are matched against the host before the\nIngressRuleValue. If the host is unspecified, the Ingress routes all\ntraffic based on the specified IngressRuleValue.\n\nhost can be \"precise\" which is a domain name without the terminating dot of\na network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name\nprefixed with a single wildcard label (e.g. \"*.foo.com\").\nThe wildcard character '*' must appear by itself as the first DNS label and\nmatches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\").\nRequests will be matched against the Host field in the following way:\n1. If host is precise, the request matches this rule if the http host header is equal to Host.\n2. If host is a wildcard, then the request matches this rule if the http host header\nis to equal to the suffix (removing the first label) of the wildcard rule.\n+optional",
                    "type": "string"
                },
                "http": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPIngressRuleValue"
                        }
                    ]
                }
            }
        },
        "v1.IngressServiceBackend": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "name is the referenced service. The service must exist in\nthe same namespace as the Ingress object.",
                    "type": "string"
                },
                "port": {
                    "description": "port of the referenced service. A port name or port number\nis required for a IngressServiceBackend.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceBackendPort"
                        }
                    ]
                }
            }
        },
        "v1.IngressSpec": {
            "type": "object",
            "properties": {
                "defaultBackend": {
                    "description": "defaultBackend is the backend that should handle requests that don't\nmatch any rule. If Rules are not specified, DefaultBackend must be specified.\nIf DefaultBackend is not set, the handling of requests that do not match any\nof the rules will be up to the Ingress controller.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressBackend"
                        }
                    ]
                },
                "ingressClassName": {
                    "description": "ingressClassName is the name of an IngressClass cluster resource. Ingress\ncontroller implementations use this field to know whether they should be\nserving this Ingress resource, by a transitive connection\n(controller -\u003e IngressClass -\u003e Ingress resource). Although the\n` + "`" + `kubernetes.io/ingress.class` + "`" + ` annotation (simple constant name) was never\nformally defined, it was widely supported by Ingress controllers to create\na direct binding between Ingress controller and Ingress resources. Newly\ncreated Ingress resources should prefer using the field. However, even\nthough the annotation is officially deprecated, for backwards compatibility\nreasons, ingress controllers should still honor that annotation if present.\n+optional",
                    "type": "string"
                },
                "rules": {
                    "description": "rules is a list of host rules used to configure the Ingress. If unspecified,\nor no rule matches, all traffic is sent to the default backend.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IngressRule"
                    }
                },
                "tls": {
                    "description": "tls represents the TLS configuration. Currently the Ingress only supports a\nsingle TLS port, 443. If multiple members of this list specify different hosts,\nthey will be multiplexed on the same port according to the hostname specified\nthrough the SNI TLS extension, if the ingress controller fulfilling the\ningress supports SNI.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IngressTLS"
                    }
                }
            }
        },
        "v1.IngressStatus": {
            "type": "object",
            "properties": {
                "loadBalancer": {
                    "description": "loadBalancer contains the current status of the load-balancer.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IngressLoadBalancerStatus"
                        }
                    ]
                }
            }
        },
        "v1.IngressTLS": {
            "type": "object",
            "properties": {
                "hosts": {
                    "description": "hosts is a list of hosts included in the TLS certificate. The values in\nthis list must match the name/s used in the tlsSecret. Defaults to the\nwildcard host setting for the loadbalancer controller fulfilling this\nIngress, if left unspecified.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secretName": {
                    "description": "secretName is the name of the secret used to terminate TLS traffic on\nport 443. Field is left optional to allow TLS routing based on SNI\nhostname alone. If the SNI host in a listener conflicts with the \"Host\"\nheader field used by an IngressRule, the SNI host is used for termination\nand value of the \"Host\" header is used for routing.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.KeyToPath": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the key to project.",
                    "type": "string"
                },
                "mode": {
                    "description": "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
                    "type": "string"
                }
            }
        },
        "v1.LabelSelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LabelSelectorRequirement"
                    }
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.LabelSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist"
            ],
            "x-enum-varnames": [
                "LabelSelectorOpIn",
                "LabelSelectorOpNotIn",
                "LabelSelectorOpExists",
                "LabelSelectorOpDoesNotExist"
            ]
        },
        "v1.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.Lifecycle": {
            "type": "object",
            "properties": {
                "postStart": {
                    "description": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                },
                "preStop": {
                    "description": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                }
            }
        },
        "v1.LifecycleHandler": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "sleep": {
                    "description": "Sleep represents the duration that the container should sleep before being terminated.\n+featureGate=PodLifecycleSleepAction\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SleepAction"
                        }
                    ]
                },
                "tcpSocket": {
                    "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                }
            }
        },
        "v1.LoadBalancerIPMode": {
            "type": "string",
            "enum": [
                "VIP",
                "Proxy"
            ],
            "x-enum-varnames": [
                "LoadBalancerIPModeVIP",
                "LoadBalancerIPModeProxy"
            ]
        },
        "v1.LoadBalancerIngress": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)\n+optional",
                    "type": "string"
                },
                "ip": {
                    "description": "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)\n+optional",
                    "type": "string"
                },
                "ipMode": {
                    "description": "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.\nSetting this to \"VIP\" indicates that traffic is delivered to the node with\nthe destination set to the load-balancer's IP and port.\nSetting this to \"Proxy\" indicates that traffic is delivered to the node or pod with\nthe destination set to the node's IP and node port or the pod's IP and port.\nService implementations may use this information to adjust traffic routing.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LoadBalancerIPMode"
                        }
                    ]
                },
                "ports": {
                    "description": "Ports is a list of records of service ports\nIf used, every port defined in the service should have an entry in it\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PortStatus"
                    }
                }
            }
        },
        "v1.LoadBalancerStatus": {
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LoadBalancerIngress"
                    }
                }
            }
        },
        "v1.LocalObjectReference": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsEntry": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FieldsV1"
                        }
                    ]
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ManagedFieldsOperationType"
                        }
                    ]
                },
                "subresource": {
                    "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsOperationType": {
            "type": "string",
            "enum": [
                "Apply",
                "Update"
            ],
            "x-enum-varnames": [
                "ManagedFieldsOperationApply",
                "ManagedFieldsOperationUpdate"
            ]
        },
        "v1.MountPropagationMode": {
            "type": "string",
            "enum": [
                "None",
                "HostToContainer",
                "Bidirectional"
            ],
            "x-enum-varnames": [
                "MountPropagationNone",
                "MountPropagationHostToContainer",
                "MountPropagationBidirectional"
            ]
        },
        "v1.NFSVolumeSource": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "type": "boolean"
                },
                "server": {
                    "description": "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                }
            }
        },
        "v1.NodeAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PreferredSchedulingTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelector"
                        }
                    ]
                }
            }
        },
        "v1.NodeCondition": {
            "type": "object",
            "properties": {
                "lastHeartbeatTime": {
                    "description": "Last time we got an update on a given condition.\n+optional",
                    "type": "string"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transit from one status to another.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "Human readable message indicating details about last transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason for the condition's last transition.\n+optional",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of node condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeConditionType"
                        }
                    ]
                }
            }
        },
        "v1.NodeConditionType": {
            "type": "string",
            "enum": [
                "Ready",
                "MemoryPressure",
                "DiskPressure",
                "PIDPressure",
                "NetworkUnavailable"
            ],
            "x-enum-varnames": [
                "NodeReady",
                "NodeMemoryPressure",
                "NodeDiskPressure",
                "NodePIDPressure",
                "NodeNetworkUnavailable"
            ]
        },
        "v1.NodeInclusionPolicy": {
            "type": "string",
            "enum": [
                "Ignore",
                "Honor"
            ],
            "x-enum-varnames": [
                "NodeInclusionPolicyIgnore",
                "NodeInclusionPolicyHonor"
            ]
        },
        "v1.NodeSelector": {
            "type": "object",
            "properties": {
                "nodeSelectorTerms": {
                    "description": "Required. A list of node selector terms. The terms are ORed.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorTerm"
                    }
                }
            }
        },
        "v1.NodeSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist",
                "Gt",
                "Lt"
            ],
            "x-enum-varnames": [
                "NodeSelectorOpIn",
                "NodeSelectorOpNotIn",
                "NodeSelectorOpExists",
                "NodeSelectorOpDoesNotExist",
                "NodeSelectorOpGt",
                "NodeSelectorOpLt"
            ]
        },
        "v1.NodeSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeSelectorTerm": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                },
                "matchFields": {
                    "description": "A list of node selector requirements by node's fields.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                }
            }
        },
        "v1.OSName": {
            "type": "string",
            "enum": [
                "linux",
                "windows"
            ],
            "x-enum-varnames": [
                "Linux",
                "Windows"
            ]
        },
        "v1.ObjectFieldSelector": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                }
            }
        },
        "v1.ObjectMeta": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge\n+listType=set",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
                    "type": "string"
                },
                "generation": {
                    "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
                    "type": "integer"
                },
                "labels": {
                    "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ManagedFieldsEntry"
                    }
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge\n+listType=map\n+listMapKey=uid",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.OwnerReference"
                    }
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ObjectReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional",
                    "type": "string"
                },
                "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.OwnerReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.\n+optional",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                    "type": "string"
                }
            }
        },
        "v1.PathType": {
            "type": "string",
            "enum": [
                "Exact",
                "Prefix",
                "ImplementationSpecific"
            ],
            "x-enum-varnames": [
                "PathTypeExact",
                "PathTypePrefix",
                "PathTypeImplementationSpecific"
            ]
        },
        "v1.PersistentVolumeAccessMode": {
            "type": "string",
            "enum": [
                "ReadWriteOnce",
                "ReadOnlyMany",
                "ReadWriteMany",
                "ReadWriteOncePod"
            ],
            "x-enum-varnames": [
                "ReadWriteOnce",
                "ReadOnlyMany",
                "ReadWriteMany",
                "ReadWriteOncePod"
            ]
        },
        "v1.PersistentVolumeClaimSpec": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
                    }
                },
                "dataSource": {
                    "description": "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedLocalObjectReference"
                        }
                    ]
                },
                "dataSourceRef": {
                    "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedObjectReference"
                        }
                    ]
                },
                "resources": {
                    "description": "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.VolumeResourceRequirements"
                        }
                    ]
                },
                "selector": {
                    "description": "selector is a label query over volumes to consider for binding.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "storageClassName": {
                    "description": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n+optional",
                    "type": "string"
                },
                "volumeAttributesClassName": {
                    "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).\n+featureGate=VolumeAttributesClass\n+optional",
                    "type": "string"
                },
                "volumeMode": {
                    "description": "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeMode"
                        }
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the binding reference to the PersistentVolume backing this claim.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.PersistentVolumeClaimTemplate": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "May contain labels and annotations that will be copied into the PVC\nwhen creating it. No other fields are allowed and will be rejected during\nvalidation.\n\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeClaimVolumeSource": {
            "type": "object",
            "properties": {
                "claimName": {
                    "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.PersistentVolumeMode": {
            "type": "string",
            "enum": [
                "Block",
                "Filesystem"
            ],
            "x-enum-varnames": [
                "PersistentVolumeBlock",
                "PersistentVolumeFilesystem"
            ]
        },
        "v1.PhotonPersistentDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "pdID": {
                    "description": "pdID is the ID that identifies Photon Controller persistent disk",
                    "type": "string"
                }
            }
        },
        "v1.PodAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodAffinityTerm": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with ` + "`" + `labelSelector` + "`" + ` as ` + "`" + `key in (value)` + "`" + `\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\n\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mismatchLabelKeys": {
                    "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with ` + "`" + `labelSelector` + "`" + ` as ` + "`" + `key notin (value)` + "`" + `\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\n\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespaceSelector": {
                    "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "namespaces": {
                    "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "topologyKey": {
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                    "type": "string"
                }
            }
        },
        "v1.PodAntiAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodConditionType": {
            "type": "string",
            "enum": [
                "ContainersReady",
                "Initialized",
                "Ready",
                "PodScheduled",
                "DisruptionTarget",
                "PodReadyToStartContainers"
            ],
            "x-enum-varnames": [
                "ContainersReady",
                "PodInitialized",
                "PodReady",
                "PodScheduled",
                "DisruptionTarget",
                "PodReadyToStartContainers"
            ]
        },
        "v1.PodDNSConfig": {
            "type": "object",
            "properties": {
                "nameservers": {
                    "description": "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.\nDuplicated nameservers will be removed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "options": {
                    "description": "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nDuplicated entries will be removed. Resolution options given in Options\nwill override those that appear in the base DNSPolicy.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodDNSConfigOption"
                    }
                },
                "searches": {
                    "description": "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.\nDuplicated search paths will be removed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.PodDNSConfigOption": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Required.",
                    "type": "string"
                },
                "value": {
                    "description": "+optional",
                    "type": "string"
                }
            }
        },
        "v1.PodFSGroupChangePolicy": {
            "type": "string",
            "enum": [
                "OnRootMismatch",
                "Always"
            ],
            "x-enum-varnames": [
                "FSGroupChangeOnRootMismatch",
                "FSGroupChangeAlways"
            ]
        },
        "v1.PodOS": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the operating system. The currently supported values are linux and windows.\nAdditional value may be defined in future and can be one of:\nhttps://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration\nClients should expect to handle additional values and treat unrecognized values in this field as os: null",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.OSName"
                        }
                    ]
                }
            }
        },
        "v1.PodReadinessGate": {
            "type": "object",
            "properties": {
                "conditionType": {
                    "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodConditionType"
                        }
                    ]
                }
            }
        },
        "v1.PodResourceClaim": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name uniquely identifies this resource claim inside the pod.\nThis must be a DNS_LABEL.",
                    "type": "string"
                },
                "resourceClaimName": {
                    "description": "ResourceClaimName is the name of a ResourceClaim object in the same\nnamespace as this pod.\n\nExactly one of ResourceClaimName and ResourceClaimTemplateName must\nbe set.",
                    "type": "string"
                },
                "resourceClaimTemplateName": {
                    "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate\nobject in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will\nbe bound to this pod. When this pod is deleted, the ResourceClaim\nwill also be deleted. The pod name and resource name, along with a\ngenerated component, will be used to form a unique name for the\nResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the\ncorresponding ResourceClaim by the control plane after creating the\nResourceClaim.\n\nExactly one of ResourceClaimName and ResourceClaimTemplateName must\nbe set.",
                    "type": "string"
                }
            }
        },
        "v1.PodSchedulingGate": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the scheduling gate.\nEach scheduling gate must have a unique name field.",
                    "type": "string"
                }
            }
        },
        "v1.PodSecurityContext": {
            "type": "object",
            "properties": {
                "appArmorProfile": {
                    "description": "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfile"
                        }
                    ]
                },
                "fsGroup": {
                    "description": "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "fsGroupChangePolicy": {
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodFSGroupChangePolicy"
                        }
                    ]
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SELinuxOptions"
                        }
                    ]
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfile"
                        }
                    ]
                },
                "supplementalGroups": {
                    "description": "A list of groups applied to the first process run in each container, in\naddition to the container's primary GID and fsGroup (if specified).  If\nthe SupplementalGroupsPolicy feature is enabled, the\nsupplementalGroupsPolicy field determines whether these are in addition\nto or instead of any group memberships defined in the container image.\nIf unspecified, no additional groups are added, though group memberships\ndefined in the container image may still be used, depending on the\nsupplementalGroupsPolicy field.\nNote that this field cannot be set when spec.os.name is windows.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "supplementalGroupsPolicy": {
                    "description": "Defines how supplemental groups of the first container processes are calculated.\nValid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used.\n(Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled\nand the container runtime must implement support for this feature.\nNote that this field cannot be set when spec.os.name is windows.\nTODO: update the default value to \"Merge\" when spec.os.name is not windows in v1.34\n+featureGate=SupplementalGroupsPolicy\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SupplementalGroupsPolicy"
                        }
                    ]
                },
                "sysctls": {
                    "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Sysctl"
                    }
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
                        }
                    ]
                }
            }
        },
        "v1.PodSpec": {
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "Optional duration in seconds the pod may be active on the node relative to\nStartTime before the system will actively try to mark it failed and kill associated containers.\nValue must be a positive integer.\n+optional",
                    "type": "integer"
                },
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n+optional",
                    "type": "boolean"
                },
                "containers": {
                    "description": "List of containers belonging to the pod.\nContainers cannot currently be added or removed.\nThere must be at least one container in a Pod.\nCannot be updated.\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Container"
                    }
                },
                "dnsConfig": {
                    "description": "Specifies the DNS parameters of a pod.\nParameters specified here will be merged to the generated DNS\nconfiguration based on DNSPolicy.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodDNSConfig"
                        }
                    ]
                },
                "dnsPolicy": {
                    "description": "Set DNS policy for the pod.\nDefaults to \"ClusterFirst\".\nValid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.\nDNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.\nTo have DNS options set along with hostNetwork, you have to specify DNS policy\nexplicitly to 'ClusterFirstWithHostNet'.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DNSPolicy"
                        }
                    ]
                },
                "enableServiceLinks": {
                    "description": "EnableServiceLinks indicates whether information about services should be injected into pod's\nenvironment variables, matching the syntax of Docker links.\nOptional: Defaults to true.\n+optional",
                    "type": "boolean"
                },
                "ephemeralContainers": {
                    "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing\npod to perform user-initiated actions such as debugging. This list cannot be specified when\ncreating a pod, and it cannot be modified by updating the pod spec. In order to add an\nephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EphemeralContainer"
                    }
                },
                "hostAliases": {
                    "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts\nfile if specified.\n+optional\n+patchMergeKey=ip\n+patchStrategy=merge\n+listType=map\n+listMapKey=ip",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HostAlias"
                    }
                },
                "hostIPC": {
                    "description": "Use the host's ipc namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "hostNetwork": {
                    "description": "Host networking requested for this pod. Use the host's network namespace.\nIf this option is set, the ports that will be used must be specified.\nDefault to false.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "hostPID": {
                    "description": "Use the host's pid namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "hostUsers": {
                    "description": "Use the host's user namespace.\nOptional: Default to true.\nIf set to true or not present, the pod will be run in the host user namespace, useful\nfor when the pod needs a feature only available to the host user namespace, such as\nloading a kernel module with CAP_SYS_MODULE.\nWhen set to false, a new userns is created for the pod. Setting false is useful for\nmitigating container breakout vulnerabilities even allowing users to run their\ncontainers as root without actually having root privileges on the host.\nThis field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "hostname": {
                    "description": "Specifies the hostname of the Pod\nIf not specified, the pod's hostname will be set to a system-defined value.\n+optional",
                    "type": "string"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.\nIf specified, these secrets will be passed to individual puller implementations for them to use.\nMore info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LocalObjectReference"
                    }
                },
                "initContainers": {
                    "description": "List of initialization containers belonging to the pod.\nInit containers are executed in order prior to containers being started. If any\ninit container fails, the pod is considered to have failed and is handled according\nto its restartPolicy. The name for an init container or normal container must be\nunique among all containers.\nInit containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.\nThe resourceRequirements of an init container are taken into account during scheduling\nby finding the highest request/limit for each resource type, and then using the max of\nof that value or the sum of the normal containers. Limits are applied to init containers\nin a similar fashion.\nInit containers cannot currently be added or removed.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Container"
                    }
                },
                "nodeName": {
                    "description": "NodeName indicates in which node this pod is scheduled.\nIf empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName.\nOnce this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod.\nThis field should not be used to express a desire for the pod to be scheduled on a specific node.\nhttps://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename\n+optional",
                    "type": "string"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n+optional\n+mapType=atomic",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "os": {
                    "description": "Specifies the OS of the containers in the pod.\nSome pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset:\n-securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset:\n- spec.hostPID\n- spec.hostIPC\n- spec.hostUsers\n- spec.securityContext.appArmorProfile\n- spec.securityContext.seLinuxOptions\n- spec.securityContext.seccompProfile\n- spec.securityContext.fsGroup\n- spec.securityContext.fsGroupChangePolicy\n- spec.securityContext.sysctls\n- spec.shareProcessNamespace\n- spec.securityContext.runAsUser\n- spec.securityContext.runAsGroup\n- spec.securityContext.supplementalGroups\n- spec.securityContext.supplementalGroupsPolicy\n- spec.containers[*].securityContext.appArmorProfile\n- spec.containers[*].securityContext.seLinuxOptions\n- spec.containers[*].securityContext.seccompProfile\n- spec.containers[*].securityContext.capabilities\n- spec.containers[*].securityContext.readOnlyRootFilesystem\n- spec.containers[*].securityContext.privileged\n- spec.containers[*].securityContext.allowPrivilegeEscalation\n- spec.containers[*].securityContext.procMount\n- spec.containers[*].securityContext.runAsUser\n- spec.containers[*].securityContext.runAsGroup\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodOS"
                        }
                    ]
                },
                "overhead": {
                    "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.\nThis field will be autopopulated at admission time by the RuntimeClass admission controller. If\nthe RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.\nThe RuntimeClass admission controller will reject Pod create requests which have the overhead already\nset. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value\ndefined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "preemptionPolicy": {
                    "description": "PreemptionPolicy is the Policy for preempting pods with lower priority.\nOne of Never, PreemptLowerPriority.\nDefaults to PreemptLowerPriority if unset.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PreemptionPolicy"
                        }
                    ]
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the\npriority of the pod. When Priority Admission Controller is enabled, it\nprevents users from setting this field. The admission controller populates\nthis field from PriorityClassName.\nThe higher the value, the higher the priority.\n+optional",
                    "type": "integer"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and\n\"system-cluster-critical\" are two special keywords which indicate the\nhighest priorities with the former being the highest priority. Any other\nname must be defined by creating a PriorityClass object with that name.\nIf not specified, the pod priority will be default or zero if there is no\ndefault.\n+optional",
                    "type": "string"
                },
                "readinessGates": {
                    "description": "If specified, all readiness gates will be evaluated for pod readiness.\nA pod is ready when all its containers are ready AND\nall conditions specified in the readiness gates have status equal to \"True\"\nMore info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodReadinessGate"
                    }
                },
                "resourceClaims": {
                    "description": "ResourceClaims defines which ResourceClaims must be allocated\nand reserved before the Pod is allowed to start. The resources\nwill be made available to those containers which consume them\nby name.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable.\n\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodResourceClaim"
                    }
                },
                "restartPolicy": {
                    "description": "Restart policy for all containers within the pod.\nOne of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.\nDefault to Always.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RestartPolicy"
                        }
                    ]
                },
                "runtimeClassName": {
                    "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used\nto run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.\nIf unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an\nempty definition that uses the default runtime handler.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class\n+optional",
                    "type": "string"
                },
                "schedulerName": {
                    "description": "If specified, the pod will be dispatched by specified scheduler.\nIf not specified, the pod will be dispatched by default scheduler.\n+optional",
                    "type": "string"
                },
                "schedulingGates": {
                    "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod.\nIf schedulingGates is not empty, the pod will stay in the SchedulingGated state and the\nscheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.\n\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodSchedulingGate"
                    }
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings.\nOptional: Defaults to empty.  See type description for default values of each field.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodSecurityContext"
                        }
                    ]
                },
                "serviceAccount": {
                    "description": "DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.\nDeprecated: Use serviceAccountName instead.\n+k8s:conversion-gen=false\n+optional",
                    "type": "string"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n+optional",
                    "type": "string"
                },
                "setHostnameAsFQDN": {
                    "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).\nIn Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).\nIn Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN.\nIf a pod does not have FQDN, this has no effect.\nDefault to false.\n+optional",
                    "type": "boolean"
                },
                "shareProcessNamespace": {
                    "description": "Share a single process namespace between all of the containers in a pod.\nWhen this is set containers will be able to view and signal processes from other containers\nin the same pod, and the first process in each container will not be assigned PID 1.\nHostPID and ShareProcessNamespace cannot both be set.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "type": "boolean"
                },
                "subdomain": {
                    "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\".\nIf not specified, the pod will not have a domainname at all.\n+optional",
                    "type": "string"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nIf this value is nil, the default grace period will be used instead.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nDefaults to 30 seconds.\n+optional",
                    "type": "integer"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology\ndomains. Scheduler will schedule pods in a way which abides by the constraints.\nAll topologySpreadConstraints are ANDed.\n+optional\n+patchMergeKey=topologyKey\n+patchStrategy=merge\n+listType=map\n+listMapKey=topologyKey\n+listMapKey=whenUnsatisfiable",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TopologySpreadConstraint"
                    }
                },
                "volumes": {
                    "description": "List of volumes that can be mounted by containers belonging to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes\n+optional\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Volume"
                    }
                }
            }
        },
        "v1.PodTemplateSpec": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Specification of the desired behavior of the pod.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodSpec"
                        }
                    ]
                }
            }
        },
        "v1.PortStatus": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+optional\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=` + "`" + `^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$` + "`" + `\n+kubebuilder:validation:MaxLength=316",
                    "type": "string"
                },
                "port": {
                    "description": "Port is the port number of the service port of which status is recorded here",
                    "type": "integer"
                },
                "protocol": {
                    "description": "Protocol is the protocol of the service port of which status is recorded here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.PortworxVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "volumeID uniquely identifies a Portworx volume",
                    "type": "string"
                }
            }
        },
        "v1.PreemptionPolicy": {
            "type": "string",
            "enum": [
                "PreemptLowerPriority",
                "Never"
            ],
            "x-enum-varnames": [
                "PreemptLowerPriority",
                "PreemptNever"
            ]
        },
        "v1.PreferredSchedulingTerm": {
            "type": "object",
            "properties": {
                "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.Probe": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GRPCAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ProcMountType": {
            "type": "string",
            "enum": [
                "Default",
                "Unmasked"
            ],
            "x-enum-varnames": [
                "DefaultProcMount",
                "UnmaskedProcMount"
            ]
        },
        "v1.ProjectedVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "sources": {
                    "description": "sources is the list of volume projections. Each entry in this list\nhandles one source.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                }
            }
        },
        "v1.Protocol": {
            "type": "string",
            "enum": [
                "TCP",
                "UDP",
                "SCTP"
            ],
            "x-enum-varnames": [
                "ProtocolTCP",
                "ProtocolUDP",
                "ProtocolSCTP"
            ]
        },
        "v1.PullPolicy": {
            "type": "string",
            "enum": [
                "Always",
                "Never",
                "IfNotPresent"
            ],
            "x-enum-varnames": [
                "PullAlways",
                "PullNever",
                "PullIfNotPresent"
            ]
        },
        "v1.QuobyteVolumeSource": {
            "type": "object",
            "properties": {
                "group": {
                    "description": "group to map volume access to\nDefault is no group\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "registry": {
                    "description": "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes",
                    "type": "string"
                },
                "tenant": {
                    "description": "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin\n+optional",
                    "type": "string"
                },
                "user": {
                    "description": "user to map volume access to\nDefaults to serivceaccount user\n+optional",
                    "type": "string"
                },
                "volume": {
                    "description": "volume is a string that references an already created Quobyte volume by name.",
                    "type": "string"
                }
            }
        },
        "v1.RBDVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "image": {
                    "description": "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "keyring": {
                    "description": "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional\n+default=\"/etc/ceph/keyring\"",
                    "type": "string"
                },
                "monitors": {
                    "description": "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pool": {
                    "description": "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional\n+default=\"rbd\"",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "user": {
                    "description": "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional\n+default=\"admin\"",
                    "type": "string"
                }
            }
        },
        "v1.RecursiveReadOnlyMode": {
            "type": "string",
            "enum": [
                "Disabled",
                "IfPossible",
                "Enabled"
            ],
            "x-enum-varnames": [
                "RecursiveReadOnlyDisabled",
                "RecursiveReadOnlyIfPossible",
                "RecursiveReadOnlyEnabled"
            ]
        },
        "v1.ResourceClaim": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                    "type": "string"
                },
                "request": {
                    "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.\n\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ResourceFieldSelector": {
            "type": "object",
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars\n+optional",
                    "type": "string"
                },
                "divisor": {
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                }
            }
        },
        "v1.ResourceList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/resource.Quantity"
            }
        },
        "v1.ResourceName": {
            "type": "string",
            "enum": [
                "cpu",
                "memory",
                "storage",
                "ephemeral-storage",
                "pods",
                "services",
                "replicationcontrollers",
                "resourcequotas",
                "secrets",
                "configmaps",
                "persistentvolumeclaims",
                "services.nodeports",
                "services.loadbalancers",
                "requests.cpu",
                "requests.memory",
                "requests.storage",
                "requests.ephemeral-storage",
                "limits.cpu",
                "limits.memory",
                "limits.ephemeral-storage"
            ],
            "x-enum-varnames": [
                "ResourceCPU",
                "ResourceMemory",
                "ResourceStorage",
                "ResourceEphemeralStorage",
                "ResourcePods",
                "ResourceServices",
                "ResourceReplicationControllers",
                "ResourceQuotas",
                "ResourceSecrets",
                "ResourceConfigMaps",
                "ResourcePersistentVolumeClaims",
                "ResourceServicesNodePorts",
                "ResourceServicesLoadBalancers",
                "ResourceRequestsCPU",
                "ResourceRequestsMemory",
                "ResourceRequestsStorage",
                "ResourceRequestsEphemeralStorage",
                "ResourceLimitsCPU",
                "ResourceLimitsMemory",
                "ResourceLimitsEphemeralStorage"
            ]
        },
        "v1.ResourceRequirements": {
            "type": "object",
            "properties": {
                "claims": {
                    "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.\n\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ResourceClaim"
                    }
                },
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                }
            }
        },
        "v1.ResourceResizeRestartPolicy": {
            "type": "string",
            "enum": [
                "NotRequired",
                "RestartContainer"
            ],
            "x-enum-varnames": [
                "NotRequired",
                "RestartContainer"
            ]
        },
        "v1.RestartPolicy": {
            "type": "string",
            "enum": [
                "Always",
                "OnFailure",
                "Never"
            ],
            "x-enum-varnames": [
                "RestartPolicyAlways",
                "RestartPolicyOnFailure",
                "RestartPolicyNever"
            ]
        },
        "v1.RollingUpdateDaemonSet": {
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of nodes with an existing available DaemonSet pod that\ncan have an updated DaemonSet pod during during an update.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nThis can not be 0 if MaxUnavailable is 0.\nAbsolute number is calculated from percentage by rounding up to a minimum of 1.\nDefault value is 0.\nExample: when this is set to 30%, at most 30% of the total number of nodes\nthat should be running the daemon pod (i.e. status.desiredNumberScheduled)\ncan have their a new pod created before the old pod is marked as deleted.\nThe update starts by launching new pods on 30% of nodes. Once an updated\npod is available (Ready for at least minReadySeconds) the old DaemonSet pod\non that node is marked deleted. If the old pod becomes unavailable for any\nreason (Ready transitions to false, is evicted, or is drained) an updated\npod is immediatedly created on that node without considering surge limits.\nAllowing surge implies the possibility that the resources consumed by the\ndaemonset on any given node can double if the readiness check fails, and\nso resource intensive daemonsets should take into account that they may\ncause evictions during disruption.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "maxUnavailable": {
                    "description": "The maximum number of DaemonSet pods that can be unavailable during the\nupdate. Value can be an absolute number (ex: 5) or a percentage of total\nnumber of DaemonSet pods at the start of the update (ex: 10%). Absolute\nnumber is calculated from percentage by rounding up.\nThis cannot be 0 if MaxSurge is 0\nDefault value is 1.\nExample: when this is set to 30%, at most 30% of the total number of nodes\nthat should be running the daemon pod (i.e. status.desiredNumberScheduled)\ncan have their pods stopped for an update at any given time. The update\nstarts by stopping at most 30% of those DaemonSet pods and then brings\nup new DaemonSet pods in their place. Once the new pods are available,\nit then proceeds onto other DaemonSet pods, thus ensuring that at least\n70% of original number of DaemonSet pods are available at all times during\nthe update.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.RollingUpdateDeployment": {
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of pods that can be scheduled above the desired number of\npods.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nThis can not be 0 if MaxUnavailable is 0.\nAbsolute number is calculated from percentage by rounding up.\nDefaults to 25%.\nExample: when this is set to 30%, the new ReplicaSet can be scaled up immediately when\nthe rolling update starts, such that the total number of old and new pods do not exceed\n130% of desired pods. Once old pods have been killed,\nnew ReplicaSet can be scaled up further, ensuring that total number of pods running\nat any time during the update is at most 130% of desired pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nAbsolute number is calculated from percentage by rounding down.\nThis can not be 0 if MaxSurge is 0.\nDefaults to 25%.\nExample: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods\nimmediately when the rolling update starts. Once new pods are ready, old ReplicaSet\ncan be scaled down further, followed by scaling up the new ReplicaSet, ensuring\nthat the total number of pods available at all times during the update is at\nleast 70% of desired pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.SELinuxOptions": {
            "type": "object",
            "properties": {
                "level": {
                    "description": "Level is SELinux level label that applies to the container.\n+optional",
                    "type": "string"
                },
                "role": {
                    "description": "Role is a SELinux role label that applies to the container.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a SELinux type label that applies to the container.\n+optional",
                    "type": "string"
                },
                "user": {
                    "description": "User is a SELinux user label that applies to the container.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ScaleIOVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".\n+optional\n+default=\"xfs\"",
                    "type": "string"
                },
                "gateway": {
                    "description": "gateway is the host address of the ScaleIO API Gateway.",
                    "type": "string"
                },
                "protectionDomain": {
                    "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "sslEnabled": {
                    "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false\n+optional",
                    "type": "boolean"
                },
                "storageMode": {
                    "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.\n+optional\n+default=\"ThinProvisioned\"",
                    "type": "string"
                },
                "storagePool": {
                    "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.\n+optional",
                    "type": "string"
                },
                "system": {
                    "description": "system is the name of the storage system as configured in ScaleIO.",
                    "type": "string"
                },
                "volumeName": {
                    "description": "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
                    "type": "string"
                }
            }
        },
        "v1.SeccompProfile": {
            "type": "object",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfileType"
                        }
                    ]
                }
            }
        },
        "v1.SeccompProfileType": {
            "type": "string",
            "enum": [
                "Unconfined",
                "RuntimeDefault",
                "Localhost"
            ],
            "x-enum-varnames": [
                "SeccompProfileTypeUnconfined",
                "SeccompProfileTypeRuntimeDefault",
                "SeccompProfileTypeLocalhost"
            ]
        },
        "v1.SecretEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop ` + "`" + `kubebuilder:default` + "`" + ` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its keys must be defined\n+optional",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.SecurityContext": {
            "type": "object",
            "properties": {
                "allowPrivilegeEscalation": {
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "appArmorProfile": {
                    "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfile"
                        }
                    ]
                },
                "capabilities": {
                    "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Capabilities"
                        }
                    ]
                },
                "privileged": {
                    "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "procMount": {
                    "description": "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProcMountType"
                        }
                    ]
                },
                "readOnlyRootFilesystem": {
                    "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SELinuxOptions"
                        }
                    ]
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod \u0026 container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfile"
                        }
                    ]
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
                        }
                    ]
                }
            }
        },
        "v1.Service": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Spec defines the behavior of a service.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Most recently observed status of the service.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceStatus"
                        }
                    ]
                }
            }
        },
        "v1.ServiceAccountTokenProjection": {
            "type": "object",
            "properties": {
                "audience": {
                    "description": "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.\n+optional",
                    "type": "string"
                },
                "expirationSeconds": {
                    "description": "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "path is the path relative to the mount point of the file to project the\ntoken into.",
                    "type": "string"
                }
            }
        },
        "v1.ServiceAffinity": {
            "type": "string",
            "enum": [
                "ClientIP",
                "None"
            ],
            "x-enum-varnames": [
                "ServiceAffinityClientIP",
                "ServiceAffinityNone"
            ]
        },
        "v1.ServiceBackendPort": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "name is the name of the port on the Service.\nThis is a mutually exclusive setting with \"Number\".\n+optional",
                    "type": "string"
                },
                "number": {
                    "description": "number is the numerical port number (e.g. 80) on the Service.\nThis is a mutually exclusive setting with \"Name\".\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ServiceExternalTrafficPolicy": {
            "type": "string",
            "enum": [
                "Cluster",
                "Local",
                "Local",
                "Cluster"
            ],
            "x-enum-varnames": [
                "ServiceExternalTrafficPolicyCluster",
                "ServiceExternalTrafficPolicyLocal",
                "ServiceExternalTrafficPolicyTypeLocal",
                "ServiceExternalTrafficPolicyTypeCluster"
            ]
        },
        "v1.ServiceInternalTrafficPolicy": {
            "type": "string",
            "enum": [
                "Cluster",
                "Local"
            ],
            "x-enum-varnames": [
                "ServiceInternalTrafficPolicyCluster",
                "ServiceInternalTrafficPolicyLocal"
            ]
        },
        "v1.ServicePort": {
            "type": "object",
            "properties": {
                "appProtocol": {
                    "description": "The application protocol for this port.\nThis is used as a hint for implementations to offer richer behavior for protocols that they understand.\nThis field follows standard Kubernetes label syntax.\nValid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per\nRFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as\nmycompany.com/my-custom-protocol.\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this port within the service. This must be a DNS_LABEL.\nAll ports within a ServiceSpec must have unique names. When considering\nthe endpoints for a Service, this must match the 'name' field in the\nEndpointPort.\nOptional if only one ServicePort is defined on this service.\n+optional",
                    "type": "string"
                },
                "nodePort": {
                    "description": "The port on each node on which this service is exposed when type is\nNodePort or LoadBalancer.  Usually assigned by the system. If a value is\nspecified, in-range, and not in use it will be used, otherwise the\noperation will fail.  If not specified, a port will be allocated if this\nService requires one.  If this field is specified when creating a\nService which does not need it, creation will fail. This field will be\nwiped when updating a Service to no longer need it (e.g. changing type\nfrom NodePort to ClusterIP).\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n+optional",
                    "type": "integer"
                },
                "port": {
                    "description": "The port that will be exposed by this service.",
                    "type": "integer"
                },
                "protocol": {
                    "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\".\nDefault is TCP.\n+default=\"TCP\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                },
                "targetPort": {
                    "description": "Number or name of the port to access on the pods targeted by the service.\nNumber must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\nIf this is a string, it will be looked up as a named port in the\ntarget Pod's container ports. If this is not specified, the value\nof the 'port' field is used (an identity map).\nThis field is ignored for services with clusterIP=None, and should be\nomitted or set equal to the 'port' field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.ServiceSpec": {
            "type": "object",
            "properties": {
                "allocateLoadBalancerNodePorts": {
                    "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically\nallocated for services with type LoadBalancer.  Default is \"true\". It\nmay be set to \"false\" if the cluster load-balancer does not rely on\nNodePorts.  If the caller requests specific NodePorts (by specifying a\nvalue), those requests will be respected, regardless of this field.\nThis field may only be set for services with type LoadBalancer and will\nbe cleared if the type is changed to any other type.\n+optional",
                    "type": "boolean"
                },
                "clusterIP": {
                    "description": "clusterIP is the IP address of the service and is usually assigned\nrandomly. If an address is specified manually, is in-range (as per\nsystem configuration), and is not in use, it will be allocated to the\nservice; otherwise creation of the service will fail. This field may not\nbe changed through updates unless the type field is also being changed\nto ExternalName (which requires this field to be blank) or the type\nfield is being changed from ExternalName (in which case this field may\noptionally be specified, as describe above).  Valid values are \"None\",\nempty string (\"\"), or a valid IP address. Setting this to \"None\" makes a\n\"headless service\" (no virtual IP), which is useful when direct endpoint\nconnections are preferred and proxying is not required.  Only applies to\ntypes ClusterIP, NodePort, and LoadBalancer. If this field is specified\nwhen creating a Service of type ExternalName, creation will fail. This\nfield will be wiped when updating a Service to type ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional",
                    "type": "string"
                },
                "clusterIPs": {
                    "description": "ClusterIPs is a list of IP addresses assigned to this service, and are\nusually assigned randomly.  If an address is specified manually, is\nin-range (as per system configuration), and is not in use, it will be\nallocated to the service; otherwise creation of the service will fail.\nThis field may not be changed through updates unless the type field is\nalso being changed to ExternalName (which requires this field to be\nempty) or the type field is being changed from ExternalName (in which\ncase this field may optionally be specified, as describe above).  Valid\nvalues are \"None\", empty string (\"\"), or a valid IP address.  Setting\nthis to \"None\" makes a \"headless service\" (no virtual IP), which is\nuseful when direct endpoint connections are preferred and proxying is\nnot required.  Only applies to types ClusterIP, NodePort, and\nLoadBalancer. If this field is specified when creating a Service of type\nExternalName, creation will fail. This field will be wiped when updating\na Service to type ExternalName.  If this field is not specified, it will\nbe initialized from the clusterIP field.  If this field is specified,\nclients must ensure that clusterIPs[0] and clusterIP have the same\nvalue.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order).\nThese IPs must correspond to the values of the ipFamilies field. Both\nclusterIPs and ipFamilies are governed by the ipFamilyPolicy field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalIPs": {
                    "description": "externalIPs is a list of IP addresses for which nodes in the cluster\nwill also accept traffic for this service.  These IPs are not managed by\nKubernetes.  The user is responsible for ensuring that traffic arrives\nat a node with this IP.  A common example is external load-balancers\nthat are not part of the Kubernetes system.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalName": {
                    "description": "externalName is the external reference that discovery mechanisms will\nreturn as an alias for this service (e.g. a DNS CNAME record). No\nproxying will be involved.  Must be a lowercase RFC-1123 hostname\n(https://tools.ietf.org/html/rfc1123) and requires ` + "`" + `type` + "`" + ` to be \"ExternalName\".\n+optional",
                    "type": "string"
                },
                "externalTrafficPolicy": {
                    "description": "externalTrafficPolicy describes how nodes distribute service traffic they\nreceive on one of the Service's \"externally-facing\" addresses (NodePorts,\nExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure\nthe service in a way that assumes that external load balancers will take care\nof balancing the service traffic between nodes, and so each node will deliver\ntraffic only to the node-local endpoints of the service, without masquerading\nthe client source IP. (Traffic mistakenly sent to a node with no endpoints will\nbe dropped.) The default value, \"Cluster\", uses the standard behavior of\nrouting to all endpoints evenly (possibly modified by topology and other\nfeatures). Note that traffic sent to an External IP or LoadBalancer IP from\nwithin the cluster will always get \"Cluster\" semantics, but clients sending to\na NodePort from within the cluster may need to take traffic policy into account\nwhen picking a node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceExternalTrafficPolicy"
                        }
                    ]
                },
                "healthCheckNodePort": {
                    "description": "healthCheckNodePort specifies the healthcheck nodePort for the service.\nThis only applies when type is set to LoadBalancer and\nexternalTrafficPolicy is set to Local. If a value is specified, is\nin-range, and is not in use, it will be used.  If not specified, a value\nwill be automatically allocated.  External systems (e.g. load-balancers)\ncan use this port to determine if a given node holds endpoints for this\nservice or not.  If this field is specified when creating a Service\nwhich does not need it, creation will fail. This field will be wiped\nwhen updating a Service to no longer need it (e.g. changing type).\nThis field cannot be updated once set.\n+optional",
                    "type": "integer"
                },
                "internalTrafficPolicy": {
                    "description": "InternalTrafficPolicy describes how nodes distribute service traffic they\nreceive on the ClusterIP. If set to \"Local\", the proxy will assume that pods\nonly want to talk to endpoints of the service on the same node as the pod,\ndropping the traffic if there are no local endpoints. The default value,\n\"Cluster\", uses the standard behavior of routing to all endpoints evenly\n(possibly modified by topology and other features).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceInternalTrafficPolicy"
                        }
                    ]
                },
                "ipFamilies": {
                    "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this\nservice. This field is usually assigned automatically based on cluster\nconfiguration and the ipFamilyPolicy field. If this field is specified\nmanually, the requested family is available in the cluster,\nand ipFamilyPolicy allows it, it will be used; otherwise creation of\nthe service will fail. This field is conditionally mutable: it allows\nfor adding or removing a secondary IP family, but it does not allow\nchanging the primary IP family of the Service. Valid values are \"IPv4\"\nand \"IPv6\".  This field only applies to Services of types ClusterIP,\nNodePort, and LoadBalancer, and does apply to \"headless\" services.\nThis field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in\neither order).  These families must correspond to the values of the\nclusterIPs field, if specified. Both clusterIPs and ipFamilies are\ngoverned by the ipFamilyPolicy field.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IPFamily"
                    }
                },
                "ipFamilyPolicy": {
                    "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by\nthis Service. If there is no value provided, then this field will be set\nto SingleStack. Services can be \"SingleStack\" (a single IP family),\n\"PreferDualStack\" (two IP families on dual-stack configured clusters or\na single IP family on single-stack clusters), or \"RequireDualStack\"\n(two IP families on dual-stack configured clusters, otherwise fail). The\nipFamilies and clusterIPs fields depend on the value of this field. This\nfield will be wiped when updating a service to type ExternalName.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IPFamilyPolicy"
                        }
                    ]
                },
                "loadBalancerClass": {
                    "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to.\nIf specified, the value of this field must be a label-style identifier, with an optional prefix,\ne.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users.\nThis field can only be set when the Service type is 'LoadBalancer'. If not set, the default load\nbalancer implementation is used, today this is typically done through the cloud provider integration,\nbut should apply for any default implementation. If set, it is assumed that a load balancer\nimplementation is watching for Services with a matching class. Any default load balancer\nimplementation (e.g. cloud providers) should ignore Services that set this field.\nThis field can only be set when creating or updating a Service to type 'LoadBalancer'.\nOnce set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.\n+optional",
                    "type": "string"
                },
                "loadBalancerIP": {
                    "description": "Only applies to Service Type: LoadBalancer.\nThis feature depends on whether the underlying cloud-provider supports specifying\nthe loadBalancerIP when a load balancer is created.\nThis field will be ignored if the cloud-provider does not support the feature.\nDeprecated: This field was under-specified and its meaning varies across implementations.\nUsing it is non-portable and it may not support dual-stack.\nUsers are encouraged to use implementation-specific annotations when available.\n+optional",
                    "type": "string"
                },
                "loadBalancerSourceRanges": {
                    "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider\nload-balancer will be restricted to the specified client IPs. This field will be ignored if the\ncloud-provider does not support the feature.\"\nMore info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ports": {
                    "description": "The list of ports that are exposed by this service.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+patchMergeKey=port\n+patchStrategy=merge\n+listType=map\n+listMapKey=port\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ServicePort"
                    }
                },
                "publishNotReadyAddresses": {
                    "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this\nService should disregard any indications of ready/not-ready.\nThe primary use case for setting this field is for a StatefulSet's Headless Service to\npropagate SRV DNS records for its Pods for the purpose of peer discovery.\nThe Kubernetes controllers that generate Endpoints and EndpointSlice resources for\nServices interpret this to mean that all endpoints are considered \"ready\" even if the\nPods themselves are not. Agents which consume only Kubernetes generated endpoints\nthrough the Endpoints or EndpointSlice resources can safely assume this behavior.\n+optional",
                    "type": "boolean"
                },
                "selector": {
                    "description": "Route service traffic to pods with label keys and values matching this\nselector. If empty or not present, the service is assumed to have an\nexternal process managing its endpoints, which Kubernetes will not\nmodify. Only applies to types ClusterIP, NodePort, and LoadBalancer.\nIgnored if type is ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\n+optional\n+mapType=atomic",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sessionAffinity": {
                    "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity.\nEnable client IP based session affinity.\nMust be ClientIP or None.\nDefaults to None.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceAffinity"
                        }
                    ]
                },
                "sessionAffinityConfig": {
                    "description": "sessionAffinityConfig contains the configurations of session affinity.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SessionAffinityConfig"
                        }
                    ]
                },
                "trafficDistribution": {
                    "description": "TrafficDistribution offers a way to express preferences for how traffic is\ndistributed to Service endpoints. Implementations can use this field as a\nhint, but are not required to guarantee strict adherence. If the field is\nnot set, the implementation will apply its default routing strategy. If set\nto \"PreferClose\", implementations should prioritize endpoints that are\ntopologically close (e.g., same zone).\nThis is an alpha field and requires enabling ServiceTrafficDistribution feature.\n+featureGate=ServiceTrafficDistribution\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid\noptions are ExternalName, ClusterIP, NodePort, and LoadBalancer.\n\"ClusterIP\" allocates a cluster-internal IP address for load-balancing\nto endpoints. Endpoints are determined by the selector or if that is not\nspecified, by manual construction of an Endpoints object or\nEndpointSlice objects. If clusterIP is \"None\", no virtual IP is\nallocated and the endpoints are published as a set of endpoints rather\nthan a virtual IP.\n\"NodePort\" builds on ClusterIP and allocates a port on every node which\nroutes to the same endpoints as the clusterIP.\n\"LoadBalancer\" builds on NodePort and creates an external load-balancer\n(if supported in the current cloud) which routes to the same endpoints\nas the clusterIP.\n\"ExternalName\" aliases this service to the specified externalName.\nSeveral other fields do not apply to ExternalName services.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceType"
                        }
                    ]
                }
            }
        },
        "v1.ServiceStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Current service state\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Condition"
                    }
                },
                "loadBalancer": {
                    "description": "LoadBalancer contains the current status of the load-balancer,\nif one is present.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LoadBalancerStatus"
                        }
                    ]
                }
            }
        },
        "v1.ServiceType": {
            "type": "string",
            "enum": [
                "ClusterIP",
                "NodePort",
                "LoadBalancer",
                "ExternalName"
            ],
            "x-enum-varnames": [
                "ServiceTypeClusterIP",
                "ServiceTypeNodePort",
                "ServiceTypeLoadBalancer",
                "ServiceTypeExternalName"
            ]
        },
        "v1.SessionAffinityConfig": {
            "type": "object",
            "properties": {
                "clientIP": {
                    "description": "clientIP contains the configurations of Client IP based session affinity.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ClientIPConfig"
                        }
                    ]
                }
            }
        },
        "v1.SleepAction": {
            "type": "object",
            "properties": {
                "seconds": {
                    "description": "Seconds is the number of seconds to sleep.",
                    "type": "integer"
                }
            }
        },
        "v1.StorageMedium": {
            "type": "string",
            "enum": [
                "",
                "Memory",
                "HugePages",
                "HugePages-"
            ],
            "x-enum-comments": {
                "StorageMediumDefault": "use whatever the default is for the node, assume anything we don't explicitly handle is this",
                "StorageMediumHugePages": "use hugepages",
                "StorageMediumHugePagesPrefix": "prefix for full medium notation HugePages-\u003csize\u003e",
                "StorageMediumMemory": "use memory (e.g. tmpfs on linux)"
            },
            "x-enum-varnames": [
                "StorageMediumDefault",
                "StorageMediumMemory",
                "StorageMediumHugePages",
                "StorageMediumHugePagesPrefix"
            ]
        },
        "v1.StorageOSVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
                    "type": "string"
                },
                "volumeNamespace": {
                    "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.SupplementalGroupsPolicy": {
            "type": "string",
            "enum": [
                "Merge",
                "Strict"
            ],
            "x-enum-varnames": [
                "SupplementalGroupsPolicyMerge",
                "SupplementalGroupsPolicyStrict"
            ]
        },
        "v1.Sysctl": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of a property to set",
                    "type": "string"
                },
                "value": {
                    "description": "Value of a property to set",
                    "type": "string"
                }
            }
        },
        "v1.TCPSocketAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Optional: Host name to connect to, defaults to the pod IP.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.Taint": {
            "type": "object",
            "properties": {
                "effect": {
                    "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaintEffect"
                        }
                    ]
                },
                "key": {
                    "description": "Required. The taint key to be applied to a node.",
                    "type": "string"
                },
                "timeAdded": {
                    "description": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.\n+optional",
                    "type": "string"
                },
                "value": {
                    "description": "The taint value corresponding to the taint key.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TaintEffect": {
            "type": "string",
            "enum": [
                "NoSchedule",
                "PreferNoSchedule",
                "NoExecute"
            ],
            "x-enum-varnames": [
                "TaintEffectNoSchedule",
                "TaintEffectPreferNoSchedule",
                "TaintEffectNoExecute"
            ]
        },
        "v1.TerminationMessagePolicy": {
            "type": "string",
            "enum": [
                "File",
                "FallbackToLogsOnError"
            ],
            "x-enum-varnames": [
                "TerminationMessageReadFile",
                "TerminationMessageFallbackToLogsOnError"
            ]
        },
        "v1.Toleration": {
            "type": "object",
            "properties": {
                "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaintEffect"
                        }
                    ]
                },
                "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\n+optional",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TolerationOperator"
                        }
                    ]
                },
                "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.\n+optional",
                    "type": "integer"
                },
                "value": {
                    "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TolerationOperator": {
            "type": "string",
            "enum": [
                "Exists",
                "Equal"
            ],
            "x-enum-varnames": [
                "TolerationOpExists",
                "TolerationOpEqual"
            ]
        },
        "v1.TopologySpreadConstraint": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxSkew": {
                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen ` + "`" + `whenUnsatisfiable=DoNotSchedule` + "`" + `, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |   P   |\n+-------+-------+-------+\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen ` + "`" + `whenUnsatisfiable=ScheduleAnyway` + "`" + `, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.",
                    "type": "integer"
                },
                "minDomains": {
                    "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |  P P  |\n+-------+-------+-------+\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.\n+optional",
                    "type": "integer"
                },
                "nodeAffinityPolicy": {
                    "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeInclusionPolicy"
                        }
                    ]
                },
                "nodeTaintsPolicy": {
                    "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeInclusionPolicy"
                        }
                    ]
                },
                "topologyKey": {
                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.",
                    "type": "string"
                },
                "whenUnsatisfiable": {
                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n| P P P |   P   |   P   |\n+-------+-------+-------+\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.UnsatisfiableConstraintAction"
                        }
                    ]
                }
            }
        },
        "v1.TypedLocalObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                }
            }
        },
        "v1.TypedObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+featureGate=CrossNamespaceVolumeDataSource\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.URIScheme": {
            "type": "string",
            "enum": [
                "HTTP",
                "HTTPS"
            ],
            "x-enum-varnames": [
                "URISchemeHTTP",
                "URISchemeHTTPS"
            ]
        },
        "v1.UnsatisfiableConstraintAction": {
            "type": "string",
            "enum": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ],
            "x-enum-varnames": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ]
        },
        "v1.Volume": {
            "type": "object",
            "properties": {
                "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource"
                        }
                    ]
                },
                "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDiskVolumeSource"
                        }
                    ]
                },
                "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureFileVolumeSource"
                        }
                    ]
                },
                "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CephFSVolumeSource"
                        }
                    ]
                },
                "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CinderVolumeSource"
                        }
                    ]
                },
                "configMap": {
                    "description": "configMap represents a configMap that should populate this volume\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapVolumeSource"
                        }
                    ]
                },
                "csi": {
                    "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CSIVolumeSource"
                        }
                    ]
                },
                "downwardAPI": {
                    "description": "downwardAPI represents downward API about the pod that should populate this volume\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DownwardAPIVolumeSource"
                        }
                    ]
                },
                "emptyDir": {
                    "description": "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EmptyDirVolumeSource"
                        }
                    ]
                },
                "ephemeral": {
                    "description": "ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.\n\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EphemeralVolumeSource"
                        }
                    ]
                },
                "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FCVolumeSource"
                        }
                    ]
                },
                "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FlexVolumeSource"
                        }
                    ]
                },
                "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FlockerVolumeSource"
                        }
                    ]
                },
                "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource"
                        }
                    ]
                },
                "gitRepo": {
                    "description": "gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GitRepoVolumeSource"
                        }
                    ]
                },
                "glusterfs": {
                    "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GlusterfsVolumeSource"
                        }
                    ]
                },
                "hostPath": {
                    "description": "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HostPathVolumeSource"
                        }
                    ]
                },
                "image": {
                    "description": "image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.\nThe volume is resolved at pod startup depending on which PullPolicy value is provided:\n\n- Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\n- Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\n- IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\n\nThe volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.\nA failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.\nThe types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.\nThe OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.\nThe volume will be mounted read-only (ro) and non-executable files (noexec).\nSub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).\nThe field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.\n+featureGate=ImageVolume\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ImageVolumeSource"
                        }
                    ]
                },
                "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ISCSIVolumeSource"
                        }
                    ]
                },
                "name": {
                    "description": "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "nfs": {
                    "description": "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NFSVolumeSource"
                        }
                    ]
                },
                "persistentVolumeClaim": {
                    "description": "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
                        }
                    ]
                },
                "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PhotonPersistentDiskVolumeSource"
                        }
                    ]
                },
                "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PortworxVolumeSource"
                        }
                    ]
                },
                "projected": {
                    "description": "projected items for all in one resources secrets, configmaps, and downward API",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProjectedVolumeSource"
                        }
                    ]
                },
                "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.QuobyteVolumeSource"
                        }
                    ]
                },
                "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RBDVolumeSource"
                        }
                    ]
                },
                "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ScaleIOVolumeSource"
                        }
                    ]
                },
                "secret": {
                    "description": "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretVolumeSource"
                        }
                    ]
                },
                "storageos": {
                    "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StorageOSVolumeSource"
                        }
                    ]
                },
                "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.VsphereVirtualDiskVolumeSource"
                        }
                    ]
                }
            }
        },
        "v1.VolumeDevice": {
            "type": "object",
            "properties": {
                "devicePath": {
                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                    "type": "string"
                },
                "name": {
                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                    "type": "string"
                }
            }
        },
        "v1.VolumeMount": {
            "type": "object",
            "properties": {
                "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                    "type": "string"
                },
                "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.MountPropagationMode"
                        }
                    ]
                },
                "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "recursiveReadOnly": {
                    "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.\n\n+featureGate=RecursiveReadOnlyMounts\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RecursiveReadOnlyMode"
                        }
                    ]
                },
                "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional",
                    "type": "string"
                },
                "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.VolumeProjection": {
            "type": "object",
            "properties": {
                "clusterTrustBundle": {
                    "description": "ClusterTrustBundle allows a pod to access the ` + "`" + `.spec.trustBundle` + "`" + ` field\nof ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.\n\n+featureGate=ClusterTrustBundleProjection\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ClusterTrustBundleProjection"
                        }
                    ]
                },
                "configMap": {
                    "description": "configMap information about the configMap data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapProjection"
                        }
                    ]
                },
                "downwardAPI": {
                    "description": "downwardAPI information about the downwardAPI data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DownwardAPIProjection"
                        }
                    ]
                },
                "secret": {
                    "description": "secret information about the secret data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "serviceAccountToken": {
                    "description": "serviceAccountToken is information about the serviceAccountToken data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceAccountTokenProjection"
                        }
                    ]
                }
            }
        },
        "v1.VolumeResourceRequirements": {
            "type": "object",
            "properties": {
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                }
            }
        },
        "v1.VsphereVirtualDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "storagePolicyID": {
                    "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n+optional",
                    "type": "string"
                },
                "storagePolicyName": {
                    "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.\n+optional",
                    "type": "string"
                },
                "volumePath": {
                    "description": "volumePath is the path that identifies vSphere volume vmdk",
                    "type": "string"
                }
            }
        },
        "v1.WeightedPodAffinityTerm": {
            "type": "object",
            "properties": {
                "podAffinityTerm": {
                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinityTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.WindowsSecurityContextOptions": {
            "type": "object",
            "properties": {
                "gmsaCredentialSpec": {
                    "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional",
                    "type": "string"
                },
                "gmsaCredentialSpecName": {
                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional",
                    "type": "string"
                },
                "hostProcess": {
                    "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.\n+optional",
                    "type": "boolean"
                },
                "runAsUserName": {
                    "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Bearer Token认证",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8889",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "AI-CloudOps API",
	Description:      "AI-CloudOps云原生运维平台API文档",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
